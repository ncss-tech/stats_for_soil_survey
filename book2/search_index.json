[["model-evaluation.html", "Chapter 2 Model Evaluation 2.1 Introduction 2.2 Theory of Uncertainty 2.3 Resampling to Estimate Uncertainty 2.4 Performance Metrics 2.5 Validation", " Chapter 2 Model Evaluation 2.1 Introduction Validating and assessing the uncertainty of a model is just as, if not more important, than generating the model itself. Validation quantifies the model’s ability to explain variance in the data while uncertainty quantifies the confidence of model prediction. Uncertainty and validation assessments enable the end user to better understand model error, the nature and distribution of the input data, and the overall accuracy and spatial applicability of the model. Within a soil model, there are several sources of error: Measurement errors Interpretation errors Digitization errors Classification errors Generalization errors Interpolation errors Semantic errors Errors are simply the difference between reality and our representation of reality. Assessing the data structure with simple statistical measures such as mean, median and mode can be useful for understanding the central tendency of the data, but more complicated calculations are needed to get at dispersion or the variation of a property within a population to further assess error and uncertainty (Zar, 1999). Measure of Dispersion Range: The difference between the highest and lowest values measured or observed. Not always reliable because it can include outliers, error, or misclassified data. Quantiles: These refer to 25% increments in the rank of observations. Typically, the 25th and 75th quantiles are used to represent the spread of the most typical values around the central tendency. Measure of Variation * Variance: The deviation of from the mean is calculated as sum of squares (SS) to use absolute deviation (eliminate any distinction between negative and positive correlation). \\(variance (sample) = \\frac{SS}{n-1}\\) \\(SS = \\sum{(X - x)^2}\\) Standard deviation: Used to return variance to the original units \\(sd = \\sqrt{\\frac{SS}{n-1}}\\) Coefficient of variation: Scale standard deviation with mean so that multiple properties can be compared \\(CV = \\frac{SD}{x}\\) Measures of Certainty Standard Error: represents the variance of the mean that would be found with repeated sampling. Estimated by dividing standard deviation by the square root of n. The concept of standard error is important for hypothesis testing. Confidence interval: Interval in which you are confident that a given percentage (known as the confidence limit 95, 80, 75%) of the population lie. If a normal distribution is assumed, for a 95% confidence interval, it can be estimated that the value is 95% likely to fall between as SD * 1.96 +/- mean. 2.1.1 Examples - Dispersion Below is a simulated example demonstrating the affect of sample size and standard deviation on quantile estimates. library(dplyr) library(ggplot2) # create 50 random pH samples of 10, 30, 60, and 100 y &lt;- c(10, 30, 60, 100) lab &lt;- paste0(&quot;n = &quot;, y) f &lt;- function(x, n, sd) { idx &lt;- rnorm(n, mean = 7, sd = sd) tmp &lt;- data.frame(iteration = factor(x, levels = 1:30), n = factor(n, levels = y, labels = lab), sd = paste0(&quot;sd = &quot;, sd), pH = idx) return(tmp) } # standard deviation of 1 test &lt;- mapply(FUN = f, rep(1:30, times = 4), rep(y, each = 30), sd = 1, SIMPLIFY = FALSE) test &lt;- do.call(&quot;rbind&quot;, test) # standard deviation of 1 test2 &lt;- mapply(FUN = f, rep(1:30, times = 4), rep(y, each = 30), sd = 2, SIMPLIFY = FALSE) test2 &lt;- do.call(&quot;rbind&quot;, test2) test &lt;- rbind(test, test2) # examine summary statistics test %&gt;% group_by(iteration, n, sd) %&gt;% summarize(med = median(pH)) %&gt;% group_by(sd, n) %&gt;% summarize(across(med, list(min = min, mean = mean, max = max))) ## # A tibble: 8 × 5 ## # Groups: sd [2] ## sd n med_min med_mean med_max ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 sd = 1 n = 10 6.04 7.05 8.22 ## 2 sd = 1 n = 30 6.59 6.98 7.36 ## 3 sd = 1 n = 60 6.59 6.97 7.19 ## 4 sd = 1 n = 100 6.79 7.00 7.20 ## 5 sd = 2 n = 10 5.18 7.06 8.46 ## 6 sd = 2 n = 30 6.39 7.06 8.17 ## 7 sd = 2 n = 60 6.29 6.88 7.63 ## 8 sd = 2 n = 100 6.61 7.04 7.74 # examine box plots ggplot(test, aes(x = iteration, y = pH)) + geom_boxplot() + facet_wrap(~ n + sd, ncol = 2, ) The results show that quantile estimates are more variable with smaller sample sizes and larger inherent standard deviations. This example demonstrates how our results would differ if we were to sample the same soils again. We would be “uncertain” of our results unless the underlying standard deviation is small or our sample size was large. Both factors would also impact how certain we could be that 2 or more classes of soils are different. 2.1.2 Examples - Variation and Certainty Demonstration of how to calculate variance. # calculate the mean mu &lt;- mean(test$pH) # subtract mean from each value and square (i.e. residuals) test$S &lt;- (test$pH - mu)^2 # calculate overall sum of squares SS &lt;- sum(test$S) # calculate sample variance (length gives us the total number of sample/observations) SS / (length(test$pH) - 1) ## [1] 2.469614 Note below how our estimate of the variance can vary widely, particularly for simulated datasets with a inherent standard deviation of 2. test %&gt;% group_by(iteration, n, sd) %&gt;% summarize(var = var(pH)) %&gt;% group_by(sd, n) %&gt;% summarize(across(var, list(min = min, mean = mean, max = max))) ## # A tibble: 8 × 5 ## # Groups: sd [2] ## sd n var_min var_mean var_max ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 sd = 1 n = 10 0.272 1.17 3.06 ## 2 sd = 1 n = 30 0.585 1.04 1.62 ## 3 sd = 1 n = 60 0.609 1.07 1.61 ## 4 sd = 1 n = 100 0.685 1.01 1.45 ## 5 sd = 2 n = 10 1.37 4.23 8.88 ## 6 sd = 2 n = 30 1.89 3.81 8.06 ## 7 sd = 2 n = 60 3.16 3.99 6.11 ## 8 sd = 2 n = 100 2.38 3.84 4.87 Now let’s see Standard Error (standard deviation / square root of n) below. The results show how our estimates become more precise as the sample size increases. SE &lt;- function(x) sd(x, na.rm = TRUE) / sqrt(length(!is.na(x))) test %&gt;% group_by(iteration, n, sd) %&gt;% summarize(SE = SE(pH)) %&gt;% group_by(sd, n) %&gt;% summarize(across(SE, list(min = min, mean = mean, max = max))) ## # A tibble: 8 × 5 ## # Groups: sd [2] ## sd n SE_min SE_mean SE_max ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 sd = 1 n = 10 0.165 0.331 0.553 ## 2 sd = 1 n = 30 0.140 0.184 0.232 ## 3 sd = 1 n = 60 0.101 0.133 0.164 ## 4 sd = 1 n = 100 0.0828 0.100 0.120 ## 5 sd = 2 n = 10 0.370 0.639 0.942 ## 6 sd = 2 n = 30 0.251 0.351 0.518 ## 7 sd = 2 n = 60 0.229 0.257 0.319 ## 8 sd = 2 n = 100 0.154 0.195 0.221 2.2 Theory of Uncertainty At it’s most basic level, uncertainty is simply a lack of certainty. In soil survey, uncertainty encompasses both of these aspects: you’ve gathered multiple observations and you need to describe them in relation to one another, and you must predict a property or characteristic at unobserved locations. It is difficult to quantify the knowledge we have about data and information uncertainty. While we may have good data of the accuracy of our GPS, how likely are we to include that in our estimates of model error? How important is it? In other disciplines, they spend a lot of time quantifying and tracking measurement error. In soil science, we tend to treat measurement as having an exact known location and value. Given the unknowns in mapping and predicting soil properties, this is a reasonable treatment of relatively small levels of error. When using secondary information as data (or data that is actually a prior prediction or result of a model, including soil components), considering incorporated error can be crucial. One way to deal with this is through re-sampling an alternate way is to through error propagation theory. The most common way to deal with this in soil survey and digital soil mapping is to assess error through model validation. Explanatory vs. Predictive Modelling While explanatory and predictive modeling can use the same types of models, data and even questions, the errors and uncertainty are important for different reasons Explanatory or Descriptive - data are collected and analyzed in order to test causal hypothesis and observe correlations and relationships between data element. Often used at the beginning phases of soil-landscape exploration. How does the soil relate to each of the soil forming factors? Predictive - applying a model or algorithm to data for the purpose of making a prediction (in new or unknown locations) (Shueli, 2010). 2.3 Resampling to Estimate Uncertainty When calculating many basic statistical parameters, the assumption is that the data is parametric. That implies that the data is continuous (ratio or interval) and normally distributed. This is rarely the case with soil data. Soil properties are often not normally distributed (you cannot have less that 0% organic matter, for instance) and often we are trying to predict soil taxa or other nominal classes. Re-sampling is a general term that defines any procedure to repeatedly draw samples form a given data-set. You are essentially pretending to collect a series of separate samples from your sample set then calculating a statistic on that sample. Re-sampling techniques can be used on known and unknown data distributions for uncertainty estimation and validation (Good 2013). # this bootstrap is estimating the uncertainty associated with the variance of sas$pH_0.30_obs # an example of getting a confidence interval through bootstrapping (no assumption of a normal distribution) # load the GSP Salt Affected Soil dataset url &lt;- &quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/gsp_sas.csv&quot; sas &lt;- read.csv(url) N &lt;- nrow(sas) # abbreviate our data to simply the commands ph &lt;- na.exclude(sas$pH_0.30_obs) n &lt;- 100 # set number of iterations k &lt;- 50 # create a data frame to store the results boot_stats &lt;- data.frame( vars = numeric(k), means = numeric(k) ) # for each instance (i) in the set from 1 to N (50 in this case) for (i in 1:k) { # create a new variable dB from each bootstrap sample of d boot.sample = sample(ph, n, replace = TRUE) boot_stats$means[i] = mean(boot.sample) boot_stats$vars[i] = var(boot.sample) } quantile(boot_stats$vars) ## 0% 25% 50% 75% 100% ## 0.8839985 1.0410593 1.1611743 1.2177991 1.4668006 stripchart(boot_stats$vars) # Traditional Approach ci &lt;- c( # lower 5th l = mean(ph) - 1.96 * sd(ph) / sqrt(N), # upper 95th u = mean(ph) + 1.96 * sd(ph) / sqrt(N) ) # Compare Bootstrap to Confidence Interval quantile(boot_stats$means, c(0.025, 0.975)) ## 2.5% 97.5% ## 5.848724 6.207920 ci ## l u ## 6.002983 6.024366 2.3.1 Exercise 1 Create a new R script. Calculate a bootstrapped median, 10th percentile, and 90th percentile for EC_0.30_obs. Calculate a traditional confidence interval for EC_0.30_obs. Why is the traditional confidence interval so much narrower? Forward you R script your instructor. 2.4 Performance Metrics When evaluating a model, we need to estimate both it’s accuracy and precision. Accuracy estimates the ability of a measurement or prediction to match the actual or reference value of the quantity being measured. Precision in contrast estimates our ability to reproduce a measurement or prediction consistently. Typically people will refer to uncertainty, which is the inverse of precision. Below is a summary of the various measures used to quantify accuracy and precision. The choice of metric depends on whether we are measuring or modeling continuous or categorical variables. In general, all models that estimate continuous variables are referred to as regression models. Sometimes regression models are referred too as quantitative, while categorical models are referred too as qualitative. 2.4.1 Regression Metrics Bias: Mean Error (ME)/Prediction Error/Bias: Description: Quantifies whether the overall error is systematically positive or negative; the closer to 0, the better. Pro: In the same use as the original values Accuracy: Mean Square Error (MSE): Description: Squared estimate of the average error size. Con: Not in the same units as the original values. Root Mean Square Error (RMSE): Description: Positive estimate of the average error size; the smaller, the better. Pro: In the same units as the original values. Coefficient of Determination (R2): Description: Represents the proportion of variance explained by the model. Pro: Values range between 0 and 1. Values &lt; 0 can occur if the prediction is worse than simply predicting the average value. Con: Over-optimistic when extreme values or skewed distributions are present. Often confused with the squared Pearson’s correlation coefficient (r2). References: Kutner et al. 2004; Zumel and Mount 2020 Precision/Uncertainty: Standard Error (SE): Description: Error in the model parameters (e.g., coefficients or overall prediction). Confidence Interval (CI): Description: Conversion of the SE to an interval according to a given probability (e.g., 95 percent); its range is narrower than the prediction interval. Con: Assumes a normal distribution, unless transformed or bootstrapped. References: Webster (2001) Prediction Interval (PI): Description: Interval designed to capture the range in values of a prediction according to a given probability. Relative Prediction Interval (RPI): Description: Ratio of the 95 percent prediction interval range to the 95 percent observed inter-quantile range in values. Can use different probability values (e.g., 90 percent PI to 90 percent inter-quantile range). Pro: Typically ranges between 0 and 1; values larger than 1 indicate very high model uncertainty. No distribution assumptions. References: Nauman and Duniway (2019) library(caret) # Numeric accuracy metrics---- # R2 ---- caret::R2( pred = sas$pH_0.30_pred, obs = sas$pH_0.30_obs, formula = &quot;traditional&quot;, na.rm = TRUE ) ## [1] 0.8526782 # RMSE ---- caret::RMSE( pred = sas$pH_0.30_pred, obs = sas$pH_0.30_obs, na.rm = TRUE ) ## [1] 0.4690274 # Numeric precision/uncertainty metrics---- # R2 confidence interval vars &lt;- c(&quot;pH_0.30_pred&quot;, &quot;pH_0.30_obs&quot;) MBESS::ci.R2( R2 = 0.85, N = sum(complete.cases(sas[vars])), K = 1, conf.level = 0.975 ) ## $Lower.Conf.Limit.R2 ## [1] 0.8462365 ## ## $Prob.Less.Lower ## [1] 0.0125 ## ## $Upper.Conf.Limit.R2 ## [1] 0.8536713 ## ## $Prob.Greater.Upper ## [1] 0.0125 # RMSE confidence interval ## Standard Error n &lt;- sum(complete.cases(sas[vars])) SE &lt;- qnorm(0.975) * sqrt(var((sas$pH_0.30_obs - sas$pH_0.30_pred)^2, na.rm = TRUE) / n) ## Confidence Interval 0.47 + c(-1 * SE, SE) ## [1] 0.4645869 0.4754131 # plot errors idx &lt;- sample(1:nrow(sas), 100) ggplot(sas[idx, ], aes(x = pH_0.30_pred, y = pH_0.30_obs)) + geom_point() + # draw a 1 to 1 line geom_abline() + # draw a linear fit; method = &quot;lm&quot; geom_smooth(method = &quot;lm&quot;) ggplot(sas, aes(x = pH_0.30_pred, y = pH_0.30_obs)) + # use a hex geom if there are too many points and they overlap geom_hex() + geom_abline() + geom_smooth() 2.4.2 Exercise 2 Append the following exercises to your previous R script. Compare the traditional \\(R^2\\) to the alternative \\(R^2\\) for EC_0.30_obs vs EC_0.30_pred? Calculate the RMSE() and MAE()for EC_0.30_obs vs EC_0.30_pred? Plot a hex bin scatterplot of EC_0.30_obs vs EC_0.30_pred with a linear smoother. Forward you R script your instructor. 2.4.3 Categorical 2.4.3.1 Probability-based metrics (threshold-independent) Beware the \\(D^2\\), Tjur’s D, and AUC (or c-statistic) only apply to binary classes. Accuracy: Brier Score (BS): Description: In the case of binary outcomes (e.g., 1 vs. 0), it is equivalent to the Mean Square Error, where a positive outcome equals 1 minus the predicted probability. For multinomial outcomes, the squared error is averaged for all classes. Lower values denote higher accuracy. Pro: Integrates more information about predictions (all probabilities) vs. the most likely class used by overall accuracy or tau index. Con: Does not incorporate prior knowledge of class proportions. Does not incorporate class similarity. References: Brier (1950); Harrell (2015); Steyerberg (2019) Deviance Squared (D2) or Pseudo R2: Description: The proportion of deviance explained. Pro: Values range between 0 and 1. Values &lt; 0 can occur if the prediction is worse than simply predicting the average value. Con: Over-optimistic when extreme values or skewed distributions are present. Coefficient of Discrimination (or Tjur’s D): Description: Difference in average probability of true positives and true negatives. It is another alternative version of D2 or Pseudo R2. Pro: Values range between 0 and 1. References: Tjur (2013) Concordance (c) Statistic or Area Under the Curve (AUC): Description: Probability that a binary classifier does better than random chance. The area under the receiver operator characteristic curve. Pro: Values range between 0.5 and 1. Con: Less sensitive than D2. References: Hand (2012); Harrell (2015) Precision/Uncertainty: Shannon entropy: Description: Quantitative measure of “information,” “complexity,” “certainty,” or “diversity” contained within a vector of probabilities. Larger values denote less information, higher complexity, less certainty, and greater diversity. Pro: Integrates “confusion” over all probabilities. Entropy values from different models (e.g., differing numbers of classes) can be directly compared. Con: Does not incorporate the similarity between classes. References: Shannon (1948) Normalized Shannon Entropy: Description: An alternate version of Shannon Entropy that is constrained to the interval [0,1]. Pro: Integrates “confusion” over all probabilities. Constrained to [0,1]. Con: Cannot be used to compare models with differing numbers of classes. May not be implemented in all software packages. References: Kempen et al. (2009) Confusion Index: Description: An index of confusion among the top two most likely classes. Pro: Simple calculation and constrained to [0,1]. Con: Cannot be used to compare models with differing numbers of classes. Only describes uncertainty of top two classes. May not be implemented in all software packages. References: Burrough et al. (1997) 2.4.3.2 Class-based metrics These metrics are derivatives of the confusion matrix (Congalton and Green 2019a; Fielding and Bell 1997; James et al. 2021; Kuhn and Johnson 2013) (caret::confusionMatrix()) Accuracy: Overall Accuracy: Description: The proportion of correctly classified observations as tabulated in the confusion matrix. Pro: Simple to calculate and interpret, based entirely on the confusion matrix. Con: Does not account for mistakes due to chance. Does not incorporate prior knowledge of class proportions. Does not incorporate class similarity. Does not incorporate information contained within vector of predicted probabilities. References: Story and Congalton 1986 Kappa Coefficient: Description: An index that represents the agreement between predicted and observed values and accounts for chance agreement. Pro: Easily calculated from the confusion matrix. Generated by most software packages along with the confusion matrix. Con: Interpretation of Kappa values between 0 and 1 is largely arbitrary. A value of &lt; 0 indicates no agreement, and a value of 1 indicates perfect agreement. Recommended to use Kappa along with other measures of accuracy. Numerous authors now question the utility and assumptions of Kappa. References: Congalton and Mead (1983); Foody (2020) Tau Index: Description: An index of agreement that accounts for agreement by chance—effectively a replacement for Kappa. Pro: The index is more informative when appropriate class proportions are supplied. Index values can be referenced to concepts such as “better” or “worse” than random allocation. Con: Appropriate prior class proportions are method dependent. Interpretation requires some training. References: Ma &amp; Remond (1995) Weighted Tau Index: Description: Alternative version of the tau index that accommodates class similarity. Pro: The index is more informative when appropriate class proportions are supplied. Class similarity down-weights mistakes between similar classes. Con: Appropriate prior class proportions are method dependent. There is no universal method for estimating class similarity weights. Interpretation requires some training. References: Rossiter (2017) Precision/Uncertainty: Standard Error (SE): Description: Error in the model parameters (e.g., coefficients or overall prediction). Confidence Interval (CI): Description: Conversion of the SE to an interval according to a given probability (e.g., 95 percent); its range is narrower than the prediction interval. Con: Assumes a normal distribution, unless transformed or bootstrapped. References: Beware, measures like Overall Accuracy, Precision and User Accuracy are dependent on the prevalence (frequency) of observation, and thus shouldn’t be use to compare classes with different sample sizes (Foody 2010; Kuhn and Johnson 2013, 2019; Monaghan et al. 2021; Parikh et al. 2008). Alternative calculations exist for row-wise accuracy that corrects for prevalence, such as the positive predictive value (PPV) and negative predictive value (NPV), which are available via the caret::confusionMatrix function. Similar named functions exist in other R packages, but don’t incorporate the prevalence corrected calculations. Confusion Matrix Observed Metric Predicted No Yes UA No True Negative (TN) False Negative (FN) NPV/ UA Yes False Positive (FP) True Positive (TP) PPV/ Precision / UA ——————- ——————– ——————— ——————- Metric Specificity / PA Sensitivity / PA Overall Prevalence (P): % of class occurrence in the population, usually this is estimated from the sample Overall Accuracy: % of observations that were correctly classified, for all classes Sensitivity (SN) (aka Recall or True Positive Rate): TP / (TP + FN) % of TRUE predictions that were correctly classified, for an individual class Specificity (SP) (aka True Negative Rate): TN / (TN + FP) errors of commission (Type I) % of FALSE observations that were correctly classified, for an individual class Precision: TP / (TP + FP) % of TRUE observations that were classified as a class, that actually were that class Positive Preditive Value (PPV): if prevalence = 50 then TP / (TP + FP) if prevalence != 50 then SN * P / (SN * P) + ((1 - SP) * (1 - P)) % of TRUE observations that were classified as a class, that actually were that class Negative Predictive Value (NPV): if prevalence = 50 then TN / (TN + FN) if prevalence != 50 then SP * (1 - P) / (P * (1 - SN)) + (SP * (1 - P)) % of FALSE observations that were classified as a class, that actually were that class Producer’s Accuracy (PA): diagonal values (TN &amp; TP) / observed values % of predictions that were correctly classified, for an individual class User’s Accuracy (UA): diagonal values / predicted values % of FALSE observations that were classified as a class, that actually were that class Tau index: An index of accuracy that accounts for agreement by chance— effectively a replacement for Cohen’s Kappa (aqp::tauW()) url &lt;- &quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/gsp_bs.csv&quot; bs &lt;- read.csv(url) bs &lt;- subset(bs, complete.cases(BS1_obs, BS2_obs)) # Probability metrics ---- ## Brier score ---- vars &lt;- c(&quot;BS2_pred&quot;, &quot;BS2_obs&quot;) aqp::brierScore( bs[vars], classLabels = &quot;BS2_pred&quot;, actual = &quot;BS2_obs&quot; ) ## [1] 0.04384271 ## D2 &amp; Tjur D2---- modEvA::RsqGLM(obs = bs$BS2_obs, pred = bs$BS2_pred, plot = FALSE) ## $CoxSnell ## [1] 0.3957293 ## ## $Nagelkerke ## [1] 0.7857143 ## ## $McFadden ## [1] 0.7191203 ## ## $Tjur ## [1] 0.4823267 ## ## $sqPearson ## [1] 0.5992087 # Shannon entropy ---- # fake example test &lt;- seq(0, 0.5, 0.1) test &lt;- data.frame(obs = test, pred = 1 - test) cbind( test, entropy = apply(test, 1, aqp::shannonEntropy) ) ## obs pred entropy ## 1 0.0 1.0 0.0000000 ## 2 0.1 0.9 0.4689956 ## 3 0.2 0.8 0.7219281 ## 4 0.3 0.7 0.8812909 ## 5 0.4 0.6 0.9709506 ## 6 0.5 0.5 1.0000000 # bs example summary( apply(data.frame(bs$BS2_pred, 1 - bs$BS2_pred), 1, aqp::shannonEntropy) ) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.2111 0.4327 0.4722 0.7418 1.0000 # Class-based metrics ----- ## Confusion matrix ---- # beware conf_mat prefers factors with equal numbers of levels # also if your table only has 2 classes, you need to specify which is &#39;positive&#39; cm1 &lt;- table(pred = as.factor(bs$BS2_pred &gt; 0.5), obs = as.factor(bs$BS2_obs)) cm1 ## obs ## pred FALSE TRUE ## FALSE 28788 979 ## TRUE 411 2696 # or cm2 &lt;- caret::confusionMatrix(cm1, positive = &quot;TRUE&quot;) cm2 ## Confusion Matrix and Statistics ## ## obs ## pred FALSE TRUE ## FALSE 28788 979 ## TRUE 411 2696 ## ## Accuracy : 0.9577 ## 95% CI : (0.9555, 0.9599) ## No Information Rate : 0.8882 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.7717 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.73361 ## Specificity : 0.98592 ## Pos Pred Value : 0.86772 ## Neg Pred Value : 0.96711 ## Prevalence : 0.11179 ## Detection Rate : 0.08201 ## Detection Prevalence : 0.09451 ## Balanced Accuracy : 0.85976 ## ## &#39;Positive&#39; Class : TRUE ## ## Examine thresholds ---- ggplot(bs, aes(x = BS2_pred, fill = BS2_obs)) + geom_density(alpha = 0.5) + geom_vline(xintercept = 0.5, linetype = &quot;dashed&quot;) + xlab(&quot;BS2 Probability&quot;) ## Trade Precision for Sensitivity by Varying the Threshold table(predicted = bs$BS2_pred &gt; 0.5, observed = bs$BS2_obs) ## observed ## predicted FALSE TRUE ## FALSE 28788 979 ## TRUE 411 2696 2.4.4 Exercise 3 Append the following exercises to your previous R script. Calculate the Brier score, \\(D^2\\) and Shannon Entropy for the BS1 class from the bs dataset. What probably threshold creates the best split for the BS1 class. Calculate a confusion matrix for sas30_obs vs sas30_pred from the sas dataset. Be sure to manually set the factor levels as shown below. lev &lt;- unique(c(sas$sas030_obs, sas$sas030_pred)) lev &lt;- lev[c(1, 4, 8, 9, 12, 5, 3, 6, 7, 11)] sas$sas030_obs &lt;- factor(sas$sas030_obs, levels = lev) sas$sas030_pred &lt;- factor(sas$sas030_pred, levels = lev) Why can’t you calculate a Brier score and Shannon entropy for the SAS classes from the sas dataset? Forward you R script your instructor. 2.4.4.1 Stratified-random/areal-adjustment In the case of stratified-random samples or non-probability samples, it is necessary to adjust the class totals by their assumed/estimated proportion or area prior to calculating their accuracy or standard errors (Brus, Kempen, and Heuvelink 2011; Campbell, Wynne, and Thomas 2023; Congalton and Green 2019b; Stehman and Foody 2019). This is often the case when a minority class (e.g. minor component or small map unit) is sampled in excess of it’s true proportion relative to the total sample set. Surprisingly R functions to adjusts for these unequal weights is rare, with the exception of the sits and MetricsWeighted R package. # weights wt &lt;- c(`FALSE` = 0.95, `TRUE` = 0.05) # confusion matrix cm &lt;- table(pred = bs$BS2_pred &gt; 0.5, obs = bs$BS2_obs) cm ## obs ## pred FALSE TRUE ## FALSE 28788 979 ## TRUE 411 2696 # apply weights cm_wt &lt;- wt * cm/rowSums(cm) # optional transformation to original totals cm_wt2 &lt;- cm_wt/sum(cm_wt) * sum(cm) # compare weighted and unweighted confusion matrices confusionMatrix(cm, positive = &quot;TRUE&quot;)$byClass ## Sensitivity Specificity Pos Pred Value ## 0.73360544 0.98592418 0.86771806 ## Neg Pred Value Precision Recall ## 0.96711123 0.86771806 0.73360544 ## F1 Prevalence Detection Rate ## 0.79504571 0.11179047 0.08201010 ## Detection Prevalence Balanced Accuracy ## 0.09451238 0.85976481 confusionMatrix(cm_wt2, positive = &quot;TRUE&quot;)$byClass ## Sensitivity Specificity Pos Pred Value ## 0.58134486 0.99285248 0.86771806 ## Neg Pred Value Precision Recall ## 0.96711123 0.86771806 0.58134486 ## F1 Prevalence Detection Rate ## 0.69623400 0.07463023 0.04338590 ## Detection Prevalence Balanced Accuracy ## 0.05000000 0.78709867 2.5 Validation Validation refers to the process and the result of a process where the validity of a model is tested. That is, how well does the model represent reality? There are varying degrees of formality and thoroughness that can be used in validation. While multiple stages of the modeling process can be validated, usually it’s the output of the model that is investigated and reported. You can group initial validation into three broad groups: Expert evaluation, Theoretical Analysis and Prediction Accuracy. Expert Evaluation: In this case, the model output is inspected by an expert user. The first evaluator will be you (the developer), but ideally an outside expert will be utilized. This is often a step in an iterative process. Evaluate the model output, does it make sense, do you see things that need to be improved? Then make changes to the model to improve the output. Theoretical Analysis: compare the results of the model to what is theoretically possible. In systems modeling, this might include diagnostics statistics including residual analysis, cross-correlation of variables and outputs, sensitivity analysis and model analysis such as Akaike Information Criterion (AIC). This can also include simple comparison of output to known possible values. This is especially important for linear regression where the slope of the model is assumed to be steady no matter the values of the dependent variables. Prediction Accuracy: The correctness of the parameter being predicted by the model (soil taxa, property etc.). Ideally this is done with an independent set of data. In soil science, we typically use the term model validation to refer to a statistical analysis that assesses how well a model will predict at an unknown location. A complete model should have a formal statistical evaluation that can be reported and stored as model and output meta-data. That is the portion of validation we will focus. For this discussion, validation can be thought of as an assessment of prediction error and variance. Three types of validation used in the course Internal - Performance on population underlying the sample External - Performance on related (similar/adjacent) but independent population 2.5.1 Internal Validation 2.5.1.1 Split-sample - A single partition of the data into a learning and a calibration set. Achieve an independent validation by partitioning the samples into calibration or training and validation data-sets (70% of the samples available are recommended for calibration) Build model on calibration (training) data-set Test model on validation (test) data-set Report accuracy on the validation data-set This method is relatively simple (conceptually and computationally). Results depend on having an adequate sample size to both develop and test the model. 2.5.1.2 Cross-validation - Alternate development and validation Leave-One-Out Cross-Validation (LOOCV) One observation is used for testing and all others are used to develop model Repeat n (total number of observations) times Average error over n The mean of the accuracy is the expected accuracy of the model (this assumes that new data is from the same population) (Efron, 1983) k-fold Cross-Validation (k-fold) CV Randomly divide observations into calibration and validation sets. Repeat k times, each time one k group is used for error estimates Average error of k Less computationally intensive than LOOCV, but it is more robust and can be done with smaller sample sizes than a simple split. Several R packages have tools to cross-validate predictions, including: DAAG and boot for lm() and glm() objects, caret, rms, ### Linear model example # Create folds folds &lt;- createFolds(1:nrow(sas), k = 10) # Cross validate lm_cv &lt;- lapply(folds, function(x) { train = sas[-x,] test = sas[x,] obs = test$pH_0.30_obs # predict = predict(model, test) pred = test$pH_0.30_pred RMSE = RMSE(pred, obs, na.rm = TRUE) R2 = R2(pred, obs, formula = &quot;traditional&quot;, na.rm = TRUE) return(c(RMSE = RMSE, R2 = R2)) }) # Convert to a data.frame lm_cv &lt;- do.call(rbind, lm_cv) # Summarize results summary(lm_cv) ## RMSE R2 ## Min. :0.4581 Min. :0.8422 ## 1st Qu.:0.4659 1st Qu.:0.8505 ## Median :0.4681 Median :0.8533 ## Mean :0.4690 Mean :0.8526 ## 3rd Qu.:0.4720 3rd Qu.:0.8548 ## Max. :0.4820 Max. :0.8588 2.5.1.3 Subsample (Resampling or sample simulation) In this method, the ‘leave-out’ method can be random (Bootstrap) or observation selection can use a more sophisticated method to select observations to represent the population including Monte Carlo (Molarino, 2005) and .632+bootstrap of Efron &amp; Tibshirani (1997). The details of those aren’t important, except to know that they can give you a better idea of the robustness of your model. As with re-sampling for uncertainty estimation, observations are repeatedly sampled Select a number of samples (Randomly or from known distribution). Develop the model Estimate model accuracy on unselected samples Repeat the process (with independent sample) a large number of times, 500 - 5,000. The expected model accuracy is then the mean of the estimates. NOTE: The BEST model should not be assumed to be the one that makes the ‘truest’ predictions. Beware of over-fitting. When a model is over-fit, it predicts due to very specific “quirks” in the calibration data set and not due to explanatory relationships that will apply to validation and independent data-sets. One strategy to avoid this situation is to build models with as few variables as possible. Parsimonious models (those that use the least amount of information possible to obtain the same result or convey the same meaning) often have higher predicative validity. The use of metrics such as Akaike’s Information Criterion (AIC) can be helpful for balancing error and parameter minimization. 2.5.2 External Validation In this case, an independent data-set is used as the test case. Independent observations predicted with model Errors (ME, RMSE) calculated on predicted vs. actual Some exploratory analysis can be helpful to diagnose and explain model performance. The use of validation will be demonstrated as part of each modeling section. The size of the data-set used, understanding of the variables involved and the nature of the statistical models and algorithms used all influence which validation techniques are most convenient and appropriate. References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
