[["index.html", "Statistics for Soil Survey - Part 2 Pre-course Assignment 0.1 Setup 0.2 Connect to Local NASIS 0.3 Additional Support/Optional Readings", " Statistics for Soil Survey - Part 2 Soil Survey Staff 2021-05-07 Pre-course Assignment 0.1 Setup 0.1.1 Create Workspace Make a local folder C:\\workspace2 to use as a working directory for this course. Use all lower case letters please. 0.1.2 Configure RStudio Open RStudio, and edit the Global Options (Main menu: Tools  Global Options). 0.1.2.1 Essentials These options are important for pleasant, reproducible and efficient use of the RStudio environment: Change the default working directory to C:\\workspace2 (R General Tab) Uncheck Restore .Rdata into workspace at startup (R General Tab) VERY IMPORTANT Figure 1: Example of RStudio General settings. RStudio detects the available R installations on your computer. Individual versions are certified for the Software Center as they become available, and sometimes there is a more recent version available for download. It is worth taking the time before installing packages to get the latest version of R available to you. This is to minimize compatibility issues which arise over time. 0.1.2.2 Personalization Figure 2: Example of RStudio Code/Editing settings. Optional: Check Soft-wrap R source files (Code/Editing Tab) Optional: Show help tooltips, control auto-completion and diagnostics (Code/Completion and Diagnostics Tabs) Optional: Update code font size, colors and theme (Appearance) Optional: Use RStudio Projects (top-right corner) to manage working directories 0.1.3 Install .RProfile The code you run next will establish a safe location for your R package library. Your package library should ideally be on a local disk with about 1 - 2 GB of free space. We want to prevent installs to ~ (your $HOME directory) which is typically on a network share (such as H:/), not a local disk. Copy the following code in the box below and paste into the R console panel after the command prompt (&gt;) and press enter. Hint: the R console is the lower left or left window in RStudio with a tab labeled Console. source(&#39;https://raw.githubusercontent.com/ncss-tech/soilReports/master/R/installRprofile.R&#39;) installRprofile(overwrite=TRUE) An updated set of library paths will be printed. Close and re-open RStudio, or Restart R (Main menu: Session  Restart R; or Ctrl+Shift+F10), before continuing to the next steps. Figure 3: Example of RStudio Console - the R library paths are on a local drive C:/ When your .Rprofile is set up correctly you will see output in a new R console/session confirming your library paths are: on a local drive (such as C:/) specific to the version number of R installed (such as 4.0) 0.1.4 Install Required Packages Packages can be installed by name from the Comprehensive R Archive Network (CRAN) using the base R function install.packages There are a lot of packages out there  many more than you will download here, and many of which are useful for Soil Survey work. The first time you install packages, R will ask you if you want to create a local repository in your User Documents folder. Click Yes. For example, to download and install the remotes package from CRAN: install.packages(&quot;remotes&quot;) To install the R packages used in this class copy all of the code from the box below and paste into the R console window. Paste after the command prompt (&gt;) and press enter. Downloading and configuring the packages will take a while if you are installing or upgrading all of the packages in the list below. # ipkCRAN: a helper function for installing required packages from CRAN # - p: vector of package names # - up: logical - upgrade installed packages? Default: TRUE ipkCRAN &lt;- function(p, up = TRUE){ message(&#39;installing packages from CRAN...&#39;) if (up) { # default is to re-install everything install.packages(p, dependencies = TRUE) } else { # but if up != TRUE install just what is needed new.pkg &lt;- p[! (p %in% installed.packages()[, &quot;Package&quot;])] if (length(new.pkg) &gt; 0) { install.packages(new.pkg, dependencies = TRUE) } } # finally, check and see if any failed missing.pkg &lt;- p[! (p %in% installed.packages()[, &quot;Package&quot;])] if (length(missing.pkg) &gt; 0) { warning(sprintf(&#39;\\033[31mOne or more packages failed to install!\\033[39m\\n%s&#39;, sprintf(&quot;Restart R then try `\\033[35minstall.packages(c(%s))\\033[39m`&quot;, paste0(sprintf(&#39;&quot;%s&quot;&#39;, missing.pkg), collapse = &quot;,&quot;))), call. = FALSE) } } ## character vector of packages packages &lt;- c( # soil &quot;aqp&quot;, &quot;soilDB&quot;, &quot;sharpshootR&quot;, &quot;soiltexture&quot;, # gis &quot;rgdal&quot;, &quot;raster&quot;, &quot;sp&quot;, &quot;sf&quot;, &quot;terra&quot;, &quot;gdalUtils&quot;, &quot;rgrass7&quot;, &quot;RSAGA&quot;, &quot;exactextractr&quot;, &quot;fasterize&quot;, # data management &quot;dplyr&quot;, &quot;tidyr&quot;, &quot;devtools&quot;, &quot;roxygen2&quot;, &quot;Hmisc&quot;, &quot;RODBC&quot;, &quot;circular&quot;, &quot;DT&quot;, &quot;remotes&quot;, # graphics &quot;ggplot2&quot;, &quot;latticeExtra&quot;, &quot;maps&quot;, &quot;spData&quot;, &quot;tmap&quot;, &quot;mapview&quot;, &quot;plotrix&quot;, &quot;rpart.plot&quot;, &quot;visreg&quot;, # modeling &quot;car&quot;, &quot;rms&quot;, &quot;randomForest&quot;, &quot;ranger&quot;, &quot;party&quot;, &quot;caret&quot;, &quot;vegan&quot;, &quot;ape&quot;, &quot;shape&quot;, # sampling &quot;clhs&quot; ) ## install vector of CRAN packages &quot;safely&quot; ## up = TRUE to download all packages ## up = FALSE to download only packages you don&#39;t already have installed ipkCRAN(packages, up = TRUE) The ipkCRAN function will let you know if any of the above packages fail to install. Any time you run code, always check the console output for warnings and errors before continuing. If a lot of output is produced by a command you should scroll up and sift through. It may be best early on to send commands individually to learn about and inspect their output. 0.1.5 Common Errors 0.1.5.1 No output is produced after pasting into console If you do not have a new command prompt (&gt;) and a blinking cursor on the left hand side of your console, but instead see a + after you run a command, R may think you are still in the middle of submitting input to the read-eval-print-loop (REPL). If this is not expected you are possibly missing closing quotes, braces, brackets or parentheses. R needs to know you were done with your expression, so you may need to supply some input to get the command to be complete. You can use the shortcut Ctrl+C to get out of a partially-complete command. Pasting code line-by-line is useful but prone to input errors with multi-line expressions. Alternately, you can run commands or an entire file using the GUI or keyboard shortcuts such as Ctrl+Enter. You have a chance to try this in the example at the end. 0.1.5.2 SOMEPACKAGE is not available (for R version X.Y.Z) This means either: A package named SOMEPACKAGE exists but it is not available for your version of R CRAN does not have a package with that name You can try again, but first check for spelling and case-sensitivity. When in doubt search the package name on Google or CRAN to make sure you have it right. Note that not all R packages are available on CRAN: there are many other ways that you can deliver packages (including GitHub described below). 0.1.6 Packages not on CRAN To install the latest version of packages from the Algorithms for Quantitative Pedology (AQP) suite off GitHub we use the remotes package. The AQP packages are updated much more frequently on GitHub than they are on CRAN. Generally, the CRAN versions (installed above) are the stable releases whereas the GitHub repositories have new features and bug fixes. remotes::install_github(&quot;ncss-tech/aqp&quot;, dependencies=FALSE, upgrade=FALSE, build=FALSE) remotes::install_github(&quot;ncss-tech/soilDB&quot;, dependencies=FALSE, upgrade=FALSE, build=FALSE) remotes::install_github(&quot;ncss-tech/soilReports&quot;, dependencies=FALSE, upgrade=FALSE, build=FALSE) remotes::install_github(&quot;ncss-tech/sharpshootR&quot;, dependencies=FALSE, upgrade=FALSE, build=FALSE) 0.2 Connect to Local NASIS Establish an ODBC connection to NASIS by following the directions at the following hyperlink (ODBC Connection to NASIS). Once youve successfully established a ODBC connection, prove it by loading your NASIS selected set with the site and pedon tables for any pedons from your local area. You only need a few pedons at a minimum for this demo  too many (say, &gt;20) will make the example profile plot cluttered. Paste the below code at the command prompt (&gt;) and press enter, as you did above. Or create a new R script (Main menu: File  New File  R Script) and paste code into the Source pane (script editor window). Then, click the Run button in the top-right corner of the Script Editor or use Ctrl+Enter to run code at the cursor location / any selected code. This will execute the code in the Console. Submit the resulting plot to your mentor (from Plot pane (bottom-right): Export  Save as PDF) # load packages into the current session library(aqp) # provides &quot;SoilProfileCollection&quot; object &amp; more library(soilDB) # provides database access methods # get pedons from NASIS selected set test &lt;- fetchNASIS(from = &#39;pedons&#39;) # inspect the result str(test, max.level = 2) # make a profile plot # set margins smaller than default par(mar=c(1,1,1,1)) # make profile plot of selected set, with userpedonid as label plot(test, label=&#39;pedon_id&#39;) 0.2.1 Demonstrate a Working Connection Follow the one line example below, copy the output, and submit the results to your mentor. This will help us to verify that all of the required packages have been installed. # dump list of packages that are loaded into the current session sessionInfo() 0.3 Additional Support/Optional Readings Spatial Data Analysis and Modeling with R (highly recommended) R-Intro R for Beginners The R Inferno AQP Website and Tutorials Stats for Soil Survey Webinar Soil Data Aggregation using R Webinar "],["intro.html", "Chapter 1 Introduction 1.1 Outline", " Chapter 1 Introduction Finish this. 1.1 Outline "],["uncertainty.html", "Chapter 2 Uncertainty 2.1 Introduction 2.2 Theory of Uncertainty 2.3 Resampling to Estimate Uncertainty 2.4 Performance Metrics 2.5 Validation 2.6 Apparent Validation 2.7 Inherent Validation 2.8 Additional reading 2.9 References (Uncertainty)", " Chapter 2 Uncertainty 2.1 Introduction Validating and assessing the uncertainty of a model is just as, if not more important, than generating the model itself. Validation quantifies the models ability to explain variance in the data while uncertainty quantifies the confidence of model prediction. Uncertainty and validation assessments enable the end user to better understand model error, the nature and distribution of the input data, and the overall accuracy and spatial applicability of the model. Within a soil model, there are several sources of error: Measurement errors Interpretation errors Digitization errors Classification errors Generalization errors Interpolation errors Errors are simply the difference between reality and our representation of reality. Assessing the data structure with simple statistical measures such as mean, median and mode can be useful for understanding the central tendency of the data, but more complicated calculations are needed to get at dispersion or the variation of a property within a population to further assess error and uncertainty (Zar, 1999). Measure of Dispersion Range: The difference between the highest and lowest values measured or observed. Not always reliable because it can include outliers, error, or misclassified data. Quantiles: These refer to 25% increments in the rank of observations. Typically, the 25th and 75th quantiles are used to represent the spread of the most typical values around the central tendency. Measure of Variation * Variance: The deviation of from the mean is calculated as sum of squares (SS) to use absolute deviation (eliminate any distinction between negative and positive correlation). \\(variance (sample) = \\frac{SS}{n-1}\\) \\(SS = \\sum{(X - x)^2}\\) Standard deviation: Used to return variance to the original units \\(sd = \\sqrt{\\frac{SS}{n-1}}\\) Coefficient of variation: Scale standard deviation with mean so that multiple properties can be compared \\(CV = \\frac{SD}{x}\\) Measures of Certainty Standard Error: represents the variance of the mean that would be found with repeated sampling. Estimated by dividing standard deviation by the square root of n. The concept of standard error is important for hypothesis testing. Confidence interval: Interval in which you are confident that a given percentage (known as the confidence limit 95, 80, 75%) of the population lie. If a normal distribution is assumed, for a 95% confidence interval, it can be estimated that the value is 95% likely to fall between as SD * 1.96 +/- mean. 2.1.1 Exercise - Dispersion Create an example data-set and evaluate dispersion. library(ggplot2) # set random seed, so that we all get the same results set.seed(123) # create a sample dataset with 10 values between 20 - 60 d1 &lt;- data.frame( soil = &quot;alpha&quot;, depth = sample(20:60, size = 10, replace = TRUE) ) # create a sample dataset with 100 values between 20 - 60 d2 &lt;- data.frame( soil = &quot;beta&quot;, depth = sample(20:60, size = 100, replace = TRUE) ) # combine d1 and d2 d3 &lt;- rbind(d1, d2) aggregate(depth ~ soil, data = d3, quantile) # examine box plots ggplot(d3, aes(x = soil, y = depth)) + geom_boxplot() Dispersion or variance is a characteristic of the population being evaluated. While more or better sample collection might give you better precision of those estimates, we would not expect them to change the dispersion calculated. Conversely, measures of certainty of the central tendency (how sure are you of the typical value reported) depends both on the characteristic dispersion/variance and the number of samples collected. 2.1.2 Exercise - Variation and Certainty Create an example data-set and and evaluate variation and certainty. # calculate the mean of depth m &lt;- mean(d2$depth) # subtract mean from each value and square (i.e. residuals) d2$S &lt;- (d2$depth - m)^2 #calculate overall sum of squares SS &lt;- sum(d2$S) #calculate sample variance (length gives us the total number of sample/observations) SS / (length(d2$depth) - 1) Note the differences in range and variance calculated for Depth in both examples (10 samples vs. 100) aggregate(depth ~ soil, data = d3, var) Now Compare Standard Error (standard deviation / square root of n) SE &lt;- function(x) sd(x) / sqrt(length(x)) aggregate(depth ~ soil, data = d3, SE) Why are the standard errors different? 2.2 Theory of Uncertainty At its most basic level, uncertainty is simply a lack of certainty. In soil survey, uncertainty encompasses both of these aspects: youve gathered multiple observations and you need to describe them in relation to one another, and you must predict a property or characteristic at unobserved locations. It is difficult to quantify the knowledge we have about data and information uncertainty. While we may have good data of the accuracy of our GPS, how likely are we to include that in our estimates of model error? How important is it? In other disciplines, they spend a lot of time quantifying and tracking measurement error. In soil science, we tend to treat measurement as having an exact known location and value. Given the unknowns in mapping and predicting soil properties, this is a reasonable treatment of relatively small levels of error. When using secondary information as data (or data that is actually a prior prediction or result of a model, including soil components), considering incorporated error can be crucial. One way to deal with this is through re-sampling an alternate way is to through error propagation theory. The most common way to deal with this in soil survey and digital soil mapping is to assess error through model validation. Explanatory vs. Predictive Modelling While explanatory and predictive modeling can use the same types of models, data and even questions, the errors and uncertainty are important for different reasons Explanatory or Descriptive - data are collected and analyzed in order to test causal hypothesis and observe correlations and relationships between data element. Often used at the beginning phases of soil-landscape exploration. How does the soil relate to each of the soil forming factors? Predictive - applying a model or algorithm to data for the purpose of making a prediction (in new or unknown locations) (Shueli, 2010). 2.3 Resampling to Estimate Uncertainty When calculating many basic statistical parameters, the assumption is that the data is parametric. That implies that the data is continuous (ratio or interval) and normally distributed. This is rarely the case with soil data. Soil properties are often not normally distributed (you cannot have less that 0% organic matter, for instance) and often we are trying to predict soil taxa or other nominal classes. Re-sampling is a general term that defines any procedure to repeatedly draw samples form a given data-set. You are essentially pretending to collect a series of separate samples from your sample set then calculating a statistic on that sample. Re-sampling techniques can be used on known and unknown data distributions for uncertainty estimation and validation (Good, 2001). 2.3.1 Exercise - Resampling # this bootstrap is estimating the uncertainty associated with the variance of d2$depth # an example of getting a confidence interval through bootstrapping (no assumption of a normal distribution) # abbreviate our data to simply the commands d &lt;- d2$depth n &lt;- length(d) # set number of iterations N &lt;- 50 # create a data frame to store the results boot_stats &lt;- data.frame( vars = numeric(N), means = numeric(N) ) # for each instance (i) in the set from 1 to N (50 in this case) for (i in 1:N) { # create a new variable dB from each bootstrap sample of d boot.sample = sample(d, n, replace = TRUE) boot_stats$means[i] = mean(boot.sample) boot_stats$vars[i] = var(boot.sample) } quantile(boot_stats$vars) stripchart(boot_stats$vars) # Traditional Approach ci &lt;- c( # lower 5th l = mean(d) - 1.96 * sd(d) / sqrt(n), # upper 95th u = mean(d) + 1.96 * sd(d) / sqrt(n) ) # Compare Bootstrap to Confidence Interval quantile(boot_stats$means, c(0.05, 0.95)) ci 2.4 Performance Metrics Numerical Coefficient of variation (\\(R^2\\)): % of variance explained Mean Error (ME): average error Root Mean Square Error (RMSE): average residual Categorical (derivatives of confusion matrix) Overall Accuracy: % of observations that were correctly classified, for all classes Precision (i.e. users accuracy, errors of commission (Type II): % of observations that were correctly classified, for an individual class Sensitivity (i.e. producers accuracy, errors of omission (Type I)): % of predictions that were correctly classified, for an individual class Confusion Matrix Observed Predicted No Yes No True Negative (TN) False Negative (FN) Yes False Positive (FP) True Positive (TP) 2.4.1 Exercise - Numeric Metrics ### Numeric error metrics ### Linear model example # Create a Ficticous Data-set d_num &lt;- data.frame( depth = 21:60 + rnorm(40, mean = 0, sd = 10), slope = 60:21 ) num_lm &lt;- lm(depth ~ slope, data = d_num, y = TRUE) # R2 summary(num_lm)$r.squared # or predicted &lt;- num_lm$fitted.values observed &lt;- num_lm$y cor(predicted, observed)^2 # ME mean(predicted - observed) # RMSE sqrt(mean((predicted - observed)^2)) 2.4.2 Exercise - Categorical Metrics # Create a Ficticous Data-set r &lt;- runif(175) idx &lt;- sample(which(r &gt; 0.5), 75) r &lt;- r[-idx] d_cat = data.frame( predicted = r, observed = (r + rnorm(100, sd = 0.2)) &gt; 0.5 ) # Compute Confusion Matrix cm &lt;- table(predicted = d_cat$predicted &gt; 0.5, observed = d_cat$observed) print(cm) # or library(caret) confusionMatrix(cm, positive = &quot;TRUE&quot;) # Examine threshoold ggplot(d_cat, aes(x = predicted, color = observed)) + geom_density(lwd = 1.5) # Trade Precision for Sensitivity by Varying the Threshold cm &lt;- table(predicted = d_cat$predicted &gt; 0.4, observed = d_cat$observed) confusionMatrix(cm, positive = &quot;TRUE&quot;) 2.5 Validation Validation refers to the process and the result of a process where the validity of a model is tested. That is, how well does the model represent reality? There are varying degrees of formality and thoroughness that can be used in validation. While multiple stages of the modeling process can be validated, usually its the output of the model that is investigated and reported. You can group initial validation into three broad groups: Expert evaluation, Theoretical Analysis and Prediction Accuracy. Expert Evaluation: In this case, the model output is inspected by an expert user. The first evaluator will be you (the developer), but ideally an outside expert will be utilized. This is often a step in an iterative process. Evaluate the model output, does it make sense, do you see things that need to be improved? Then make changes to the model to improve the output. Theoretical Analysis: compare the results of the model to what is theoretically possible. In systems modeling, this might include diagnostics statistics including residual analysis, cross-correlation of variables and outputs, sensitivity analysis and model analysis such as Akaike Information Criterion (AIC). This can also include simple comparison of output to known possible values. This is especially important for linear regression where the slope of the model is assumed to be steady no matter the values of the dependent variables. Prediction Accuracy: The correctness of the parameter being predicted by the model (soil taxa, property etc.). Ideally this is done with an independent set of data. In soil science, we typically use the term model validation to refer to a statistical analysis that assesses how well a model will predict at an unknown location. A complete model should have a formal statistical evaluation that can be reported and stored as model and output meta-data. That is the portion of validation we will focus. For this discussion, validation can be thought of as an assessment of prediction error and variance. Three types of validation used in the course Apparent - Performance on sample used to develop model Internal - Performance on population underlying the sample External - Performance on related (similar/adjacent) but independent population 2.6 Apparent Validation In this exploratory and explanatory phase you are looking for relationships that can be used later for predictive purposes. Use Goodness of fit tests on all the data in your sample Correlation (R2, rho, etc.) P-values (test questions about individual or combinations of variables) Analyze Residuals (distribution of model errors) to diagnose modeling problems. One or more of these issues indicate that one or more important variables was omitted from the model or that an incorrect functional form was used (linear when the function should be non-linear) Heteroscedasticity Normality Spatial distribution (auto-correlation) 2.7 Inherent Validation 2.7.1 Split-sample - A single partition of the data into a learning and a calibration set. Achieve an independent validation by partitioning the samples into calibration or training and validation data-sets (70% of the samples available are recommended for calibration) Build model on calibration (training) data-set Test model on validation (test) data-set Report accuracy on the validation data-set This method is relatively simple (conceptually and computationally). Results depend on having an adequate sample size to both develop and test the model. 2.7.2 Cross-validation - Alternate development and validation Leave-One-Out Cross-Validation (LOOCV) One observation is used for testing and all others are used to develop model Repeat n (total number of observations) times Average error over n The mean of the accuracy is the expected accuracy of the model (this assumes that new data is from the same population) (Efron, 1983) k-fold Cross-Validation (k-fold) CV Randomly divide observations into calibration and validation sets. Repeat k times, each time one k group is used for error estimates Average error of k Less computationally intensive than LOOCV, but it is more robust and can be done with smaller sample sizes than a simple split. Several R packages have tools to cross-validate predictions, including: DAAG and boot for lm() and glm() objects, caret, rms, ### Linear model example # Create folds folds &lt;- createFolds(d_num$depth, k = 10) # Cross validate lm_cv &lt;- lapply(folds, function(x) { train = d_num[-x,] test = d_num[x,] model = lm(depth ~ ., data = train, y = TRUE) actual = test$depth predict = predict(model, test) RMSE = sqrt(mean((actual - predict)^2, na.rm = TRUE)) R2 = cor(actual, predict, use = &quot;pairwise&quot;)^2 return(c(RMSE = RMSE, R2 = R2)) } ) # Convert to a data.frame lm_cv &lt;- do.call(rbind, lm_cv) # Summarize results summary(lm_cv) 2.7.3 Subsample (Resampling or sample simulation) In this method, the leave-out method can be random (Bootstrap) or observation selection can use a more sophisticated method to select observations to represent the population including Monte Carlo (Molarino, 2005) and .632+bootstrap of Efron &amp; Tibshirani (1997). The details of those arent important, except to know that they can give you a better idea of the robustness of your model. As with re-sampling for uncertainty estimation, observations are repeatedly sampled Select a number of samples (Randomly or from known distribution). Develop the model Estimate model accuracy on unselected samples Repeat the process (with independent sample) a large number of times, 500 - 5,000. The expected model accuracy is then the mean of the estimates. NOTE: The BEST model should not be assumed to be the one that makes the truest predictions. Beware of over-fitting. When a model is over-fit, it predicts due to very specific quirks in the calibration data set and not due to explanatory relationships that will apply to validation and independent data-sets. One strategy to avoid this situation is to build models with as few variables as possible. Parsimonious models (those that use the least amount of information possible to obtain the same result or convey the same meaning) often have higher predicative validity. The use of metrics such as Akaikes Information Criterion (AIC) can be helpful for balancing error and parameter minimization. 2.7.4 External Validation In this case, an independent data-set is used as the test case. Independent observations predicted with model Errors (ME, RMSE) calculated on predicted vs. actual Some exploratory analysis can be helpful to diagnose and explain model performance. The use of validation will be demonstrated as part of each modeling section. The size of the data-set used, understanding of the variables involved and the nature of the statistical models and algorithms used all influence which validation techniques are most convenient and appropriate. 2.8 Additional reading James, G., D. Witten, T. Hastie, and R. Tibshirani, 2014. An Introduction to Statistical Learning: with Applications in R. Springer, New York. http://www-bcf.usc.edu/~gareth/ISL/ Hastie, T., R. Tibshirani, and J. Friedman 2009. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer, New York. http://statweb.stanford.edu/~tibs/ElemStatLearn/ 2.9 References (Uncertainty) Efron, B., Tibshirani, R.J., 1993. An introduction to the bootstrap. Monographs on Statistics and Applied Probability, vol. 57. Chapman &amp; Hall, London, UK. Good, P.I., 2001. Resampling methods. Birkhäuser. James, G., D. Witten, T. Hastie, and R. Tibshirani, 2014. An Introduction to Statistical Learning: with Applications in R. Springer, New York. http://www-bcf.usc.edu/~gareth/ISL/ Molinaro, A. M. (2005). Prediction error estimation: a comparison of resampling methods. Bioinformatics, 21(15), 3301-3307. doi:10.1093/bioinformatics/bti499 Shmueli, G.. (2010). To Explain or to Predict?. Statistical Science, 25(3), 289:310. Retrieved from http://www.jstor.org/stable/41058949 Zar, J.H., 1999. Biostatistical analysis. Pearson Education India. "],["ordination.html", "Chapter 3 Numerical Taxonomy and Ordination 3.1 Introduction 3.2 Whirlwind Tour 3.3 Excercises 3.4 Practical Applications 3.5 References (Numerical Taxonomy and Ordination)", " Chapter 3 Numerical Taxonomy and Ordination 3.1 Introduction Nearly every aspect of soil survey involves the question: Is X more similar to Y or to Z? The quantification of similarity within a collection of horizons, pedons, components, map units, or even landscapes represents an exciting new way to enhance the precision and accuracy of the day-to-day work of soil scientists. After completing this module, you should be able to quantitatively organize objects based on measured or observed characteristics in a consistent and repeatable manner. Perhaps you will find a solution to the long-standing similar or dissimilar question. 3.1.1 Objectives Learn essential vocabulary used in the field of numerical taxonomy. Review some of the literature. Gain experience with R functions and packages commonly used for clustering and ordination. Learn how to create and interpret a distance matrix and appropriate distance metrics. Learn how to create and interpret a dendrogram. Lean the basics and application of hierarchical clustering methods. Lean the basics and application of partitioning clustering methods. Learn the basics and application of ordination methods. Apply skills to a range of data sources for soils and vegetation. Apply techniques from numerical taxonomy to addressing the similar or dissimilar question. Learn some strategies for coping with missing data. 3.2 Whirlwind Tour Most of the examples featured in this whirlwind tour are based on soil data from McGahan, D.G., Southard, R.J, Claassen, V.P. 2009. Plant-available calcium varies widely in soils on serpentinite landscapes. Soil Sci. Soc. Am. J. 73: 2087-2095. These data are available in the dataset sp4 that is built into aqp package for R. 3.2.1 Similarity, Disimilarty, and Distance There are shelves of books and thousands of academic articles describing the theory and applications of clustering and ordination methods. This body of knowledge is commonly described as the field of numerical taxonomy (Sneath and Sokal 1973). Central to this field is the quantification of similarity among individuals based on a relevant set of characteristics. Individuals are typically described as rows of data with a single characteristic per column, together referred to as a data matrix. For example: name clay sand Mg Ca CEC_7 A 21 46 25.7 9.0 23.0 ABt 27 42 23.7 5.6 21.4 Bt1 32 40 23.2 1.9 23.7 Bt2 55 27 44.3 0.3 43.0 Quantitative measures of similarity are more conveniently expressed as distance, or dissimilarity; in part because of convention and in part because of computational efficiency. In the simplest case, dissimilarity can be computed as the shortest distance between individuals in property-space. Another name for the shortest linear distance between points is the Euclidean distance. Evaluated in two dimensions (between individuals \\(p\\) and \\(q\\)), the Euclidean distance is calculated as follows: \\[D(p,q) = \\sqrt{(p_{1} - q_{1})^{2} + (p_{2} - q_{2})^{2}}\\] where \\(p_{1}\\) is the 1st characteristic (or dimension) of individual \\(p\\). There are many other ways to define distance (e.g. distance metrics), but they will be covered later. Using the sand and clay percentages from the data above, dissimilarity is represented as the length of the line connecting any two individuals in property space. The following is a matrix of all pair-wise distances (the distance matrix): A ABt Bt1 Bt2 A 0.0 7.2 12.5 38.9 ABt 7.2 0.0 5.4 31.8 Bt1 12.5 5.4 0.0 26.4 Bt2 38.9 31.8 26.4 0.0 Note that this is the full form of the distance matrix. In this form, zeros are on the diagonal (i.e. the distance between an individual and itself is zero) and the upper and lower triangles are symmetric. The lower triangle is commonly used by most algorithms to encode pair-wise distances. A ABt Bt1 ABt 7.2 Bt1 12.5 5.4 Bt2 38.9 31.8 26.4 Interpretation of the matrix is simple: Individual A is more like ABt than like Bt1. It is important to note that quantification of dissimilarity (distance) among individuals is always relative: X is more like Y, as compared to Z. 3.2.1.1 Distances You Can See: Perceptual Color Difference Simulated redoximorphic feature colors, constrast classes and CIE \\(\\Delta{E_{00}}\\). Details here. 3.2.2 Standardization of Characteristics Euclidean distance doesnt make much sense if the characteristics do not share a common unit of measure or range of values. Nor is it relevant when some characteristics are categorical and some are continuous. For example, distances are distorted if you compare clay (%) and exchangeable Ca (cmol/kg). In this example, exchangeable Ca contributes less to the distance between individuals than clay content, effectively down-weighting the importance of the exchangeable Ca. Typically, characteristics are given equal weight (Sneath and Sokal 1973); however, weighting is much simpler to apply after standardization. Standardization of the data matrix solves the problem of unequal ranges or units of measure, typically by subtraction of the mean and division by standard deviation (z-score transformation). \\[x_{std} = \\frac{x - mean(x)}{sd(x)}\\] There are several other standardization methods covered later. The new data matrix looks like the following: name clay sand Mg Ca CEC_7 A -0.86 0.88 -0.35 1.23 -0.47 ABt -0.45 0.40 -0.55 0.36 -0.63 Bt1 -0.12 0.15 -0.60 -0.59 -0.40 Bt2 1.43 -1.43 1.49 -1.00 1.49 Using the standardized data matrix, distances computed in the property space of clay and exchangeable calcium are unbiased by the unique central tendency or spread of each character. Rarely can the question of dissimilarity be answered with only two characteristics (dimensions). Euclidean distance, however, can be extended to an arbitrary number of \\(n\\) dimensions. \\[D(p,q) = \\sqrt{ \\sum_{i=1}^{n}{(p_{i} - q_{i})^{2}} }\\] In the equation above, \\(i\\) is one of \\(n\\) total characteristics. Imagining what distance looks like is difficult if there are more than three dimensions. Instead, examine the distance matrix calculated using all five characteristics. Rescaling to the interval {0,1}. You can now begin to describe dissimilarity between individuals using an arbitrary number of (relevant) characteristics. You can make statements like The A horizon is roughly 2x more similar to the ABt horizon than it is to the Bt horizon. Although this is a trivial example, the utility of generalizing these methods to soil survey operations should be obvious. 3.2.2.1 Review and Discuss What are the data matrix and distance matrix? What is standardization, and why is it important? What is the largest impediment to creating a distance matrix from NASIS and KSSL data? Key point: Each characteristic is its own dimension in property-space. Sand, clay, and CEC = 3 dimensions. Sand, clay, CEC, OC, and horizon depth = 5 dimensions. Multiple dimensions are simple to define in code but are hard to visualize. The curse of dimensionality. 3.2.3 Missing Data Missing data are a fact of life. Soil scientists are quite familiar with missing lab data (Why didnt we request optical grain counts?) or missing essential NASIS pedon data elements, such as horizon bottom depth, estimated clay fraction, or pH. Nearly all of the methods described in this document are very sensitive to missing data. In other words, they wont work! Following are a couple of possible solutions: Fix the missing data if at all possible, Estimate the missing data values from know relationships to other properties or a group-wise mean or median, or Remove records containing any missing data. 3.2.4 Visualizing Pair-Wise Distances: The Dendrogram Dendrograms are a convenient approximation of pair-wise distances between individuals (after application of hierarchical grouping criteria; more on this later). Dissimilarity between branches is proportional to the level at which branches merge: branching at higher levels (relative to the root of the tree) suggests greater dissimilarity; branching at lower levels suggests greater similarity. Consider the previous example in which distance between individuals was defined in terms of sand and clay percentages. Interpretation is simple. Euclidean distance in property-space is directly proportional to branching height in the corresponding dendrogram. Visualizing the geometry of pair-wise distances in more than three dimensions is difficult. A dendrogram, however, can conveniently summarize a distance matrix created from an arbitrary number of characteristics (dimensions). It is important to note that some information about pair-wise distances is lost or distorted in the dendrogram. Distortion is least near the terminal leaves of the dendrogram. This phenomena is analogous to the distortion generated by a map projection. It is impossible to flatten a higher-dimensional entity to a lower-dimensional form without causing distortion. 3.2.5 Re-arranging a Dendrogram for Clarity The branches of a dendrogram can be rotated like a mobile, so that the final ordering of the terminal leaves approximates an alternate ranking. For example, branches of the following dendrogram (right-hand side) have been rotated to approximate the expected hydrologic gradient from summit to toeslope. 3.2.5.1 Review and Discuss Do you have any questions about dendrogram interpretation? Dendrograms are used extensively in the rest of this chapter. If you were explaining how to interpret a dendrogram to someone, would you start at the roots or leaves? Why? 3.2.6 Cluster Analysis: Finding Groups in Data Cluster analysis is a massive topic that deals with the seemingly simple task of finding useful groups within a dataset. This topic and the methods used are also referred to as unsupervised classification in the fields of remote sensing and GIS. All of the available algorithms will find groups in a given dataset; however, it is up to the subject expert to determine the following: Suitable characteristics and standardization method, Appropriate clustering algorithm, Criteria to determine the right number of clusters, Limitations of the selected algorithm, Interpretation of the final grouping based on subject knowledge, and The possibility of needing to start over at step 1. 3.2.6.1 Using Color to Communicate Results of Clustering or Ordination Note that the widespread use of color in the following examples is not for aesthetic purposes. Colors are convenient for tri-variate data-spaces because you can visually integrate the information into a self-consistent set of classes. 3.2.6.2 Hierarchical Clustering Hierarchical clustering is useful when a full distance matrix is available and the optimal number of clusters is not yet known. This form of clustering creates a data structure that can encode grouping information from one cluster to as many clusters as there are individuals. The expert must determine the optimal place to cut the tree and generate a fixed set of clusters. The results from a hierarchical clustering operation are nearly always presented as a dendrogram. 3.2.6.2.1 Methods There are two main types of hierarchical clustering. Agglomerative: Start with individuals and iteratively combine into larger and larger groups. Divisive: Start with all individuals and iteratively split into smaller and smaller groups. Both methods are strongly influenced by the choice of standardization method and distance metric. Both methods require a full, pair-wise distance matrix as input. This requirement can limit the use of hierarchical clustering to datasets that can be fit into memory. The agglomerative methods also depend on the choice of linkage criterion. Some of these criteria include: Average: usually generates spherical clusters, default in agnes() and recommended by (Kaufman and Rousseeuw 2005), Single linkage: usually generates elongated clusters, Complete linkage: usually generates small, compact clusters, Wards (minimum variance) method, Weighted average (or Gowers) linkage: spherical clusters of roughly equal size, and Flexible strategy: adjustable linkage based on parameter \\(\\alpha\\). Flexible UPGMA (Belbin, Faith, and Milligan 1992): adjustable linkage based on parameter \\(\\beta\\). See (Kaufman and Rousseeuw 2005), (Arkley 1976), (Legendre and Legendre 1998), and agnes() manual page for a detailed description of these linkage criteria. Selection of linkage criteria can be quantitatively evaluated using the cophenetic correlation; and index of how well a dendrogram preserves the original pair-wise distances. This thread on StackExchange has a nice summary of various linkage criteria. I really like these slides by Brian Tibshirani on the topic of agglomerative method selection. More on this later. 3.2.6.2.1.1 Review and Discuss The simplicity and lack of decisions make the divisive method convenient for most work. The top-down approach is similar to the way in which we describe soil morphology and taxonomy. Linkage criteria should be selected based on the hypothesized shape of clusters or prior subject knowledge. When selecting a method, read/think about it; dont just go fishing. Personal opinion: I usually select divisive hierarchical clustering over the other methods: structures seem to be generally more interpretable. 3.2.6.3 Centroid and Medoid (Partitioning) Clustering Centroid and medoid cluster analyses are commonly referred to as k-means-style analysis. K-means, however, is just one of many possible clustering algorithms that partition property-space into a fixed number of groups. These type of algorithms can be applied to very large datasets because they do not rely on the distance matrix. Instead, they are based on an iterative shuffling of group centroids until some criterion is minimized, for example, the mean variance within groups. 3.2.6.3.1 Methods This section describes three (out of many) of the most important partitioning-type algorithms. K-means: Groups of individuals are partitioned around newly created centroids. Resulting clusters approximately spherical and contain an approximately equal number of individuals. K-medoids: Groups of individuals are partitioned around selected medoids. Fuzzy clustering: Individuals are assigned a fuzzy membership value for each partition of property-space. All of these methods are sensitive to the type of standardization applied to the characteristics. These methods rely on iterative minimization of one or more criteria; therefore, each clustering run may generate slightly different output. Most implementations re-run the algorithm until it stabilizes. 3.2.6.3.1.1 Review and Discuss What is the difference between a medoid and a centroid? Can you think of a way in which both concepts could be applied to the grouping of soils data? medoids are tied to individuals, centroids are hypothetical (calculated) Fuzzy clustering is also referred to as soft clustering, while the other two methods are referred to as hard clustering. Sometimes, using both can be helpful, especially if individuals straddle the line between groups. Each method has its own strength and weakness, for example here is a nice summary of the limitations of k-means. 3.2.7 Ordination: Visualization in a Reduced Space Humans are generally quite good at extracting spatial patterns, almost instantly, from two dimensional fields: faces, written language, etc. Sadly, this ability does not extend beyond two or three dimensions. The term ordination refers to a suite of methods that project coordinates in a high-dimensional space into suitable coordinates in a low-dimensional (reduced) space. Map projections are a simple form of ordination: coordinates from the curved surface of the Earth are projected to a two-dimensional plane. As with any projection, there are assumptions, limitations, and distortions. Carl Sagan gives a beautiful demonstration of this concept using shadows, in this excerpt from Cosmos. Here is another excellent demonstration based on handwriting recognition. Hole and Hironaka (1960) were some of the first pedologists to apply ordination methods to soils data. The main figure from their classic paper was hand-drawn, based on a physical model (constructed from wooden dowels and spheres!) of the ordination. 3.2.7.1 Major Types of Ordination Of the many possible ordination methods, there are two major types to keep in mind: Constrained ordination: coordinates in the reduced space are subject to some kind of constraint (more rigid, simple interpretation). Principal component analysis (PCA) is one of the simplest and most widely used ordination methods. The reduced space (principal components) are defined by linear combinations of characteristics. Unconstrained ordination: coordinates in the reduced space are not subject to any kind of constraint (more flexible, less interpretable). Non-metric multidimensional scaling (nMDS) attempts to generate a reduced space that minimizes distortion in proportional similarity; i.e., similar individuals are near each other in the reduced space, dissimilar individuals are farther apart. The non-metric adjective implies that exact distances are not preserved. See (Legendre and Legendre 1998) for a comprehensive listing of methods, associated theory, and ecological applications. 3.2.7.2 An Example of nMDS Applied to Soil Data The following example is based on a data matrix containing lab measurements of clay fraction, sand fraction, exchangeable Ca, exchangeable Mg, and CEC measured by NH4-Ac at pH 7. name clay sand Mg Ca CEC_7 A -0.41 0.21 0.06 0.44 -0.23 ABt 0.04 -0.07 -0.06 -0.13 -0.38 Bt1 0.41 -0.21 -0.09 -0.74 -0.16       Note that distances between individuals, within clusters, and between clusters is more apparent in the nMDS representation of the distance matrix. Similar information is embedded in the dendrogram but it is not as intuitive. 3.2.7.2.1 Interpreting the Results We can conveniently annotate the results of an ordination with contextual information, such as the approximate trends in clay content or CEC. Note that ordination methods represent a flattening of multi-dimensional data space, and in the case of nMDS, preserve proportional (vs. exact) pair-wise distances. Therefore, it is quite common for surfaces (the contours below) fit to the 2D ordination to have complex patterns. Putting the clustering results into context is important: recall that we are working with individuals that represent genetic horizons that have been clustered according to 5 physical / chemical properties (characteristics). Differences in CEC by NH4-Ac are one of the strongest contributors to the pair-wise distances and overall clustering structure. 3.2.8 Review and Discuss Which visualization of the distance matrix was simpler to interpret: Dendrogram or ordination by nMDS? Do you have any questions about the figures? Do you have any guesses on what the clusters represent? 3.2.9 Pair-Wise Distances Between Soil Profiles This is a complex topic, described in a supplemental set of slides. If you want for more detailed information, see this relevant paper. 3.2.10 Final Discussion Missing data strategy Meaningful characteristics Standardization of characteristics Distance metric Clustering algorithm Number of clusters Application to soil survey and ESD 3.3 Excercises This is the fun part. 3.3.1 Set Up the R Session Install R packages as needed. Open a new R script file to use as you follow along. # load libraries library(aqp) library(soilDB) library(sharpshootR) library(cluster) library(ape) library(RColorBrewer) library(vegan) library(MASS) library(colorspace) library(viridis) 3.3.1.1 Data Sources Most of the examples used in the following exercises come from these sources: Built-in data sets from the aqp and soilDB packages (sp4, gopheridge, and loafercreek). Results from fetchNASIS(): pedon data from the local NASIS selected set. Results from fetchKSSL(): lab characterization data from the SoilWeb snapshot. Results from fetchOSD(): basic morphologic and taxonomic data from the SoilWeb snapshot. Results from SDA_query(): live SSURGO spatial and tabular data from Soil Data Access Data from SSR 2, as CSV, downloaded from class GitHub site In most cases, you can edit the examples and swap-in just about any data that are in a SoilProfileCollection object. For example, pedons from your local NASIS selected set can be loaded with fetchNASIS(). 3.3.1.1.1 Try it! Tinker with some SoilProfileCollection objects. Get some data using one of the methods listed above. If you need help, see the manual pages for examples (?fetchKSSL) or the SoilProfileCollection tutorial. Determine the number of profiles and horizons within the collection. View and extract some site and horizon attributes. Generate some soil profile sketches. 3.3.2 Evaluating Missing Data The aqp package provides two functions for checking the fraction of missing data within a SoilProfileCollection object. The first function (evalMissingData) generates an index that ranges from 0 (all missing) to 1 (all present) for each profile. This index can be used to subset or rank profiles for further investigation. The second function (missingDataGrid) creates a visualization of the fraction of data missing within each horizon. Both functions can optionally filter-out horizons that dont typically have data, for example Cr, Cd, and R horizons. The following examples are based on the gopheridge sample dataset. evalMissingData # example data data(&quot;gopheridge&quot;, package = &quot;soilDB&quot;) # compute data completeness gopheridge$data.complete &lt;- evalMissingData(gopheridge, vars = c(&#39;clay&#39;, &#39;sand&#39;, &#39;phfield&#39;), name = &#39;hzname&#39;, p = &#39;Cr|R|Cd&#39;) # check range in missing data summary(gopheridge$data.complete) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.2143 0.4672 1.0000 1.0000 # rank new.order &lt;- order(gopheridge$data.complete) # plot along data completeness ranking par(mar=c(3,0,1,1)) plot(gopheridge, plot.order=new.order, print.id=FALSE, name=&#39;&#39;) # add axis, note re-ordering of axis labels axis(side=1, at=1:length(gopheridge), labels = round(gopheridge$data.complete[new.order], 2), line=-2, cex.axis=0.65, las=2) title(&#39;Gopheridge pedons sorted according to data completeness (clay, sand, pH)&#39;) missingDataGrid # view missing data as a fraction res &lt;- missingDataGrid(gopheridge, max_depth=100, vars=c(&#39;clay&#39;, &#39;sand&#39;, &#39;phfield&#39;), filter.column=&#39;hzname&#39;, filter.regex = &#39;Cr|R|Cd&#39;, main=&#39;Fraction of missing data (clay, sand, pH)&#39;, cols = viridis(10)) # plot figure print(res$fig) # check results head(res$summary) ## peiid clay sand phfield ## 1 1137354 0 100 100 ## 2 1147151 0 0 100 ## 3 1147190 0 0 100 ## 4 242808 29 29 0 ## 5 252851 29 29 29 ## 6 268791 0 0 0 For now, extract those profiles that have a complete set of field-described clay, sand, or pH values for later use. # be sure to read the manual page for this function gopheridge.complete &lt;- subset(gopheridge, data.complete &gt; 0.99) # another way idx &lt;- which(gopheridge$data.complete &gt; 0.99) gopheridge.complete &lt;- gopheridge[idx, ] # looks good par(mar=c(0,0,3,1)) plot(gopheridge.complete, color=&#39;clay&#39;, id.style=&#39;side&#39;, label=&#39;pedon_id&#39;) 3.3.3 More on the Distance Matrix and How to Make One The following three functions are essential to the creation of a distance matrix: dist(): This function is in base R, is simple and fast, and has a limited number of distance metrics. daisy(): This function is in cluster package, has a better selection of distance metrics, and has simple standardization. Much more convenient than dist(). vegdist(): This function is in vegan package, has many distance metrics, and is primarily designed for species composition data. The following is a short demonstration: # get some example data from the aqp package data(&#39;sp4&#39;, package = &#39;aqp&#39;) # subset select rows and columns sp4 &lt;- sp4[1:4, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] row.names(sp4) &lt;- sp4$name # compare distance functions # Euclidean distance, no standardization round(dist(sp4[, -1], method = &#39;euclidean&#39;)) ## A ABt Bt1 ## ABt 8 ## Bt1 15 7 ## Bt2 48 44 39 # Euclidean distance, standardization round(daisy(sp4[, -1], stand = TRUE, metric = &#39;euclidean&#39;), 2) ## Dissimilarities : ## A ABt Bt1 ## ABt 1.45 ## Bt1 2.73 1.36 ## Bt2 6.45 5.65 4.91 ## ## Metric : euclidean ## Number of objects : 4 # Gower&#39;s generalized distance metric (includes standardization) round(vegdist(sp4[, -1], method = &#39;gower&#39;), 2) ## A ABt Bt1 ## ABt 0.19 ## Bt1 0.32 0.16 ## Bt2 0.96 0.84 0.69 3.3.3.1 Distance Calculations with Categorical Data The following example is excerpted from A Novel Display of Categorical Pedon Data. This example illustrates an application of clustering binary data (presence or absence of a diagnostic feature). Internally, the diagnosticPropertyPlot() function uses the daisy() function to compute pair-wise distances using the general dissimilarity coefficient of Gower (Gower 1971). A concise summary of this distance metric is in (Kaufman and Rousseeuw 2005). # load some example NASIS data data(loafercreek, package=&#39;soilDB&#39;) # cut-down to a subset, first 20 pedons loafercreek &lt;- loafercreek[1:20, ] # get depth class sdc &lt;- getSoilDepthClass(loafercreek) site(loafercreek) &lt;- sdc # diagnostic properties to consider, no need to convert to factors v &lt;- c(&#39;lithic.contact&#39;, &#39;paralithic.contact&#39;, &#39;argillic.horizon&#39;, &#39;cambic.horizon&#39;, &#39;ochric.epipedon&#39;, &#39;mollic.epipedon&#39;, &#39;very.shallow&#39;, &#39;shallow&#39;, &#39;mod.deep&#39;, &#39;deep&#39;, &#39;very.deep&#39;) # do the analysis and save the results to object &#39;x&#39; x &lt;- diagnosticPropertyPlot(loafercreek, v, k=5, grid.label=&#39;bedrckkind&#39;, dend.label = &#39;taxonname&#39;) If you are wondering what is in the object x, the str() function or manual page (?diagnosticPropertyPlot) can help. 3.3.4 Hierachrical Clustering The go-to functions for hierarchical clustering are as follows: hclust(): This function is agglomerative, is in base R, requires a distance matrix, and implements most of the commonly used linkage criteria. agnes(): This function is agglomerative, is in cluster package, can perform standardization and distance calculations, and implements more linkage criteria. diana(): This function is divisive, is in cluster package, can perform standardization and distance calculations. 3.3.4.1 Basic Agglomerative Hierarchical Clustering with hclust The hclust() function and resulting hclust-class objects are simple to use, but limited. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] # distance matrix d &lt;- daisy(sp4[, -1], metric = &#39;euclidean&#39;, stand = TRUE) # hierachical clustering with base function hclust sp4.h &lt;- hclust(d, method = &#39;ward.D&#39;) sp4.h$labels &lt;- sp4$name # plot with basic plotting method... not many options here par(mar=c(2,4,2,2)) plot(sp4.h, font=2, cex=0.85) # ID clusters after cutting tree rect.hclust(sp4.h, 4) 3.3.4.2 Better Plots via ape Package This example uses a different approach to plotting based on functions and classes from the ape package. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] # distance matrix d &lt;- daisy(sp4[, -1], metric = &#39;euclidean&#39;, stand = TRUE) # divising clustering dd &lt;- diana(d) # convert to ape class, via hclust class h &lt;- as.hclust(dd) h$labels &lt;- sp4$name p &lt;- as.phylo(h) # define some nice colors col.set &lt;- brewer.pal(9, &#39;Set1&#39;) # cut tree into 4 groups groups &lt;- cutree(h, 4) # make color vector based on groups cols &lt;- col.set[groups] The plot methods for phylo class objects are quite flexible. Be sure to see the manual page ?plot.phylo. par(mar=c(1,1,1,1), mfcol=c(2,2)) plot(p, label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.85, main=&#39;dendrogram&#39;) tiplabels(pch=15, col=cols) plot(p, type=&#39;radial&#39;, font=1, cex=0.85, main=&#39;radial&#39;) tiplabels(pch=15, col=cols) plot(p, type=&#39;fan&#39;, font=1, cex=0.85, main=&#39;fan&#39;) tiplabels(pch=15, col=cols) plot(p, type=&#39;unrooted&#39;, font=1, cex=0.85, main=&#39;unrooted&#39;) tiplabels(pch=15, col=cols) 3.3.4.3 Evaluation of Dendrogram Representation Re-visiting our sample data from before, develop hierarchical clusterings using several strategies (methods / linkage criteria). # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] # distance matrix d &lt;- daisy(sp4[, -1], metric = &#39;euclidean&#39;, stand = TRUE) # hierarchical clustering based on several strategies # agglomerative h.avg &lt;- agnes(d, method=&#39;average&#39;) h.single &lt;- agnes(d, method=&#39;single&#39;) h.complete &lt;- agnes(d, method=&#39;complete&#39;) h.ward &lt;- agnes(d, method=&#39;ward&#39;) h.flexible &lt;- agnes(d, method=&#39;gaverage&#39;, par.method = 0.01) # divisive h.div &lt;- diana(d) The correlation between original distance matrix and cophenetic distance matrix is a reasonable index of how faithfully a dendrogram preserves the original pair-wise distances. # agglomerative hierarchical clustering with various linkage criteria corr.avg &lt;- cor(d, cophenetic(h.avg)) corr.single &lt;- cor(d, cophenetic(h.single)) corr.complete &lt;- cor(d, cophenetic(h.complete)) corr.ward &lt;- cor(d, cophenetic(h.ward)) corr.flexible &lt;- cor(d, cophenetic(h.flexible)) # divisive hierarchical clustering corr.div &lt;- cor(d, cophenetic(h.div)) Combine the results into a table for quick comparison. Note that the agnes and diana functions provide an agglomerative / divisive coefficient that can be used to evaluate clustering efficiency (e.g. cluster size and compactness). Depending on the application, one metric may be more informative than the other. res &lt;- data.frame( method=c(&#39;average&#39;, &#39;single&#39;, &#39;complete&#39;, &#39;ward&#39;, &#39;flexible UPGMA&#39;, &#39;divisive&#39;), cophenetic.correlation=c(corr.avg, corr.single, corr.complete, corr.ward, corr.flexible, corr.div), agg_div.coefficient=c(h.avg$ac, h.single$ac, h.complete$ac, h.ward$ac, h.flexible$ac, h.div$dc) ) # re-order res &lt;- res[order(res$cophenetic.correlation, decreasing = TRUE), ] method cophenetic.correlation agg_div.coefficient average 0.840 0.787 flexible UPGMA 0.840 0.778 single 0.784 0.613 complete 0.759 0.879 ward 0.756 0.894 divisive 0.703 0.874 Investigate differences graphically: Ive ranked according to the frequency withwhich I use the various methods. par(mar=c(0,0.25,1.5,0.25), mfrow=c(2,3)) plot(as.phylo(as.hclust(h.div)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.65, main=&#39;1. Divisive&#39;) tiplabels(pch=15, col=col.set[cutree(h.div, 4)]) plot(as.phylo(as.hclust(h.ward)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.65, main=&#39;2. Ward&#39;) tiplabels(pch=15, col=col.set[cutree(h.ward, 4)]) plot(as.phylo(as.hclust(h.flexible)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.65, main=&#39;3. Flexible (0.01)&#39;) tiplabels(pch=15, col=col.set[cutree(h.flexible, 4)]) plot(as.phylo(as.hclust(h.avg)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.65, main=&#39;4. Average&#39;) tiplabels(pch=15, col=col.set[cutree(h.avg, 4)]) plot(as.phylo(as.hclust(h.single)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.65, main=&#39;(never) Single&#39;) tiplabels(pch=15, col=col.set[cutree(h.single, 4)]) plot(as.phylo(as.hclust(h.complete)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.65, main=&#39;(never) Complete&#39;) tiplabels(pch=15, col=col.set[cutree(h.complete, 4)]) 3.3.4.3.1 More on the Flexible UPGMA method Test the flexible UPGMA method (Belbin, Faith, and Milligan 1992) by iterating over possible values for \\(\\beta\\). Looks like a value near 0.01 would be ideal (e.g. highest cophenetic correlation). Interestingly, this is very close to the cophenetic correlation associated with the average linkage criteria. # init a sequence spanning -1 to 1 beta &lt;- seq(from=-1, to=1, length.out = 100) # init an empty vector to store results r &lt;- vector(mode=&#39;numeric&#39;, length = length(beta)) # iterate over values of beta and compute cophenetic correlation for(i in 1:length(r)) { r[i] &lt;- cor(d, cophenetic(agnes(d, method=&#39;gaverage&#39;, par.method = beta[i]))) } # plot par(mar=c(5,5,1,1)) plot(beta, r, type=&#39;l&#39;, xlab=&#39;beta parameter&#39;, ylab=&#39;cophenetic correlation&#39;, pch=16, las=1) # locate the max coph. corr. idx &lt;- which.max(r) # mark this point and label points(beta[idx], r[idx], col=&#39;red&#39;, cex=2, lwd=2) text(beta[idx], r[idx], labels = round(beta[idx], 3), pos=4) 3.3.4.4 Comparison of Dendrograms The following example is rather basic. Many more possibilities are available in the dendextend package. # load sample dataset from aqp package data(sp3) # promote to SoilProfileCollection depths(sp3) &lt;- id ~ top + bottom # compute dissimilarity using different sets of variables # note that these are rescaled to the interval [0,1] d.1 &lt;- profile_compare(sp3, vars=c(&#39;clay&#39;, &#39;L&#39;), k=0, max_d=100, rescale.result=TRUE) # cluster via divisive hierarchical algorithm # convert to &#39;phylo&#39; class p.1 &lt;- as.phylo(as.hclust(diana(d.1))) # graphically compare diana() to agnes() using d.2 dueling.dendrograms(as.phylo(as.hclust(diana(d.1))), as.phylo(as.hclust(agnes(d.1, method=&#39;average&#39;))), lab.1=&#39;divisive&#39;, lab.2=&#39;agglomerative: average linkage&#39;) 3.3.5 Centroid and Medoid (Partitioning) Clustering The following creates simulated data for demonstration purposes, representing two populations: mean = 0, sd = 0.3 mean = 1, sd = 0.3 # nice colors for later col.set &lt;- brewer.pal(9, &#39;Set1&#39;) # 2D example x &lt;- rbind( matrix(rnorm(100, mean = 0, sd = 0.3), ncol = 2), matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2) ) colnames(x) &lt;- c(&quot;x&quot;, &quot;y&quot;) 3.3.5.1 Hard Classes 3.3.5.1.1 K-Means It is important to note that the k-means algorithm is sensitive to the initial selection of centroid locations (typically random). The default behavior of the kmeans() function does not attempt to correct for this limitation. Note that cluster assignment and centroid vary across runs (panels in the figure below). par(mfrow=c(3,3), mar=c(1,1,1,1)) for(i in 1:9) { cl &lt;- kmeans(x, centers=3) plot(x, col = col.set[cl$cluster], axes=FALSE) grid() points(cl$centers, col = col.set, pch = 8, cex = 2, lwd=2) box() } Setting the nstart argument (number of random starts) to a value great than 1 (10 is ideal) will ensure that the final clustering configuration will remain stable between runs. Note that the cluster ID (color) will vary between runs, however, with nstart=10 the overal configuration remains the same. par(mfrow=c(3,3), mar=c(1,1,1,1)) for(i in 1:9) { cl &lt;- kmeans(x, centers=3, nstart = 10, iter.max = 100) plot(x, col = col.set[cl$cluster], axes=FALSE) grid() points(cl$centers, col = col.set, pch = 8, cex = 2, lwd=2) box() } 3.3.5.1.2 K-Medoids The cluster package provides two interfaces to the k-medoids algorithm: pam(): small to medium sized data sets clara(): optmized for larger data sets A quick example of using pam() to identify an increasing number of clusters. par(mfrow=c(2,3), mar=c(1,1,1,1)) for(i in 2:7) { cl &lt;- pam(x, k = i, stand = TRUE) plot(x, col = col.set[cl$clustering], axes=FALSE) grid() points(cl$medoids, col = col.set, pch = 0, cex = 2, lwd=2) box() } 3.3.5.2 Fuzzy Clusters Clustering results are in the form of class membership; values ranging between 0 and 1. This means that group membership is a continuum vs. the hard classes assigned by k-means or k-medoids. The mixture of class membership in the example below is conveniently expressed using proportions of red, green, and blue. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4.std &lt;- data.frame(sp4[, c(&#39;id&#39;, &#39;name&#39;, &#39;top&#39;, &#39;bottom&#39;)], scale( sp4[, c(&#39;Mg&#39;, &#39;Ca&#39;)])) # perform fuzzy clustering cl &lt;- fanny(sp4.std[, c(&#39;Mg&#39;, &#39;Ca&#39;)], k = 3, stand = FALSE) # get membership matrix m &lt;- cl$membership # convert to colors by interpreting membership as R,G,B proportions cols &lt;- rgb(m) # setup plot par(mar=c(4,4,0,0)) plot(sp4.std$Mg, sp4.std$Ca, asp=1, ylab=&#39;Exchangeable Mg (cmol/kg), Standardized&#39;, xlab=&#39;Exchangeable Ca (cmol/kg), Standardized&#39;, type=&#39;n&#39;) abline(h=0, v=0, col=&#39;black&#39;) grid() # add original obs points(sp4.std$Mg, sp4.std$Ca, bg=cols, col=&#39;black&#39;, cex=1.5, pch=21) Save the RGB color representation of cluster membership to the source data.frame and convert to SoilProfileCollection. sp4.std$colors &lt;- cols depths(sp4.std) &lt;- id ~ top + bottom par(mar=c(0,0,0,0)) plot(sp4.std, color=&#39;colors&#39;, cex.names=0.75) title(&#39;Fuzzy Clustering Results in Context&#39;, line=-1) From the source: Of the 11 parent materials, 9 were serpentinites. The parent materials in Napa and Tehama Counties were quite different from each other and from those of the nine other sites. Neither had parent rock that contained serpentine minerals. They were, therefore, not serpentinites. The Napa County parent material contained dominantly vermiculite and albite and had minor amounts of Ca-bearing clino-pyroxene. The Tehama County parent material was dominated by grossularite, which is a calcsilicate ugrandite garnet, and had subdominant amounts of the Ca-bearing sorosilicate, pumpellyite, and Ca-bearing clinopyroxene. The rocks from the Shasta and Kings County sites were serpentinite, dominated by serpentine minerals. They had minor amounts of Ca-bearing accessory minerals (calcic clinoamphibole [tremolite] and calcsilicate ugrandite garnet [andradite]). The seven other parent materials were serpentinites and exhibited, at most, trace amounts of Ca-bearing minerals. 3.3.5.3 How Many Clusters? There is no simple answer to the question How many clusters are in my data? Some metrics, however, can be used to help estimate a reasonable number of clusters. The mean silhouette width is a useful index of cluster compactness relative to neighbor clusters (Rousseeuw 1987). Larger silhouette widths suggest tighter grouping. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4.std &lt;- data.frame(sp4[, c(&#39;id&#39;, &#39;name&#39;, &#39;top&#39;, &#39;bottom&#39;)], scale( sp4[, c(&#39;Mg&#39;, &#39;Ca&#39;)])) # perform hard clustering sil.widths &lt;- vector(mode=&#39;numeric&#39;) for(i in 2:10) { cl &lt;- pam(sp4.std[, c(&#39;Mg&#39;, &#39;Ca&#39;)], k = i, stand = FALSE) sil.widths[i] &lt;- cl$silinfo$avg.width } par(mar=c(4,4,3,1)) plot(sil.widths, type=&#39;b&#39;, xlab=&#39;Number of Clusters&#39;, ylab=&#39;Average Silhouette Width&#39;, las=1, lwd=2, col=&#39;RoyalBlue&#39;, cex=1.25, main=&#39;Finding the &quot;Right&quot; Number of Clusters&#39;) grid() According to this metric, it looks like 3 clusters is reasonable. Again, this is a judgement callmost decisions related to clustering algorithm selection and the optimal number of clusters are somewhat subjective. # perform fuzzy clustering cl &lt;- pam(sp4.std[, c(&#39;Mg&#39;, &#39;Ca&#39;)], k = 3, stand = FALSE) # setup plot par(mar=c(4,4,0,0)) plot(sp4.std$Mg, sp4.std$Ca, asp=1, ylab=&#39;Exchangeable Mg (cmol/kg), Standardized&#39;, xlab=&#39;Exchangeable Ca (cmol/kg), Standardized&#39;, type=&#39;n&#39;) abline(h=0, v=0, col=&#39;black&#39;) grid() # add original obs points(sp4.std$Mg, sp4.std$Ca, bg=cl$clustering, col=&#39;black&#39;, cex=1.25, pch=21) TODO: other cluster metrics packages 3.3.5.4 Ordination 3.3.5.4.1 Principal Component Analysis A simple, constrained ordination based on variance. This method does not use the distance matrix, rather it seeks to find a new set of axes that describe maximum variance via linear combinations of characteristics. Standardization is essential. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] sp4.scaled &lt;- data.frame(name=sp4[, 1], round(scale( sp4[, -1]), 2)) # PCA # note that we are leaving out the first column: the horizon names # note the syntax used to extract the principal components # note that PCA doesn&#39;t use the distance matrix pca &lt;- predict(princomp(sp4.scaled[, -1])) ## perform clustering to highlight structure in the PCA # distance matrix d &lt;- dist(sp4.scaled[, -1]) m &lt;- as.matrix(d) dimnames(m) &lt;- list(sp4.scaled$name, sp4.scaled$name) d &lt;- as.dist(m) # dendrogram from divisive clustering dd &lt;- diana(d) h &lt;- as.hclust(dd) p &lt;- as.phylo(h) # define colors based on cutting a divisive hierarchical clustering into 4 groups cols &lt;- brewer.pal(9, &#39;Set1&#39;)[cutree(h, 4)] # plot first 2 PC plot(pca[, 1:2], asp=1, type=&#39;n&#39;, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, main=&quot;Principal Components 1 and 2&quot;) grid() text(pca[, 1:2], sp4.scaled$name, cex=0.75, col=cols, font=2) box() 3.3.5.5 Sammons Non-linear Mapping Simple interface to nMDS, input is a distance matrix. Note that this algorithm will fail if there are 0s or ties within the distance matrix. See ?sammon for details. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] sp4.scaled &lt;- data.frame(name=sp4[, 1], round(scale( sp4[, -1]), 2)) # distance matrix d &lt;- dist(sp4.scaled[, -1]) m &lt;- as.matrix(d) dimnames(m) &lt;- list(sp4.scaled$name, sp4.scaled$name) d &lt;- as.dist(m) # dendrogram from divisive clustering dd &lt;- diana(d) h &lt;- as.hclust(dd) p &lt;- as.phylo(h) # define colors based on cutting a divisive hierarchical clustering into 4 groups cols &lt;- brewer.pal(9, &#39;Set1&#39;)[cutree(h, 4)] # nMDS from distance matrix s &lt;- sammon(d) # plot par(mar=c(3,1,3,1)) plot(s$points, asp=1, type=&#39;n&#39;, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, main=&quot;nMDS by Sammon&#39;s Non-Linear Mapping&quot;) # abline(v=0, h=0, col=&#39;black&#39;) grid() text(s$points, rownames(s$points), cex=0.75, col=cols, font=2) box() 3.3.5.6 nMDS with the vegan Package The following example is quite brief. See the Introduction to ordination in vegan vignette for some excellent worked examples and ecological interpretation. The vegan package FAQ is another excellent resource. Numerical Ecology with R can be used as both reference and learning resource. The metaMDS() function from the vegan package provides a convenience function that automates most of the steps required to create an oridination. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] sp4.scaled &lt;- data.frame(name=sp4[, 1], round(scale( sp4[, -1]), 2)) # define colors based on natural groupings cols &lt;- brewer.pal(9, &#39;Set1&#39;) # distance calc + ordination s &lt;- metaMDS(sp4.scaled[, -1], distance = &#39;gower&#39;, autotransform = FALSE, wascores=FALSE) ## this is used to generate 4 classes from a divisive hierarchical clustering # manually compute distance matrix d &lt;- dist(sp4.scaled[, -1]) m &lt;- as.matrix(d) dimnames(m) &lt;- list(sp4.scaled$name, sp4.scaled$name) d &lt;- as.dist(m) # dendrogram from divisive clustering dd &lt;- diana(d) h &lt;- as.hclust(dd) # define colors based on cutting a divisive hierarchical clustering into 4 groups cols &lt;- brewer.pal(9, &#39;Set1&#39;)[cutree(h, 4)] # plot ordination par(mar=c(3,1,3,1)) fig &lt;- ordiplot(s, type=&#39;none&#39;, cex.axis=0.75, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, main=&#39;nMDS by metaMDS()&#39;) abline(h=0, v=0, lty=2, col=&#39;grey&#39;) text(fig$sites, sp4$name, cex=0.75, font=2, col=cols) # ordicluster(fig, agnes(daisy(sp4.scaled[, -1]), method=&#39;ward&#39;), prune=3, col = &quot;orange&quot;) box() 3.3.5.7 Rotations procrustes, etc. # https://ncss-tech.github.io/AQP/aqp/color-contrast.html 3.4 Practical Applications Before you work through the following examples, you should review the SoilProfileCollection object tutorial. 3.4.1 Pair-Wise Distances Between Soil Profiles # init example data data(sp4) depths(sp4) &lt;- id ~ top + bottom # eval dissimilarity: # using Ex-Ca:Mg and CEC at pH 7 # with no depth-weighting (k=0) # to a maximum depth of 40 cm d &lt;- profile_compare(sp4, vars=c(&#39;ex_Ca_to_Mg&#39;, &#39;CEC_7&#39;), k=0, max_d=40) # check distance matrix: round(d, 1) ## Dissimilarities : ## colusa glenn kings mariposa mendocino napa san benito shasta shasta-trinity ## glenn 13.5 ## kings 16.0 12.7 ## mariposa 8.4 11.3 16.5 ## mendocino 11.5 8.0 16.4 15.0 ## napa 30.4 24.1 29.4 29.2 21.6 ## san benito 25.7 20.6 26.3 28.2 15.8 18.0 ## shasta 17.2 13.3 8.7 17.6 17.1 33.7 22.2 ## shasta-trinity 6.4 16.6 22.3 9.6 16.5 29.8 27.2 23.3 ## tehama 28.7 22.9 27.9 27.3 20.0 8.8 15.1 31.4 27.9 ## ## Metric : mixed ; Types = I, I ## Number of objects : 10 # cluster via divisive method clust &lt;- diana(d) # vizualize dissimilarity matrix via hierarchical clustering par(mar=c(0,0,3,1)) plotProfileDendrogram(sp4, clust, dend.y.scale = max(d), scaling.factor = (1/max(d) * 10), y.offset = 2.25, width=0.25, cex.names=0.6, color=&#39;ex_Ca_to_Mg&#39;, col.label=&#39;Exchageable Ca to Mg Ratio&#39;) 3.4.2 Pair-Wise Distances Between Soil Series The following figures are a preview of some new functionality planned for SoilWeb/SDE. These related tutorials cover similar material in greater detail: Competing Soil Series Querying Soil Series Data The fetchOSD function can return additional summaries tabulated from climate data, MLRA boundaries, SSURGO, and much more with the extended=TRUE argument. Lets experiment with distances computed from annual climate data and hillslope position. # soil series from around CONUS soils &lt;- c(&#39;redding&#39;, &#39;pentz&#39;, &#39;willows&#39;, &#39;yolo&#39;, &#39;hanford&#39;, &#39;cecil&#39;, &#39;sycamore&#39;, &#39;KLAMATH&#39;, &#39;drummer&#39;, &#39;musick&#39;, &#39;zook&#39;) s &lt;- fetchOSD(soils, extended = TRUE) # note additional data, packed into a list str(s, 1) ## List of 14 ## $ SPC :Formal class &#39;SoilProfileCollection&#39; [package &quot;aqp&quot;] with 9 slots ## $ competing :&#39;data.frame&#39;: 57 obs. of 3 variables: ## $ geog_assoc_soils:&#39;data.frame&#39;: 75 obs. of 2 variables: ## $ geomcomp :&#39;data.frame&#39;: 9 obs. of 9 variables: ## $ hillpos :&#39;data.frame&#39;: 10 obs. of 8 variables: ## $ mtnpos :&#39;data.frame&#39;: 2 obs. of 9 variables: ## $ terrace :&#39;data.frame&#39;: 8 obs. of 5 variables: ## $ flats :&#39;data.frame&#39;: 7 obs. of 7 variables: ## $ pmkind :&#39;data.frame&#39;: 19 obs. of 5 variables: ## $ pmorigin :&#39;data.frame&#39;: 44 obs. of 5 variables: ## $ mlra :&#39;data.frame&#39;: 75 obs. of 4 variables: ## $ climate.annual :&#39;data.frame&#39;: 88 obs. of 12 variables: ## $ climate.monthly :&#39;data.frame&#39;: 264 obs. of 14 variables: ## $ soilweb.metadata:&#39;data.frame&#39;: 17 obs. of 2 variables: 3.4.2.1 Annual Climate Data The vizAnnualClimate function (sharpshootR package) arranges percentiles of annual climate summaries according to divisive hierarchical clustering applied to median values. Climate summaries were derived from 800m, daily PRISM data spanning 1981-2010. # control color like this trellis.par.set(plot.line=list(col=&#39;RoyalBlue&#39;)) # control centers symbol and size here res &lt;- vizAnnualClimate(s$climate.annual, IQR.cex = 1.25, cex=1.1, pch=18) # plot figure, this is Lattice graphics print(res$fig) # do something with clustering par(mar=c(0,0,1,1)) # usually requires tinkering... plotProfileDendrogram(s$SPC, clust = res$clust, scaling.factor = 0.05, width = 0.2, y.offset = 1.3) mtext(&#39;sorted by annual climate summaries&#39;, side = 3, at = 0.5, adj = 0, line = -1.5, font=3) 3.4.2.2 Hillslope Position The vizHillslopePosition function (sharpshootR package) arranges hillslope position proportions (SSURGO) according to divisive hierarchical clustering. Proportions are used as characteristics for each soil series. The branches of the dendrogram are rotated so that ordering within the figure approximates the hydrologic gradient as closely as possible. Rotation is performed by the dendextend::rotate function. # result is a lattice graphics object res &lt;- vizHillslopePosition(s$hillpos) print(res$fig) 3.4.3 Pair-Wise Distances Between Subgroup-Level Taxa The following are demonstrations of pair-wise distances computed from categorical data and the use of a dendrogram to organize groups from Soil Taxonomy. Click here for details. # define a vector of series s.list &lt;- c(&#39;amador&#39;, &#39;redding&#39;, &#39;pentz&#39;, &#39;willows&#39;, &#39;pardee&#39;, &#39;yolo&#39;, &#39;hanford&#39;, &#39;cecil&#39;, &#39;sycamore&#39;, &#39;KLAMATH&#39;, &#39;MOGLIA&#39;, &#39;drummer&#39;, &#39;musick&#39;, &#39;zook&#39;, &#39;argonaut&#39;, &#39;PALAU&#39;) # get and SPC object with basic data on these series s &lt;- fetchOSD(s.list) # graphical check par(mar=c(0,0,2,0)) plot(s) ; title(&#39;Selected Pedons from Official Series Descriptions&#39;, line=0) # check structure of some site-level attributes # head(site(s))[, c(&#39;id&#39;, &#39;soilorder&#39;, &#39;suborder&#39;, &#39;greatgroup&#39;, &#39;subgroup&#39;)]) id soilorder suborder greatgroup subgroup AMADOR inceptisols xerepts haploxerepts typic haploxerepts ARGONAUT alfisols xeralfs haploxeralfs mollic haploxeralfs CECIL ultisols udults kanhapludults typic kanhapludults DRUMMER mollisols aquolls endoaquolls typic endoaquolls HANFORD entisols orthents xerorthents typic xerorthents KLAMATH mollisols aquolls cryaquolls cumulic cryaquolls par(mar=c(0,1,1,1)) # plot dendrogram + profiles d &lt;- SoilTaxonomyDendrogram(s, scaling.factor = 0.01, width=0.2, cex.names=0.5) Check the resulting distance matrix. print(d) 3.4.4 Soil Color Signatures See this related tutorial for additional examples. # manually convert Munsell -&gt; sRGB rgb.data &lt;- munsell2rgb(s$hue, s$value, s$chroma, return_triplets = TRUE) s$r &lt;- rgb.data$r s$g &lt;- rgb.data$g s$b &lt;- rgb.data$b # eval color signature pig &lt;- soilColorSignature(s, RescaleLightnessBy = 5, method=&#39;depthSlices&#39;) # display results as table kable_styling(knitr::kable(head(pig), digits = 3, row.names = FALSE)) id A.0.1 A.0.5 A.0.9 B.0.1 B.0.5 B.0.9 L.0.1 L.0.5 L.0.9 AMADOR 3.681 4.870 1.919 13.298 18.956 27.828 8.250 10.324 14.333 ARGONAUT 13.549 19.311 15.876 19.548 30.215 17.613 6.159 6.161 8.250 CECIL 7.378 32.895 28.722 25.999 29.497 35.807 8.254 8.251 8.254 DRUMMER 2.189 1.478 1.478 5.367 6.176 6.176 4.111 8.247 8.247 HANFORD 5.629 5.629 6.611 19.847 19.847 25.480 8.252 8.252 10.327 KLAMATH 2.189 2.189 10.371 5.367 5.367 37.715 4.111 4.111 8.257 # move row names over for distance matrix row.names(pig) &lt;- pig[, 1] d &lt;- daisy(pig[, -1]) dd &lt;- diana(d) # plot par(mar=c(0,0,0.25,1)) plotProfileDendrogram(s, dd, dend.y.scale = max(d) * 2, scaling.factor = 0.3, y.offset = 6, width=0.2, cex.names=0.5) 3.4.5 Clustering of Soil Colors Just for fun, use hierarchical clustering and nMDS on soil color data from the OSDs that were used in the previous example. # extract horizon data from select OSDs in above example h &lt;- horizons(s) # convert Munsell color notation to sRGB # these are moist colors rgb.data &lt;- munsell2rgb(h$hue, h$value, h$chroma, return_triplets = TRUE) lab.data &lt;- munsell2rgb(h$hue, h$value, h$chroma, returnLAB = TRUE) # check head(rgb.data) ## r g b ## 1 0.4360624 0.3706674 0.29697452 ## 2 0.5589675 0.4673350 0.35663875 ## 3 0.5589675 0.4673350 0.35663875 ## 4 0.7719679 0.6774631 0.48997537 ## 5 0.3940324 0.2499977 0.16682669 ## 6 0.4309729 0.2327690 0.09771028 head(lab.data) ## L A B ## 1 41.24855 3.681301 13.29762 ## 2 51.62124 4.870262 18.95563 ## 3 51.62124 4.870262 18.95563 ## 4 71.66388 1.919454 27.82850 ## 5 30.79580 13.548688 19.54789 ## 6 30.80674 19.311423 30.21539 # remove NA rgb.data &lt;- na.omit(rgb.data) lab.data &lt;- na.omit(lab.data) # retain unique colors rgb.data &lt;- unique(rgb.data) lab.data &lt;- unique(lab.data) # visualize colors in LAB coordinates pairs(lab.data, col=&#39;white&#39;, bg=rgb(rgb.data), pch=21, cex=2) # create distance matrix from LAB coordinates d &lt;- daisy(lab.data, stand=FALSE) # divisive heirarcical clustering d.hclust &lt;- as.hclust(diana(d)) # convert to phylo class for nicer plotting p &lt;- as.phylo(d.hclust) # perform nMDS on distance matrix d.sammon &lt;- sammon(d) # setup multi-figure page par(mfcol=c(1,2), mar=c(0,0,2,0), bg=grey(0.95)) # plot fan-style dendrogram plot(p, font=2, cex=0.5, type=&#39;fan&#39;, show.tip.label=FALSE, main=&#39;Dendrogram Representation&#39;) # add colors at dendrogram tips tiplabels(pch=21, cex=4, col=&#39;white&#39;, bg=rgb(rgb.data)) # plot nMDS ordination plot(d.sammon$points, type=&#39;n&#39;, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, asp=1, main=&#39;nMDS Ordination&#39;) abline(h=0, v=0, col=&#39;black&#39;, lty=3) points(d.sammon$points, bg=rgb(rgb.data), pch=21, cex=3.5, col=&#39;white&#39;) 3.4.6 How Do the Interpretations Compare? Example borrowed from this tutorial. library(reshape2) # set list of component names, same as soil color example s.list &lt;- c(&#39;amador&#39;, &#39;redding&#39;, &#39;pentz&#39;, &#39;willows&#39;, &#39;pardee&#39;, &#39;yolo&#39;, &#39;hanford&#39;, &#39;cecil&#39;, &#39;sycamore&#39;, &#39;KLAMATH&#39;, &#39;MOGLIA&#39;, &#39;drummer&#39;, &#39;musick&#39;, &#39;zook&#39;, &#39;argonaut&#39;, &#39;PALAU&#39;) # set list of relevant interpretations interp.list &lt;- c(&#39;ENG - Construction Materials; Topsoil&#39;, &#39;ENG - Sewage Lagoons&#39;, &#39;ENG - Septic Tank Absorption Fields&#39;, &#39;ENG - Unpaved Local Roads and Streets&#39;) # compose query q &lt;- paste0(&quot;SELECT UPPER(compname) as compname, mrulename, AVG(interplr) as interplr_mean FROM component INNER JOIN cointerp ON component.cokey = cointerp.cokey WHERE compname IN &quot;, format_SQL_in_statement(s.list), &quot; AND seqnum = 0 AND mrulename IN &quot;, format_SQL_in_statement(interp.list), &quot; AND interplr IS NOT NULL GROUP BY compname, mrulename;&quot;) # send query x &lt;- SDA_query(q) # reshape long -&gt; wide x.wide &lt;- dcast(x, compname ~ mrulename, value.var = &#39;interplr_mean&#39;) knitr::kable(x.wide, digits = 3, caption=&quot;Mean Fuzzy Ratings for Select Soil Series&quot;) Table 3.1: Mean Fuzzy Ratings for Select Soil Series compname ENG - Construction Materials; Topsoil ENG - Septic Tank Absorption Fields ENG - Sewage Lagoons ENG - Unpaved Local Roads and Streets AMADOR 0.000 1.000 1.000 0.691 ARGONAUT 0.050 1.000 1.000 1.000 CECIL 0.414 0.666 0.854 0.302 DRUMMER 0.000 1.000 1.000 1.000 HANFORD 0.678 0.989 1.000 0.220 KLAMATH 0.000 1.000 1.000 1.000 MOGLIA 0.000 1.000 0.500 1.000 MUSICK 0.245 1.000 0.963 0.832 PALAU 0.011 1.000 0.864 1.000 PARDEE 0.000 1.000 1.000 1.000 PENTZ 0.003 1.000 1.000 0.714 REDDING 0.022 1.000 1.000 0.907 SYCAMORE 0.824 0.998 0.756 0.919 WILLOWS 0.000 1.000 0.947 1.000 YOLO 0.843 0.914 0.608 0.769 ZOOK 0.004 1.000 1.000 1.000 # note: component name and series name have been converted to upper case # sort rows of fuzzy ratings based on profiles from OSDs new.order &lt;- match(x.wide$compname, profile_id(s)) x.wide &lt;- x.wide[new.order, ] # copy ids to row.names so that they are preserved in distance matrix row.names(x.wide) &lt;- x.wide$compname # create distance matrix d &lt;- daisy(x.wide[, -1]) # divisive hierarchical clustering clust &lt;- diana(d) par(mar=c(2,0,2,0)) plotProfileDendrogram(s, clust, dend.y.scale = 1.5, scaling.factor = 0.004, y.offset = 0.1, width=0.25, cex.names=0.45) title(&#39;Component Similarity via Select Fuzzy Ratings&#39;) mtext(&#39;Profile Sketches are from OSDs&#39;, 1) 3.4.7 MLRA Concepts via Climate and Elevation Samples Get and process example data, originally sampled from PRISM raster and DEM within MLRA 15, 18, 22A, and 22B. Variables include: elevation mean annual air temperature mean annuap precipitation fraction of annual precipitation as rain effective precipitation frost-free days growing degree days library(MASS) library(vegan) library(cluster) library(RColorBrewer) # get example data # init a temp file tf &lt;- tempfile() # download compressed CSV to temp file download.file(&#39;https://github.com/ncss-tech/stats_for_soil_survey/raw/master/data/clustering_and_ordination/MLRA-raster-data-example.csv.gz&#39;, destfile = tf, quiet = TRUE) # read-in from compressed CSV to data.frame object d.sub &lt;- read.csv(gzfile(tf), stringsAsFactors = FALSE) # check: note that the column names are quite strange head(d.sub) # set factor levels mu.set &lt;- c(&#39;15&#39;, &#39;18&#39;, &#39;22A&#39;, &#39;22B&#39;) d.sub$.id &lt;- factor(d.sub$.id, levels = mu.set) # define some nice colors cols &lt;- brewer.pal(9, &#39;Set1&#39;) # remove light colors cols &lt;- cols[c(1:5,7,9)] 3.4.7.1 Nonmetric Multidimensional Scaling A smooh surface fit to mean annual air temperature highlights structure within a nMDS ordination. m &lt;- metaMDS(d.sub[, -c(1:3)], distance = &#39;gower&#39;) # margins par(mar=c(1,1,3,1)) # setup plot o &lt;- ordiplot(m, type=&#39;n&#39;, axes=FALSE) # add points, colored accoring to MLRA points(o, &#39;sites&#39;, cex=1, col=cols[as.numeric(d.sub$.id)], pch=16) # overlay smooth surface of variable used in ordination ordisurf(m, d.sub$Mean.Annual.Air.Temperature..degrees.C., add=TRUE, col=&#39;black&#39;, labcex=1) legend(&#39;topleft&#39;, legend=mu.set, pch=16, col=cols, bty=&#39;n&#39;, cex=1.25) title(&#39;nMDS with mean annual air temperature (deg C) surface&#39;) box() 3.4.7.2 Principle Coordinates This example generates an ordination (via principal coordinates) of environmental variables (PRSIM and elevation) associated with MLRAs 15, 18, 22A, and 22B. Ellipses represent 50% probability contours via multivariate homogeneity of group dispersions. See comments in the code for details. Note that this example was extracted from the Region 2 Map Unit Comparison Report. Thoughts on interpretation: The relative position of points and ellipses are meaningful; absolute position will vary each time the figure is generated. Look for diffuse vs. concentrated clusters: these suggest relatively broadly vs. narrowly defined concepts. Nesting of clusters (e.g. smaller cluster contained by larger cluster) suggests super-set/subset relationships. Overlap is proportional to similarity. ## NOTE: data with very low variability will cause warnings # eval numerical distance, removing first 3 columns of IDs d.dist &lt;- daisy(d.sub[, -c(1:3)], stand=TRUE) ## map distance matrix to 2D space via principal coordinates d.betadisper &lt;- betadisper(d.dist, group=d.sub$.id, bias.adjust = TRUE, sqrt.dist = FALSE, type=&#39;median&#39;) ## fancy plot plot( d.betadisper, hull=FALSE, ellipse=TRUE, conf=0.5, col=cols, main=&#39;Ordination of Raster Samples\\n50% Probability Ellipse&#39;, sub=&#39;MLRA 15, 18, 22A, 22B&#39; ) Pair-wise comparisons at the 90% level of confidence. ## pair-wise comparisons of variance par(mar=c(4.5, 5.5, 4.5, 1)) plot(TukeyHSD(d.betadisper, conf.level = 0.9), las=1) 3.5 References (Numerical Taxonomy and Ordination) This document is based on aqp version 1.30 and soilDB version 2.6.1 and sharpshootR version 1.8.2. References "],["linear-regression.html", "Chapter 4 Linear Regression 4.1 Introduction 4.2 Linear Regression Example 4.3 Data 4.4 Spatial data 4.5 Exploratory Data Analysis (EDA) 4.6 Linear modeling 4.7 Generate spatial predictions 4.8 Create Map 4.9 Literature 4.10 Additional reading", " Chapter 4 Linear Regression Statistics for pedologists course banner image 4.1 Introduction Linear regression models the linear relationship between a response variable (y) and an predictor variable (x). \\(y = a + Bx + e\\) Where: \\(y\\) = the dependent variable \\(a\\) = the intercept of the fitted line \\(B\\) = the Regression coefficient, i.e. slope of the fitted line. Strong relationships will have high values. \\(x\\) = the independent variable (aka explanatory or predictor variable(s) ) \\(e\\) = the error term Linear regression has been used for soil survey applications since the early 1900s when Briggs and McLane (1907) developed a pedotransfer function to estimate the wilting coefficient as a function of soil particle size. Wilting coefficient = 0.01(sand) + 0.12(silt) + 0.57(clay) When more than one independent variable is used in the regression, it is referred to as multiple linear regression. In regression models, the response (or dependent) variable must always be continuous. The predictor (or independent) variable(s) can be continuous or categorical. In order to use linear regression or any linear model, the errors (i.e. residuals) must be normally distributed. Most environmental data are skewed and require transformations to the response variable (such as square root or log) for use in linear models. Normality can be assessed using a QQ plot or histogram of the residuals. 4.2 Linear Regression Example Now that weve got some of the basic theory out of the way well move on to a real example, and address any additional theory where it relates to specific steps in the modeling process. The example selected for this chapter comes from the Mojave desert. The landscape is composed primarily of closed basins ringed by granitic hills and mountains (Peterson, 1981). The problem tackled here is modeling mean annual air temperature as a function of PRISM, digital elevation model (DEM) and Landsat derivatives. This climate study began in 1998 as part of a national study run by the National Lab and led by Henry Mount (Mount and Paetzold, 2002). The objective was to determine if the hyperthermic line was consistent across the southern US, which at the time was thought to be ~3000 in elevation. Up until 2015 their were 77 active MAST sites, and 12 SCAN sites throughout MLRA 30 and 31. For more details see the MLRA 30 - Soil Climate Study - Soil Temperature project in NASIS, on GitHub, or by Roecker et al., 2012. library(soilDB) prj &lt;- get_project_from_NASISWebReport(mlrassoarea = &quot;8-VIC&quot;, fiscalyear = 2015) subset(prj, projectname == &quot;MLRA 30 - Soil Climate Study - Soil Temperature&quot;) In addition to the 11-IND MAST modeling efforts there has also been two published studies on the Mojave. The first was by Schmidlin et al. (1983) who examined both the Great Basin and Mojave Deserts in Nevada. The second was by Bai et al. (2010) who examined the Mojave Desert in California. Both studies developed regression models using elevation, but Schmidlin et al. (1983) also incorporated latitude. The results from Bai et al. (2010) displayed considerably larger areas of hyperthermic soils than Schmidlin et al. (1983). This made be due to the unconventional method used by Bai et al. (2010) to measure MAST. 4.3 Data 4.3.1 Tidy Raw Files Typically the data for MAST and other monitoring projets is downloaded annually. However, some sites now are online and can be accessed remotely. Eitherway prior to loading the information into a proper database it is best to store the data in txt files (Excel files are discouraged). If the data is organized and the filenames encode the metadata, an example such as the one below can be used to efficiently import them into R and combine them into a data frame. p &lt;- &quot;D:/projects/soilTemperatureMonitoring/data/rawTxtFilesClean&quot; setwd(p) # get file names of HOBO temp data files &lt;- list.files() # read files l &lt;- lapply(files, function(x) { # extract the file name fileName = strsplit(x, &#39;[.]&#39;)[[1]][1] # parse the siteid from the file name siteid = strsplit(x, &#39;_&#39;)[[1]][1] cat(paste(&quot;working on&quot;, fileName, &quot;\\n&quot;)) f = paste0(p, &quot;/&quot;, x) # read the files f = read.table(file = f, header = TRUE, sep = &quot;\\t&quot;, stringsAsFactors = FALSE) f$siteid &lt;- siteid names(f)[1:3] &lt;- c(&quot;date&quot;,&quot;tempF&quot;,&quot;tempC&quot;) f$tempF &lt;-as.numeric(f$tempF) f$tempC &lt;-as.numeric(f$tempC) vars = c(&quot;date&quot;, &quot;siteid&quot;, &quot;tempF&quot;, &quot;tempC&quot;) f = f[vars] }) mastSeries_df &lt;- do.call(&quot;rbind&quot;, l) # save cached copy save(mastSeries_df, file = &quot;D:/projects/soilTemperatureMonitoring/data/R/mastSeries.Rdata&quot;) length(unique(mastSeries_df$siteid)) 4.3.2 Henry Mount Database The Henry Mount Database already has 59 of the sites from the Mojave. The full dataset however has 68 sites. library(soilDB) f &lt;- fetchHenry(sso = &quot;8-VIC&quot;) length(unique(f$sensors$user_site_id)) 4.3.3 Aggregate Time Series # load cached versions load(file = &quot;D:/projects/soilTemperatureMonitoring/data/R/mastSeries.Rdata&quot;) # Plot sites visually inspect for flat lines and spikes test &lt;- subset(mastSeries_df, site == &quot;JTNP08&quot;) test.zoo &lt;- read.zoo(test[,c(1,3)],format = &quot;%m/%d/%y %H:%M:%S&quot;, tz = &quot;GMT&quot;) plot(test.zoo, ylab = &quot;tempF&quot;) # Aggregate by Year, Month, and Julian day (i.e. 1-365, 366 for leap years) ms.df &lt;- mastSeries_df ms.df$date &lt;- as.POSIXlt(ms.df$date, format=&quot;%m/%d/%y %H:%M:%S&quot;) ms.df$day &lt;- as.character(format(ms.df$date, &quot;%m/%d/%y&quot;)) ms.df$Jday &lt;- as.integer(format(ms.df$date, &quot;%j&quot;)) # compute number of days per site ms.D.df &lt;- aggregate(tempF ~ site + day, data = ms.df, FUN = mean, na.action = na.exclude) ms.D.df &lt;- aggregate(day ~ site, data = ms.D.df, function(x) sum(!is.na(x))) names(ms.D.df) &lt;- c(&quot;siteid&quot;,&quot;numDays&quot;) # compute mast per year ms.Jd.df &lt;- aggregate(tempF ~ siteid + Jday, data = ms.df, mean) mastSites.df &lt;- aggregate(tempF ~ siteid, data = ms.Jd.df, mean) # merge mast &amp; numDays mastSites.df &lt;- merge(mastSites.df, ms.D.df, by = &quot;siteid&quot;) write.csv(mastSites.df, &quot;mastSites.csv&quot;) 4.3.4 Final Dataset Since the Henry Mount database is incomplete we will procede with the aggregation from the txt files. # Read tempC data setwd(&quot;D:/projects/soilTemperatureMonitoring/data/R&quot;) sites_df &lt;- read.csv(&quot;HOBO_List_2013_0923_master.csv&quot;) mast_df &lt;- read.csv(&quot;mastSites.csv&quot;) mast_df &lt;- merge(mast_df, sites_df, by = &quot;siteid&quot;) vars &lt;- c(&quot;siteid&quot;, &quot;tempF&quot;, &quot;numDays&quot;, &quot;utmeasting&quot;, &quot;utmnorthing&quot;) mast_df &lt;- mast_df[vars] mast_df$tempC &lt;- (mast_df$tempF - 32) * (5 / 9) 4.4 Spatial data 4.4.1 Plot Coordinates Where do our points plot? To start we need to convert them to a spatial object first. Then we can create an interactive we map using mapview. Also, if we wish we can also export the locations as a Shapefile. library(sf) library(mapview) library(dplyr) githubURL &lt;- &quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/ch7_data_v2.Rdata&quot; load(url(githubURL)) # convert to sites to a spatial object mast_sf &lt;- st_as_sf(mast_df, coords = c(&quot;utmeasting&quot;, &quot;utmnorthing&quot;), crs = 26911 ) %&gt;% # reproject st_transform(crs = 4326) # reduce precision mast_sf2 &lt;- st_as_sf(as.data.frame(round(st_coordinates(mast_sf), 1)), coords = c(&quot;X&quot;, &quot;Y&quot;), crs = 4326 ) # reproject mast_sf &lt;- st_transform(mast_sf, 5070) # MLRAs mlra &lt;- read_sf(dsn = &quot;D:/geodata/soils/mlra_a_mbr.shp&quot;, layer = &quot;mlra_a_mbr&quot;) %&gt;% st_transform(crs = 4326) %&gt;% filter(MLRARSYM %in% 30:31) # plot mapview(mlra, fill = NA) + mapview(mast_sf2) 4.4.2 Extracting Spatial Data Prior to any spatial analysis or modeling, you will need to develop a suite of geodata files that can be intersected with your field data locations. This is, in and of itself a difficult task and should be facilitated by your Regional GIS Specialist. The geodata files typically used would consist of derivatives from a DEM or satellite imagery, and a good geology map. Prior to any prediction it is also necessary to ensure the geodata files have the same projection, extent, and cell size. Once we have the necessary files we can construct a list in R of the file names and paths, read the geodata into R, and then extract the geodata values where they intersect with field data. As you can see below their are numerous variables we could inspect. library(raster) # set file path folder &lt;- &quot;D:/geodata/project_data/R8-VIC/&quot; files &lt;- c(elev = &quot;ned30m_8VIC_elev5.tif&quot;, slope = &quot;ned30m_8VIC_slope5.tif&quot;, aspect = &quot;ned30m_8VIC_aspect5.tif&quot;, twi = &quot;ned30m_8VIC_wetness.tif&quot;, solar = &quot;ned30m_8VIC_solar.tif&quot;, solarcv = &quot;ned30m_8VIC_solarcv.tif&quot;, tc = &quot;landsat30m_8VIC_tc123.tif&quot;, precip = &quot;prism30m_8VIC_ppt_1981_2010_annual_mm.tif&quot;, temp = &quot;prism30m_8VIC_tmean_1981_2010_annual_C.tif&quot; ) # combine the folder directory and file names geodata_f &lt;- paste0(folder, files) names(geodata_f) &lt;- names(files) # Create a raster stack geodata_r &lt;- stack(geodata_f) # Extract the geodata and add to a data frame data &lt;- raster::extract(geodata_r, as(mast_sf, &quot;Spatial&quot;), sp = TRUE)@data # convert aspect data$northness &lt;- abs(180 - data$aspect) # random sample vars &lt;- c(&quot;elev&quot;, &quot;temp&quot;, &quot;precip&quot;, &quot;solar&quot;, &quot;tc_1&quot;, &quot;twi&quot;) idx &lt;- which(names(geodata_r) %in% vars) geodata_s &lt;- sampleRegular(geodata_r[[idx]], size = 5000) # cache files save(data, mast_df, mast_sf2, mlra, geodata_s, file = &quot;C:/workspace2/github/ncss-tech/stats_for_soil_survey/data/ch7_data_v2.Rdata&quot;) 4.5 Exploratory Data Analysis (EDA) Generally before we begin modeling it is good to explore the data. By examining a simple summary we can quickly see the breakdown of our data. It is important to look out for missing or improbable values. Probably the easiest way to identify pecularities in the data is to plot it. githubURL &lt;- &quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/ch7_data_v2.Rdata&quot; load(url(githubURL)) summary(data) You may recall from discussion of EDA that QQ plots are a visual way to inspect the normality of a variable. If the variable is normally distributed, the points (e.g. soil observations) should line up along the straight line. # QQ plot library(ggplot2) ggplot(data, aes(sample = tempC)) + geom_qq() + geom_qq_line() By examining the correlations between some of the predictors we can also determine wheter they are collinear (e.g. &gt; 0.6). This is common for similar variables such as landsat bands, terrain derivatives, and climatic variables. Variables that are colinear are redundant and contain no additional information. In additino, collinearity will make it difficult to estimate our regression coefficients. vars &lt;- c(&quot;tempC&quot;, &quot;elev&quot;, &quot;temp&quot;, &quot;precip&quot;, &quot;tc_2&quot;, &quot;tc_1&quot;, &quot;tc_3&quot;) GGally::ggpairs(data[, vars]) vars &lt;- c(&quot;tempC&quot;, &quot;slope&quot;, &quot;twi&quot;, &quot;northness&quot;, &quot;solar&quot;, &quot;solarcv&quot;) GGally::ggpairs(data[, vars]) The correlation matrices and scatter plots above show that that MAST has moderate correlations with some of the variables, particularly the elevation and the climatic variables. Examining the density plots on the diagonal axis of the scatterplots we can also see that some variables are skewed. 4.5.1 Compare Samples vs Population Since our data was not randomly sampled, we had better check the distribution of our samples vs the population. We can accomplish this by overlaying the sample distribution of predictor variables vs a large random sample. geodata_df &lt;- as.data.frame(geodata_s) geodata_df &lt;- rbind( data.frame(source = &quot;sample&quot;, data[names(geodata_df)]), data.frame(source = &quot;population&quot;, geodata_df) ) geodata_w &lt;- reshape::melt( geodata_df, id.vars = &quot;source&quot;, measures.vars = vars ) ggplot(geodata_w, aes(x = value, fill = source)) + geom_density(alpha = 0.5) + facet_wrap(~ variable, scales = &quot;free&quot;) + ggtitle(&quot;Evaluation of Sample Representativeness&quot;) The overlap between our sample and the population appear satistifactory. 4.6 Linear modeling R has several functions for fitting linear models. The most common is arguably the lm() function from the stats R package, which is loaded by default. The lm() function is also extended thru the use of several additional packages such as the car and caret R packages. Another noteworthy R package for linear modeling is rms, which offers the ols() function for linear modeling. The rms R package (Harrell et al., 2015) offers an almost comprehesive alternative to `lm() and its accessory function. It is difficult to objectively functions say which approach is better. Therefore methods both methods will be demonstrated. Look for comments (i.e. #) below referring to rms, stats, caret or visreg. # stats fit_lm &lt;- lm(tempC ~ elev + aspect + twi + solar + solarcv + tc_1 + tc_2 + tc_3 + precip + temp, data = data, weights = data$numDays) # rms library(rms) dd &lt;- datadist(data) options(datadist = &quot;dd&quot;) fit_ols &lt;- ols(tempC ~ elev + aspect + twi + solar + solarcv + tc_1 + tc_2 + tc_3 + precip + temp, data = data, x = TRUE, y = TRUE, weights = data$numDays) 4.6.1 Diagnostics 4.6.1.1 Residual plots Once we have a model we need to assess residuals for linearity, normality, and homoscedastivity (or constant variance). Oddly this is one area were the rms R package does not offer convient functions for plotting residuals, therefore well simply access the results of lm(). par(mfcol = c(2, 2)) plot(fit_lm) termplot(fit_lm, partial.resid = TRUE, col.res = &quot;black&quot;, pch = 16) 4.6.1.2 Multicolinearity As we mentioned earlier multicolinearity should be avoided. To assess a model for multicolinearity we can compute the variance inflation factor (VIF). Its square root indicates the amount of increase in the predictor coefficients standard error. A value greater than 3 indicates a doubling the standard error. Rules of thumb vary, but a square root of vif greater than 2 or 3 indicates an unacceptable value. # vif() function from the rms or car packages sqrt(vif(fit_lm)) # or sqrt(vif(fit_ols)) &gt; 3 The values above indicate we have several colinear variables in the model, which you might have noticed already from the scatter plot matrix. 4.6.2 Variable selection &amp; model validation Modeling is an iterative process that cycles between fitting and evaluating alternative models. Compared to tree and forest models, linear and generalized models typically require more scrunity from the user. Automated model selection procedures are available, but should not be taken at face value because they may result in complex and unstable models. This is in part due to correlation amongst the predictive variables that can confuse the model. Also, the order in which the variables are included or excluded from the model effects the significance of the other variables, and thus several weak predictors might mask the effect of one strong predictor. Regardless of the approach used, variable selection is probably the most controversial aspect of linear modeling. Both the rms and caret packages offer methods for variable selection and cross-validation. In this instance the rms approach is a bit more convinent, with the one line call to validate(). # Set seed for reproducibility set.seed(42) # rms ## stepwise selection and validation step_rms &lt;- validate(fit_ols, method = &quot;crossvalidation&quot;, B = 10, bw = TRUE) The results for validate() above and below show which variables were retained and deleted. Below we can see a dot matrix of which variables were retained in during the 10 iterations of the cross validation. In addition, below we can see the difference between the training and test accuracy and error metrics. Remember that it is the test accuracy we should pay attention too. ## test accuracy and error step_rms The caret package option for variable selection and validation is a bit more verbose than the rms package. However, the caret package is a more versatile package, with options for over 50 different models, such as other tree-based models. # caret library(caret) ## cross validation parameters train.control &lt;- trainControl(method = &quot;cv&quot;, number = 10, savePredictions = TRUE, returnData = TRUE) ## stepwise selection and validation step_caret &lt;- train(tempC ~ elev + solar + aspect + twi + solar + solarcv + tc_1 + tc_2 + tc_3 + log(precip) + temp^2, data = data, weights = data$numDays, method = &quot;lmStepAIC&quot;, trace = FALSE, trControl = train.control, na.action = na.exclude ) ## test accuracy and error summary(step_caret$resample) The output from caret is somewhat different. Notice it selected a slightly different combination of variables and more optimistic test accuracy and error. # summary summary(step_caret$finalModel) 4.6.3 Final model &amp; accuracy assessment # rms final_ols &lt;- ols(tempC ~ elev + solarcv + tc_1 + tc_2, data = data, weights = data$numDays, x = TRUE, y = TRUE) validate(final_ols, method = &quot;crossvalidation&quot;, B = 10) # caret final_caret &lt;- train(tempC ~ elev + solarcv + tc_1 + tc_2, data = data, weights = data$numDays, method = &quot;lm&quot;, trControl = train.control, na.action = na.exclude ) final_caret$results final_lm &lt;- final_caret$finalModel 4.6.4 Model Effects summary(final_lm) # analyis of variance dd &lt;- datadist(data) options(datadist = &quot;dd&quot;) anova(final_ols) anova(final_lm) # rms plot(Predict(final_ols)) plot(Predict(final_ols, elev = NA, solarcv = c(23, 33, 51))) # visreg library(visreg) par(mfrow = c(2, 2)) visreg(final_lm) par(mfrow = c(1, 1)) visreg(final_lm, xvar = &quot;elev&quot;, by = &quot;solarcv&quot;, breaks = c(23, 33, 51), overlay = TRUE) 4.7 Generate spatial predictions # Predict tempC model predfun &lt;- function(model, data) { v &lt;- predict(model, data, se.fit=TRUE) } mast_r &lt;- predict(geodata_r, final_lm, fun = predfun, index = 1:2, progress = &#39;text&#39;) writeRaster(mast_r[[1]], filename = &quot;C:/workspace2/mast.tif&quot;, format = &quot;GTiff&quot;, progress = &quot;text&quot;) writeRaster(mast_r[[2]], filename = &quot;C:/workspace2/mast_se.tif&quot;, format = &quot;GTiff&quot;, progress = &quot;text&quot;) 4.8 Create Map library(raster) mlra &lt;- st_transform(mlra, 5070) # mast mast &lt;- raster(&quot;C:/workspace2/mast.tif&quot;) crs(mast) &lt;- &quot;+init=epsg:5070&quot; plot(mast) plot(mlra[1], col = NA, add = TRUE) # mast standard error mast_se &lt;- raster(&quot;C:/workspace2/mast_se.tif&quot;) crs(mast_se) &lt;- &quot;+init=epsg:5070&quot; plot(mast_se) plot(mlra[1], col = NA, add = TRUE) 4.9 Literature Bai, Y., T.A. Scott, W. Chen, R.C. Graham, L. Wu, A.C. Chang, and L.J. Lund, 2010. Soil Temperature Regimes in the Mojave Desert. Soil Science, 175(8):398-404. Harrell, F.E., 2015. Regression Modeling Strategies: With Applications to Linear Models, Logisitc and Ordinal Regression, and Survival Analysis. Springer, New York. https://link.springer.com/book/10.1007%2F978-3-319-19425-7 Mount, H.R., and R.F. Paetzold, 2002. The temperature regime for selected soils in the United States. United States Department of Agriculture, Natural Resources Con-servation Service, National Soil Survey Center, Lincoln, Nebraska, Soil Survey Investi-gation Report No. 48. Peterson, F.F., 1992. Status of Soil Climate Studies in Nevada. pp1-11. Roecker, S.M. and C.A. Haydu-Houdeshell, 2012. Modeling and Application of Soil Temperature in the Mojave and Lower Colorado Deserts of California. 2012 Western Regional Cooperative Soil Survey Conference. Schmidlin, T.W., F.F. Peterson, and R.O. Gifford, 1983. Soil Temperature Regimes of Nevada. Soil So. Sci. Am. J., 47:977-982. 4.10 Additional reading Faraway, J.J., 2002. Practical Regression and Anova using R. CRC Press, New York. https://cran.r-project.org/doc/contrib/Faraway-PRA.pdf James, G., D. Witten, T. Hastie, and R. Tibshirani, 2014. An Introduction to Statistical Learning: with Applications in R. Springer, New York. http://www-bcf.usc.edu/~gareth/ISL/ Hengl, T. 2009. A Practical Guide to Geostatistical Mapping, 2nd Edt. University of Amsterdam, www.lulu.com, 291 p. ISBN 978-90-9024981-0. http://spatial-analyst.net/book/system/files/Hengl_2009_GEOSTATe2c0w.pdf Webster, R. 1997. Regression and functional relations. European Journal of Soil Science, 48, 557-566. http://onlinelibrary.wiley.com/doi/10.1111/j.1365-2389.1997.tb00222.x/abstract "],["acc-unc-categorical-data.html", "A Accuracy and Uncertainty for Categorical Predictions A.1 Status Quo A.2 Theses A.3 Soap Box Time A.4 Concept Demonstration via Simulated Data A.5 Accuracy A.6 Uncertainty A.7 Review A.8 Example Implementation A.9 Resources A.10 References (Appdx)", " A Accuracy and Uncertainty for Categorical Predictions This document is an abbreviated attempt at addressing some of the issues related to accuracy and uncertainty that I have brought up over discussion of raster (soil class) mapping standards. As such, the following is a combination of soap box moments, demonstrations of methods, todo items for my future self, and references. Honestly, before going any further be sure to read the recent paper by Rossiter, Zeng, and Zhang (2017). This article does a fine job of summarizing the major differences between classification and prediction. Most of the modeling frameworks we will be using or evaluating generate predictions in the form of probabilities (prediction). At some point the stack of probabilities will be converted into a single map depicting the most likely class at each pixel (classification). The iterative assessment of model performance (e.g. accuracy and uncertainty) should happen as part of the prediction phase via metrics such as the Brier score and Shannon entropy. An evaluation of the final classification is helpful for communicating accuracy to a wider audience (e.g. percent correctly classified) but should not be the primary means of optimizing model performance. A.1 Status Quo The Digital Soil Mapping chapter (5) from the latest Soil Survey Manual describes two commonly used metrics for the description of accuracy and uncertainty: overall accuracy / percent correctly classified (PCC) and the confusion index (CI) of Burrough, van Gaans, and Hootsmans (1997). These methods are widely used and implementation is simple. Given the complex nature of class mapping results (e.g. stack of class probabilities) and inherent (likely quantifiable) similarity of soil classes, I think that we should explore options for a more robust suite of accuracy and uncertainty metrics. Furthermore, it is my opinion that any evaluation of probabilistic predictions should be integrated over all classes. A.2 Theses The \\(\\tau\\) statistic of (Rossiter, Zeng, and Zhang 2017) is a more reliable and nuanced representation of accuracy vs. PCC. The \\(\\tau\\) statistic can be upgraded with additional knowledge given the availability of 1) prior understanding of class proportions, and/or, 2) meaningful parameterization of pair-wise class distances. There can be consensus on formulation of approximate pair-wise distances, within a given modeling domain. Pair-wise distances may not necessarily be the same across modeling domains or projects. Brier scores are option for an even more nuanced representation of accuracy as they integrate all predicted probabilities. The confusion index of Burrough, van Gaans, and Hootsmans (1997) is an unstable metric when the number of predicted classes is large and when the most likely classes are associated with low probabilities. Shannon entropy (log base 2) is a more reliable representation of uncertainty than the confusion index, especially when the number of possible classes varies by project. The importance of a universally reliable representation of uncertainty is even more important when several methods are used concurrently. There should be a way to integrate pair-wise distances into the Shannon entropy (or related method) and Brier scores; maybe we will discover those here. A.3 Soap Box Time Our current QC/QA process is based on many forms of evaluation, accumulates some degree of subjectivity and relies heavily on qualitative forms of information (field experience, institutional knowledge, etc.). On the opposite side of the spectrum, the validation of raster mapping is often claimed to be free of subjective interference and entirely quantitative. Those are good things that we should always strive for, however, the simplicity of calculating a percent correctly classified can interfere with a more nuanced evaluation of accuracy. As I mentioned on the phone (and implicitly volunteered for) a validation score might be more meaningful than any single validation metrics. One such score might include: agreement between predicted probabilities and observed class (e.g. Brier scores) agreement between the most likely class and observed class, accounting for class similarities (e.g. weighted \\(\\tau\\)) distribution of class-wise Shannon entropy values calibration vs. predicted vs. validation proportion of classes some kind of metric that integrates spatial connectivity of predictions / observations, for example: cross-tabulate calibration / prediction / validation classes with geomorphon classes I strongly believe that we need a robust suite of metrics primarily for internal discussion and evaluation of raster mapping products; even more so when complex modeling frameworks such as randomForest or neural nets are used. Accuracy and uncertainty metrics are primarily vehicles for understanding, re-calibrating (as needed), and communicating statistical models as part of the development and QA/QC process. A.4 Concept Demonstration via Simulated Data Consider a supervised classification that generates predictions for 5 possible soil classes. Suites of predicted probabilities fall into 3 general cases: Case 1: classes D and E are nearly tied for the most likely class, but their respective probabilities are generally &lt; 0.5 Case 2: class E is almost always the most likely class, but classes B, C, and D are tied for second place Case 3: class E is always the most likely class, all other classes have probabilities &lt; 0.2 # examples of three cases print(p.1) Even though these are simulated data, the three cases above demonstrate common modeling scenarios where classification uncertainty ranges from very low (Case 3) in some areas to quite high (Case 1) in others. These three cases could easily be associated with real situations: Case 1: predictions for soil classes represent a hillslope complex that isnt quite disentangled by the model Case 2: predictions for soil classes represent limited success in partitioning between a single water shedding (E) vs. multiple water collecting positions (A-D) Case 3: predictions for soil classes represent a successful partitioning between Holocene age deposits (E) vs. older alluvial terraces (A-D) A.5 Accuracy A.5.1 Confusion Matrix / Area Under ROC See Chapter 9. Review some of the commentary on the use of only the confusion matrix and AUROC for rating predictions in the medical field. The confusion matrix and associated statistics are a useful starting point but not the most effective means for comparing performance. A.5.2 Brier Scores Brier scores (Brier 1950, @Harrell2001) quantify agreement between observed classes and predicted probabilities: \\[ B = \\frac{1}{n} \\sum_{i=1}^{n}{ ( p_{i} - y_{i} )^{2} } \\] where \\(B\\) is an index of agreement between predicted probabilities, \\(\\mathbf{p}\\), and class labels, \\(\\mathbf{y}\\). Larger values suggest less agreement between probabilities and observed class labels. Follow-up: https://en.wikipedia.org/wiki/Brier_score https://stats.stackexchange.com/questions/112250/understanding-the-rank-probability-score http://empslocal.ex.ac.uk/people/staff/dbs202/publications/2008/stephenson-brier.pdf http://iopscience.iop.org/article/10.1088/1748-9326/7/4/044019 What about a weighted version of this score, based on a re-statement of the distance matrix? A.5.3 Tau and Weighted Tau (class-similarity) (Rossiter, Zeng, and Zhang 2017) implemented in aqp::tauw(). This paper contains some discussion on a weighted version of Shannon Entropy using the subset of similarities between predicted classes and the actual class. A.5.3.1 Commentary from DGR Prior class probabilities. Commentary from DGR: + That depends on the mapping method. In LDA we can set the priors, then wed use these in tau. But for an automatic DSM procedure the priors are all equal (Foodys modified kappa). If judging a manual mapper, the priors can be their overall probabilities for an area. E.g., in one county we have a pretty good idea that it is half Vertisols, so the mapper is prejudiced (in the good sense) about this. Class similarity The weighting is quite tricky since obviously it can be used to manipulate results. I really like the error loss method if there is some numerical value put on each difference  as I did with the NC site index. In CA you have the Storie index, you could use that difference for mis-mappings of series. Numerical taxonomy measures could also be used but youd need to agree on which properties to use. If the purpose of the map is e.g. to estimate C stocks, then the difference between the mean C stocks between classes from NASIS might be used. Coming up with a transparent and accepted weighting can be tricky. A.6 Uncertainty A.6.1 Shanon Entropy \\[ H = -\\sum_{i=1}^{n}{p_{i} * log_{2}(p_{i})} \\] where \\(H\\) is an index of uncertainty associated with predicted probabilities, \\(\\mathbf{p}\\), of encountering classes \\(i\\) through \\(n\\). Smaller values imply less entropy (more information). Given equal class probabilities, H will increas as the number of classes increases. Kempen et al. (2009) described a normalized version of Shannon entropy that is constrained to values between 0 and 1: \\[ H = -\\sum_{i=1}^{n}{p_{i} * log_{n}(p_{i})} \\] where \\(H\\) is an index of uncertainty associated with predicted probabilities, \\(\\mathbf{p}\\), of encountering classes \\(i\\) through \\(n\\). This representation may be conveniently contained within the range of \\([0,1]\\), however, it cannot be used to compare uncertainty from models using different numbers of classes. It is my recommendation that the \\(log_{2}\\) version of Shannon H be used as our primary metric of uncertainty for predictive soil class mapping. Shannon entropy does not take into account similarity among classes. A.7 Review # examples of three cases print(p.1) pp &lt;- ldply(s, performance) names(pp)[1] &lt;- &#39;example&#39; kable_styling(kable(pp, row.names = FALSE, digits = 2, format=&#39;html&#39;), full_width = FALSE) ex &lt;- ldply(s, extractExample, n=1) names(ex)[1] &lt;- &#39;example&#39; ex$CI &lt;- NULL ex$actual &lt;- NULL add_header_above(kable_styling(kable(ex, row.names = FALSE, digits = 2, format=&#39;html&#39;), full_width = FALSE), header=c(&quot; &quot; = 1, &quot;Class Probabilities&quot; = 5, &quot;Uncertainty&quot; = 1)) A.8 Example Implementation The aqp package has an implementation of Shannon entropy and Brier score; there are many other implementations but these are convenient for soil survey work. Consider the following table of predicted probabilities (classes A,B,C,D,E) and observed class (actual). library(aqp) # example data d &lt;- structure(list(A = c(0.0897243494322252, 0.0537087411977284, 0.0643087579284512, 0.0582791533521884, 0.0655491726966812, 0.0878056947034425, 0.0550727743006022, 0.10724015754623, 0.0332599961787985, 0.0555131608754956 ), B = c(0.191110141078936, 0.187244044389649, 0.119214057525671, 0.198461646003737, 0.161851348940294, 0.172157251906694, 0.113611770097243, 0.178697159594029, 0.194607795787689, 0.188977055949146), C = c(0.121941735763077, 0.0770539012535731, 0.0977753159795662, 0.0774293724263895, 0.072198187957068, 0.0366921003115242, 0.151033286139089, 0.0974443429098862, 0.124876574685048, 0.0864142563046045), D = c(0.351108807309283, 0.322120077305279, 0.440632731639948, 0.401063395801608, 0.312647702445919, 0.304193047630158, 0.270239142407351, 0.258895264130713, 0.422747316475851, 0.252724366285052 ), E = c(0.246114966416479, 0.359873235853771, 0.278069136926363, 0.264766432416077, 0.387753587960038, 0.399151905448182, 0.410043027055715, 0.357723075819142, 0.224508316872614, 0.416371160585702), id = c(&quot;1&quot;, &quot;10&quot;, &quot;100&quot;, &quot;1000&quot;, &quot;101&quot;, &quot;102&quot;, &quot;103&quot;, &quot;104&quot;, &quot;105&quot;, &quot;106&quot; ), actual = c(&quot;D&quot;, &quot;B&quot;, &quot;D&quot;, &quot;E&quot;, &quot;D&quot;, &quot;D&quot;, &quot;E&quot;, &quot;E&quot;, &quot;D&quot;, &quot;E&quot; )), .Names = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;id&quot;, &quot;actual&quot;), row.names = c(NA, 10L), class = &quot;data.frame&quot;) # check it out # predictions, and actual, observed class head(d) Brier scores (accuracy) are computed over all predictions and associated observed classes. # compute Brier score from all predictions brierScore(d, classLabels = c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;), actual = &#39;actual&#39;) Shannon entropy (uncertainty) is computed from each vector of predicted probabilities. # shannon entropy for first row, could be a single pixel or obs. point shannonEntropy(d[1, c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;)]) # compute shannon entropy for all rows apply(d[, c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;)], 1, shannonEntropy) A.9 Resources A.9.1 Evaluating Accuracy of Categorical / Probabilistic Predictions Commentary on the use of confusion matrix and AUROC What is the AUC / AUROC? Commentary on C-index / AUROC AUROC Scoring Rules Frank Harrels Website + links Classification vs. Prediction A.9.2 Sampling and Stability of Estimates Gridded Data: Sample vs. Population Demonstration of sampling density vs. stability of median A.10 References (Appdx) "]]
