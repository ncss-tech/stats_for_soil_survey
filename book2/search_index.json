[["index.html", "Statistics for Soil Survey - Part 2 Pre-course Assignment 0.1 Setup 0.2 Additional Reading", " Statistics for Soil Survey - Part 2 Soil Survey Staff 2023-02-25 Pre-course Assignment 0.1 Setup To set up your R environment and install required packages, please use the pre-course instructions found at the beginning of Statistics for Soil Survey (Part 1): http://ncss-tech.github.io/stats_for_soil_survey/book/ 0.2 Additional Reading Spatial Data Analysis and Modeling with R R-Intro R for Beginners The R Inferno AQP Website and Tutorials Stats for Soil Survey Webinar Soil Data Aggregation using R Webinar "],["intro.html", "Chapter 1 Introduction 1.1 Outline", " Chapter 1 Introduction Finish this. 1.1 Outline "],["uncertainty.html", "Chapter 2 Uncertainty 2.1 Introduction 2.2 Theory of Uncertainty 2.3 Resampling to Estimate Uncertainty 2.4 Performance Metrics 2.5 Stratified-random/areal-adjustment 2.6 Validation", " Chapter 2 Uncertainty 2.1 Introduction Validating and assessing the uncertainty of a model is just as, if not more important, than generating the model itself. Validation quantifies the model’s ability to explain variance in the data while uncertainty quantifies the confidence of model prediction. Uncertainty and validation assessments enable the end user to better understand model error, the nature and distribution of the input data, and the overall accuracy and spatial applicability of the model. Within a soil model, there are several sources of error: Measurement errors Interpretation errors Digitization errors Classification errors Generalization errors Interpolation errors Semantic errors Errors are simply the difference between reality and our representation of reality. Assessing the data structure with simple statistical measures such as mean, median and mode can be useful for understanding the central tendency of the data, but more complicated calculations are needed to get at dispersion or the variation of a property within a population to further assess error and uncertainty (Zar, 1999). Measure of Dispersion Range: The difference between the highest and lowest values measured or observed. Not always reliable because it can include outliers, error, or misclassified data. Quantiles: These refer to 25% increments in the rank of observations. Typically, the 25th and 75th quantiles are used to represent the spread of the most typical values around the central tendency. Measure of Variation * Variance: The deviation of from the mean is calculated as sum of squares (SS) to use absolute deviation (eliminate any distinction between negative and positive correlation). \\(variance (sample) = \\frac{SS}{n-1}\\) \\(SS = \\sum{(X - x)^2}\\) Standard deviation: Used to return variance to the original units \\(sd = \\sqrt{\\frac{SS}{n-1}}\\) Coefficient of variation: Scale standard deviation with mean so that multiple properties can be compared \\(CV = \\frac{SD}{x}\\) Measures of Certainty Standard Error: represents the variance of the mean that would be found with repeated sampling. Estimated by dividing standard deviation by the square root of n. The concept of standard error is important for hypothesis testing. Confidence interval: Interval in which you are confident that a given percentage (known as the confidence limit 95, 80, 75%) of the population lie. If a normal distribution is assumed, for a 95% confidence interval, it can be estimated that the value is 95% likely to fall between as SD * 1.96 +/- mean. 2.1.1 Examples - Dispersion Below is a simulated example demonstrating the affect of sample size and standard deviation on quantile estimates. library(dplyr) library(ggplot2) # create 50 random pH samples of 10, 30, 60, and 100 y &lt;- c(10, 30, 60, 100) lab &lt;- paste0(&quot;n = &quot;, y) f &lt;- function(x, n, sd) { idx &lt;- rnorm(n, mean = 7, sd = sd) tmp &lt;- data.frame(iteration = factor(x, levels = 1:30), n = factor(n, levels = y, labels = lab), sd = paste0(&quot;sd = &quot;, sd), pH = idx) return(tmp) } # standard deviation of 1 test &lt;- mapply(FUN = f, rep(1:30, times = 4), rep(y, each = 30), sd = 1, SIMPLIFY = FALSE) test &lt;- do.call(&quot;rbind&quot;, test) # standard deviation of 1 test2 &lt;- mapply(FUN = f, rep(1:30, times = 4), rep(y, each = 30), sd = 2, SIMPLIFY = FALSE) test2 &lt;- do.call(&quot;rbind&quot;, test2) test &lt;- rbind(test, test2) # examine summary statistics test %&gt;% group_by(iteration, n, sd) %&gt;% summarize(med = median(pH)) %&gt;% group_by(sd, n) %&gt;% summarize(across(med, list(min = min, mean = mean, max = max))) ## # A tibble: 8 × 5 ## # Groups: sd [2] ## sd n med_min med_mean med_max ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 sd = 1 n = 10 6.23 7.00 7.78 ## 2 sd = 1 n = 30 6.55 7.02 7.50 ## 3 sd = 1 n = 60 6.69 7.03 7.42 ## 4 sd = 1 n = 100 6.79 7.02 7.26 ## 5 sd = 2 n = 10 5.84 6.95 8.41 ## 6 sd = 2 n = 30 6.39 7.16 7.94 ## 7 sd = 2 n = 60 6.12 7.01 7.62 ## 8 sd = 2 n = 100 6.46 7.07 7.85 # examine box plots ggplot(test, aes(x = iteration, y = pH)) + geom_boxplot() + facet_wrap(~ n + sd, ncol = 2, ) The results show that quantile estimates are more variable with smaller sample sizes and larger inherent standard deviations. This example demonstrates how our results would differ if we were to sample the same soils again. We would be “uncertain” of our results unless the underlying standard deviation is small or our sample size was large. Both factors would also impact how certain we could be that 2 or more classes of soils are different. 2.1.2 Examples - Variation and Certainty Demonstration of how to calculate variance. # calculate the mean mu &lt;- mean(test$pH) # subtract mean from each value and square (i.e. residuals) test$S &lt;- (test$pH - mu)^2 # calculate overall sum of squares SS &lt;- sum(test$S) # calculate sample variance (length gives us the total number of sample/observations) SS / (length(test$pH) - 1) ## [1] 2.548376 Note below how our estimate of the variance can vary widely, particularly for simulated datasets with a inherent standard deviation of 2. test %&gt;% group_by(iteration, n, sd) %&gt;% summarize(var = var(pH)) %&gt;% group_by(sd, n) %&gt;% summarize(across(var, list(min = min, mean = mean, max = max))) ## # A tibble: 8 × 5 ## # Groups: sd [2] ## sd n var_min var_mean var_max ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 sd = 1 n = 10 0.406 0.947 1.81 ## 2 sd = 1 n = 30 0.591 1.04 1.72 ## 3 sd = 1 n = 60 0.656 1.00 1.39 ## 4 sd = 1 n = 100 0.724 0.995 1.25 ## 5 sd = 2 n = 10 1.21 3.65 11.9 ## 6 sd = 2 n = 30 2.03 3.95 6.28 ## 7 sd = 2 n = 60 2.78 4.08 5.57 ## 8 sd = 2 n = 100 2.86 4.11 5.80 Now let’s see Standard Error (standard deviation / square root of n) below. The results show how our estimates become more precise as the sample size increases. SE &lt;- function(x) sd(x, na.rm = TRUE) / sqrt(length(!is.na(x))) test %&gt;% group_by(iteration, n, sd) %&gt;% summarize(SE = SE(pH)) %&gt;% group_by(sd, n) %&gt;% summarize(across(SE, list(min = min, mean = mean, max = max))) ## # A tibble: 8 × 5 ## # Groups: sd [2] ## sd n SE_min SE_mean SE_max ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 sd = 1 n = 10 0.202 0.303 0.426 ## 2 sd = 1 n = 30 0.140 0.184 0.240 ## 3 sd = 1 n = 60 0.105 0.129 0.152 ## 4 sd = 1 n = 100 0.0851 0.0995 0.112 ## 5 sd = 2 n = 10 0.348 0.579 1.09 ## 6 sd = 2 n = 30 0.260 0.360 0.457 ## 7 sd = 2 n = 60 0.215 0.260 0.305 ## 8 sd = 2 n = 100 0.169 0.202 0.241 2.2 Theory of Uncertainty At it’s most basic level, uncertainty is simply a lack of certainty. In soil survey, uncertainty encompasses both of these aspects: you’ve gathered multiple observations and you need to describe them in relation to one another, and you must predict a property or characteristic at unobserved locations. It is difficult to quantify the knowledge we have about data and information uncertainty. While we may have good data of the accuracy of our GPS, how likely are we to include that in our estimates of model error? How important is it? In other disciplines, they spend a lot of time quantifying and tracking measurement error. In soil science, we tend to treat measurement as having an exact known location and value. Given the unknowns in mapping and predicting soil properties, this is a reasonable treatment of relatively small levels of error. When using secondary information as data (or data that is actually a prior prediction or result of a model, including soil components), considering incorporated error can be crucial. One way to deal with this is through re-sampling an alternate way is to through error propagation theory. The most common way to deal with this in soil survey and digital soil mapping is to assess error through model validation. Explanatory vs. Predictive Modelling While explanatory and predictive modeling can use the same types of models, data and even questions, the errors and uncertainty are important for different reasons Explanatory or Descriptive - data are collected and analyzed in order to test causal hypothesis and observe correlations and relationships between data element. Often used at the beginning phases of soil-landscape exploration. How does the soil relate to each of the soil forming factors? Predictive - applying a model or algorithm to data for the purpose of making a prediction (in new or unknown locations) (Shueli, 2010). 2.3 Resampling to Estimate Uncertainty When calculating many basic statistical parameters, the assumption is that the data is parametric. That implies that the data is continuous (ratio or interval) and normally distributed. This is rarely the case with soil data. Soil properties are often not normally distributed (you cannot have less that 0% organic matter, for instance) and often we are trying to predict soil taxa or other nominal classes. Re-sampling is a general term that defines any procedure to repeatedly draw samples form a given data-set. You are essentially pretending to collect a series of separate samples from your sample set then calculating a statistic on that sample. Re-sampling techniques can be used on known and unknown data distributions for uncertainty estimation and validation (Good 2013). # this bootstrap is estimating the uncertainty associated with the variance of sas$pH_0.30_obs # an example of getting a confidence interval through bootstrapping (no assumption of a normal distribution) # load the GSP Salt Affected Soil dataset url &lt;- &quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/gsp_sas.csv&quot; sas &lt;- read.csv(url) N &lt;- nrow(sas) # abbreviate our data to simply the commands ph &lt;- na.exclude(sas$pH_0.30_obs) n &lt;- 100 # set number of iterations k &lt;- 50 # create a data frame to store the results boot_stats &lt;- data.frame( vars = numeric(k), means = numeric(k) ) # for each instance (i) in the set from 1 to N (50 in this case) for (i in 1:k) { # create a new variable dB from each bootstrap sample of d boot.sample = sample(ph, n, replace = TRUE) boot_stats$means[i] = mean(boot.sample) boot_stats$vars[i] = var(boot.sample) } quantile(boot_stats$vars) ## 0% 25% 50% 75% 100% ## 0.9071562 1.0749006 1.1750622 1.2640883 1.5303392 stripchart(boot_stats$vars) # Traditional Approach ci &lt;- c( # lower 5th l = mean(ph) - 1.96 * sd(ph) / sqrt(n), # upper 95th u = mean(ph) + 1.96 * sd(ph) / sqrt(n) ) # Compare Bootstrap to Confidence Interval quantile(boot_stats$means, c(0.025, 0.975)) ## 2.5% 97.5% ## 5.849535 6.258995 ci ## l u ## 5.804082 6.223267 2.3.1 Exercise 1 Create a new R script. Calculate a bootstrapped median, 10th percentile, and 90th percentile for EC_0.30_obs. Calculate a traditional confidence interval for EC_0.30_obs. What is wrong with the traditional confidence interval? Forward you R script your instructor. 2.4 Performance Metrics 2.4.1 Numerical Accuracy: Mean Error (ME)/Prediction Error/Bias: Description: average error Pro: In the same use as the original values Mean Square Error (MSE): Description: Estimate of the model variance Root Mean Square Error (RMSE): Description: average residual or estimate of the model standard deviation Pro: In the same units as the original values Coefficient of variation (\\(R^2\\)): Description: of variance explained; Pro: Values range from &gt;-1 to 1 Con: Often confused with the correlation coefficient squared (caret::R2()), which does not assess the accuracy; see http://mng.bz/ndYf for when the two terms overlap Precision: Standard error (SE) Description: quantifies uncertainty in model parameters (e.g. coefficients, overall prediction) Confidence intervals (CI) Description: expansion of the SE to cover an interval according to a given probability Prediction intervals (PI) Description: quantifies uncertainty in the individual predicted values; wider than the CI Distance library(caret) # Numeric error metrics---- # R2 ---- R2(pred = sas$pH_0.30_pred, obs = sas$pH_0.30_obs, formula = &quot;traditional&quot;, na.rm = TRUE) ## [1] 0.8526782 # RMSE ---- sqrt(mean((sas$pH_0.30_pred - sas$pH_0.30_obs)^2, na.rm = TRUE)) ## [1] 0.4690274 # or RMSE(pred = sas$pH_0.30_pred, obs = sas$pH_0.30_obs, na.rm = TRUE) ## [1] 0.4690274 # plot errors idx &lt;- sample(1:nrow(sas), 100) ggplot(sas[idx, ], aes(x = pH_0.30_obs, y = pH_0.30_pred)) + geom_point() + # draw a 1 to 1 line geom_abline() + # draw a linear fit; method = &quot;lm&quot; geom_smooth(method = &quot;lm&quot;) ggplot(sas, aes(x = pH_0.30_obs, y = pH_0.30_pred)) + # use if too many points overlap geom_hex() + geom_abline() + geom_smooth() 2.4.2 Exercise 2 Append the following exercises to your previous R script. Compare the traditional \\(R^2\\) to the alternative \\(R^2\\) for EC_0.30_obs vs EC_0.30_pred? Calculate the RMSE() and MAE()for EC_0.30_obs vs EC_0.30_pred? Plot a hex bin scatterplot of EC_0.30_obs vs EC_0.30_pred with a linear smoother. Forward you R script your instructor. 2.4.3 Categorical Probability-based metrics (threshold-independent) Beware the \\(D^2\\) and Tjur’s D only apply to binary classes. Also, measures like Overall Accuracy, Precision and User Accuracy are dependent on the prevalence (frequency) of observation, and thus shouldn’t be use to compare classes with different sample sizes (Foody 2010; Kuhn and Johnson 2013, 2019; Monaghan et al. 2021; Parikh et al. 2008). Alternative calculations exist for row-wise accuracy that corrects for prevalence, such as the positive predictive value (PPV) and negative predictive value (NPV), which are available via the caret::confusionMatrix function. Similar named functions exist in other R packages, but don’t incorporate the prevalence corrected calculations. Accuracy: Brier score: equivalent to the mean square error (aqp::brierScore()) Deviance squared (\\(D^2\\)): % of devariance explained \\(R^2\\) (modEvA::Dsquared()) Coefficient of discrimination (or Tjur’s D)(modEvA::RsqGLM()) Precision: Shannon entropy: index of information content; higher values equal more uncertainty (aqp::shannonEntropy()) Confusion index: index of confusion; ranges from 0 to 1 (aqp::confusionIndex()) Class-based metrics are derivatives of the confusion matrix (Congalton and Green 2019a; Fielding and Bell 1997; Kuhn and Johnson 2013; Stehman 1997) (caret::confusionMatrix()) Confusion Matrix Observed Metric Predicted No Yes UA No True Negative (TN) False Negative (FN) UA Yes False Positive (FP) True Positive (TP) Precision / UA ——————- ——————– ——————— ————– Metric Specificity / PA Sensitivity / PA Overall Overall Accuracy: % of observations that were correctly classified, for all classes Specificity (aka True Negative Rate: TN / (TN + FP) errors of commission (Type I) Sensitivity (aka Recall or True Positive Rate): TP / (TP + FN) errors of omission (Type II)) % of predictions that were correctly classified, for an individual class Precision: TP / (TP + FP) % of observations that were correctly classified, for an individual class User’s Accuracy (UA): diagonal values / predicted values Producer’s Accuracy (PA): diagonal values (TN &amp; TP) / observed values Tau index: An index of accuracy that accounts for agreement by chance— effectively a replacement for Cohen’s Kappa (aqp::tauW()) url &lt;- &quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/gsp_bs.csv&quot; bs &lt;- read.csv(url) bs &lt;- subset(bs, complete.cases(BS1_obs, BS2_obs)) # Probability metrics ---- ## Brier score ---- vars &lt;- c(&quot;BS2_pred&quot;, &quot;BS2_obs&quot;) aqp::brierScore(bs[vars], &quot;BS2_pred&quot;, actual = &quot;BS2_obs&quot;) ## [1] 0.04384271 ## D2 &amp; Tjur D2---- modEvA::RsqGLM(obs = bs$BS2_obs, pred = bs$BS2_pred, plot = FALSE) ## $CoxSnell ## [1] 0.3957293 ## ## $Nagelkerke ## [1] 0.7857143 ## ## $McFadden ## [1] 0.7191203 ## ## $Tjur ## [1] 0.4823267 ## ## $sqPearson ## [1] 0.5992087 # Shannon entropy ---- # fake example test &lt;- seq(0, 0.5, 0.1) test &lt;- data.frame(obs = test, pred = 1 - test) cbind( test, entropy = apply(test, 1, aqp::shannonEntropy) ) ## obs pred entropy ## 1 0.0 1.0 0.0000000 ## 2 0.1 0.9 0.4689956 ## 3 0.2 0.8 0.7219281 ## 4 0.3 0.7 0.8812909 ## 5 0.4 0.6 0.9709506 ## 6 0.5 0.5 1.0000000 # bs example summary( apply(data.frame(bs$BS2_pred, 1 - bs$BS2_pred), 1, aqp::shannonEntropy) ) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.2111 0.4327 0.4722 0.7418 1.0000 # Class-based metrics ----- ## Confusion matrix ---- # beware conf_mat prefers factors with equal numbers of levels cm1 &lt;- table(pred = as.factor(bs$BS2_pred &gt; 0.5), obs = as.factor(bs$BS2_obs)) cm1 ## obs ## pred FALSE TRUE ## FALSE 28788 979 ## TRUE 411 2696 # or cm2 &lt;- confusionMatrix(cm1, positive = &quot;TRUE&quot;) cm2 ## Confusion Matrix and Statistics ## ## obs ## pred FALSE TRUE ## FALSE 28788 979 ## TRUE 411 2696 ## ## Accuracy : 0.9577 ## 95% CI : (0.9555, 0.9599) ## No Information Rate : 0.8882 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.7717 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.73361 ## Specificity : 0.98592 ## Pos Pred Value : 0.86772 ## Neg Pred Value : 0.96711 ## Prevalence : 0.11179 ## Detection Rate : 0.08201 ## Detection Prevalence : 0.09451 ## Balanced Accuracy : 0.85976 ## ## &#39;Positive&#39; Class : TRUE ## ## Examine thresholds ---- ggplot(bs, aes(x = BS2_pred, fill = BS2_obs)) + geom_density(alpha = 0.5) + xlab(&quot;BS2 Probability&quot;) ## Trade Precision for Sensitivity by Varying the Threshold table(predicted = bs$BS2_pred &gt; 0.5, observed = bs$BS2_obs) ## observed ## predicted FALSE TRUE ## FALSE 28788 979 ## TRUE 411 2696 2.4.4 Exercise 3 Append the following exercises to your previous R script. Calculate the Brier score, \\(D^2\\) and Shannon Entropy for the BS1 class from the bs dataset. What probably threshold creates the best split for the BS1 class. Calculate a confusion matrix for sas30_obs vs sas30_pred from the sas dataset. Be sure to manually set the factor levels as shown below. lev &lt;- unique(c(sas$sas030_obs, sas$sas030_pred)) lev &lt;- lev[c(1, 4, 8, 9, 12, 5, 3, 6, 7, 11)] sas$sas030_obs &lt;- factor(sas$sas030_obs, levels = lev) sas$sas030_pred &lt;- factor(sas$sas030_pred, levels = lev) Why can’t you calculate a Brier score and Shannon entropy for the SAS classes from the sas dataset? Forward you R script your instructor. 2.5 Stratified-random/areal-adjustment In the case of stratified-random samples or non-probability samples, it is necessary to adjust the class totals by their assumed/estimated proportion or area prior to calculating their accuracy or standard errors (Brus, Kempen, and Heuvelink 2011; Campbell, Wynne, and Thomas 2023; Congalton and Green 2019b; Stehman and Foody 2019). This is often the case when a minority class (e.g. minor component or small map unit) is sampled in excess of it’s true proportion relative to the total sample set. Surprisingly R functions to adjusts for these unequal weights is rare, with the exception of the sits and MetricsWeighted R package. # weights wt &lt;- c(0.95, 0.05) # confusion matrix cm &lt;- table(pred = bs$BS2_pred &gt; 0.5, obs = bs$BS2_obs) cm ## obs ## pred FALSE TRUE ## FALSE 28788 979 ## TRUE 411 2696 # apply weights cm_wt &lt;- wt * cm/rowSums(cm) # optional transformation to original totals cm_wt2 &lt;- cm_wt/sum(cm_wt) * sum(cm) # compare weighted and unweighted confusion matrices confusionMatrix(cm, positive = &quot;TRUE&quot;)$byClass ## Sensitivity Specificity Pos Pred Value ## 0.73360544 0.98592418 0.86771806 ## Neg Pred Value Precision Recall ## 0.96711123 0.86771806 0.73360544 ## F1 Prevalence Detection Rate ## 0.79504571 0.11179047 0.08201010 ## Detection Prevalence Balanced Accuracy ## 0.09451238 0.85976481 confusionMatrix(cm_wt2, positive = &quot;TRUE&quot;)$byClass ## Sensitivity Specificity Pos Pred Value ## 0.58134486 0.99285248 0.86771806 ## Neg Pred Value Precision Recall ## 0.96711123 0.86771806 0.58134486 ## F1 Prevalence Detection Rate ## 0.69623400 0.07463023 0.04338590 ## Detection Prevalence Balanced Accuracy ## 0.05000000 0.78709867 2.6 Validation Validation refers to the process and the result of a process where the validity of a model is tested. That is, how well does the model represent reality? There are varying degrees of formality and thoroughness that can be used in validation. While multiple stages of the modeling process can be validated, usually it’s the output of the model that is investigated and reported. You can group initial validation into three broad groups: Expert evaluation, Theoretical Analysis and Prediction Accuracy. Expert Evaluation: In this case, the model output is inspected by an expert user. The first evaluator will be you (the developer), but ideally an outside expert will be utilized. This is often a step in an iterative process. Evaluate the model output, does it make sense, do you see things that need to be improved? Then make changes to the model to improve the output. Theoretical Analysis: compare the results of the model to what is theoretically possible. In systems modeling, this might include diagnostics statistics including residual analysis, cross-correlation of variables and outputs, sensitivity analysis and model analysis such as Akaike Information Criterion (AIC). This can also include simple comparison of output to known possible values. This is especially important for linear regression where the slope of the model is assumed to be steady no matter the values of the dependent variables. Prediction Accuracy: The correctness of the parameter being predicted by the model (soil taxa, property etc.). Ideally this is done with an independent set of data. In soil science, we typically use the term model validation to refer to a statistical analysis that assesses how well a model will predict at an unknown location. A complete model should have a formal statistical evaluation that can be reported and stored as model and output meta-data. That is the portion of validation we will focus. For this discussion, validation can be thought of as an assessment of prediction error and variance. Three types of validation used in the course Internal - Performance on population underlying the sample External - Performance on related (similar/adjacent) but independent population 2.6.1 Internal Validation 2.6.1.1 Split-sample - A single partition of the data into a learning and a calibration set. Achieve an independent validation by partitioning the samples into calibration or training and validation data-sets (70% of the samples available are recommended for calibration) Build model on calibration (training) data-set Test model on validation (test) data-set Report accuracy on the validation data-set This method is relatively simple (conceptually and computationally). Results depend on having an adequate sample size to both develop and test the model. 2.6.1.2 Cross-validation - Alternate development and validation Leave-One-Out Cross-Validation (LOOCV) One observation is used for testing and all others are used to develop model Repeat n (total number of observations) times Average error over n The mean of the accuracy is the expected accuracy of the model (this assumes that new data is from the same population) (Efron, 1983) k-fold Cross-Validation (k-fold) CV Randomly divide observations into calibration and validation sets. Repeat k times, each time one k group is used for error estimates Average error of k Less computationally intensive than LOOCV, but it is more robust and can be done with smaller sample sizes than a simple split. Several R packages have tools to cross-validate predictions, including: DAAG and boot for lm() and glm() objects, caret, rms, ### Linear model example # Create folds folds &lt;- createFolds(1:nrow(sas), k = 10) # Cross validate lm_cv &lt;- lapply(folds, function(x) { train = sas[-x,] test = sas[x,] obs = test$pH_0.30_obs # predict = predict(model, test) pred = test$pH_0.30_pred RMSE = RMSE(pred, obs, na.rm = TRUE) R2 = R2(pred, obs, formula = &quot;traditional&quot;, na.rm = TRUE) return(c(RMSE = RMSE, R2 = R2)) }) # Convert to a data.frame lm_cv &lt;- do.call(rbind, lm_cv) # Summarize results summary(lm_cv) ## RMSE R2 ## Min. :0.4529 Min. :0.8459 ## 1st Qu.:0.4643 1st Qu.:0.8491 ## Median :0.4684 Median :0.8509 ## Mean :0.4689 Mean :0.8526 ## 3rd Qu.:0.4758 3rd Qu.:0.8566 ## Max. :0.4833 Max. :0.8636 2.6.1.3 Subsample (Resampling or sample simulation) In this method, the ‘leave-out’ method can be random (Bootstrap) or observation selection can use a more sophisticated method to select observations to represent the population including Monte Carlo (Molarino, 2005) and .632+bootstrap of Efron &amp; Tibshirani (1997). The details of those aren’t important, except to know that they can give you a better idea of the robustness of your model. As with re-sampling for uncertainty estimation, observations are repeatedly sampled Select a number of samples (Randomly or from known distribution). Develop the model Estimate model accuracy on unselected samples Repeat the process (with independent sample) a large number of times, 500 - 5,000. The expected model accuracy is then the mean of the estimates. NOTE: The BEST model should not be assumed to be the one that makes the ‘truest’ predictions. Beware of over-fitting. When a model is over-fit, it predicts due to very specific “quirks” in the calibration data set and not due to explanatory relationships that will apply to validation and independent data-sets. One strategy to avoid this situation is to build models with as few variables as possible. Parsimonious models (those that use the least amount of information possible to obtain the same result or convey the same meaning) often have higher predicative validity. The use of metrics such as Akaike’s Information Criterion (AIC) can be helpful for balancing error and parameter minimization. 2.6.2 External Validation In this case, an independent data-set is used as the test case. Independent observations predicted with model Errors (ME, RMSE) calculated on predicted vs. actual Some exploratory analysis can be helpful to diagnose and explain model performance. The use of validation will be demonstrated as part of each modeling section. The size of the data-set used, understanding of the variables involved and the nature of the statistical models and algorithms used all influence which validation techniques are most convenient and appropriate. References "],["numerical-tax.html", "Chapter 3 Numerical Taxonomy and Ordination 3.1 Introduction 3.2 Whirlwind Tour 3.3 Excercises 3.4 Practical Applications", " Chapter 3 Numerical Taxonomy and Ordination 3.1 Introduction Nearly every aspect of soil survey involves the question: “Is X more similar to Y or to Z?” The quantification of similarity within a collection of horizons, pedons, components, map units, or even landscapes represents an exciting new way to enhance the precision and accuracy of the day-to-day work of soil scientists. After completing this module, you should be able to quantitatively organize objects based on measured or observed characteristics in a consistent and repeatable manner. Perhaps you will find a solution to the long-standing “similar or dissimilar” question. 3.1.1 Objectives Learn essential vocabulary used in the field of numerical taxonomy. Review some of the literature. Gain experience with R functions and packages commonly used for clustering and ordination. Learn how to create and interpret a distance matrix and appropriate distance metrics. Learn how to create and interpret a dendrogram. Lean the basics and application of hierarchical clustering methods. Lean the basics and application of partitioning clustering methods. Learn the basics and application of ordination methods. Apply skills to a range of data sources for soils and vegetation. Apply techniques from numerical taxonomy to addressing the “similar or dissimilar” question. Learn some strategies for coping with missing data. 3.2 Whirlwind Tour Most of the examples featured in this whirlwind tour are based on soil data from McGahan, D.G., Southard, R.J, Claassen, V.P. 2009. Plant-available calcium varies widely in soils on serpentinite landscapes. Soil Sci. Soc. Am. J. 73: 2087-2095. These data are available in the dataset “sp4” that is built into aqp package for R. 3.2.1 Similarity, Disimilarty, and Distance There are shelves of books and thousands of academic articles describing the theory and applications of “clustering” and “ordination” methods. This body of knowledge is commonly described as the field of numerical taxonomy (Sneath and Sokal 1973). Central to this field is the quantification of similarity among “individuals” based on a relevant set of “characteristics.” Individuals are typically described as rows of data with a single characteristic per column, together referred to as a data matrix. For example: name clay sand Mg Ca CEC_7 A 21 46 25.7 9.0 23.0 ABt 27 42 23.7 5.6 21.4 Bt1 32 40 23.2 1.9 23.7 Bt2 55 27 44.3 0.3 43.0 Quantitative measures of similarity are more conveniently expressed as distance, or dissimilarity; in part because of convention and in part because of computational efficiency. In the simplest case, dissimilarity can be computed as the shortest distance between individuals in property-space. Another name for the shortest linear distance between points is the Euclidean distance. Evaluated in two dimensions (between individuals \\(p\\) and \\(q\\)), the Euclidean distance is calculated as follows: \\[D(p,q) = \\sqrt{(p_{1} - q_{1})^{2} + (p_{2} - q_{2})^{2}}\\] where \\(p_{1}\\) is the 1st characteristic (or dimension) of individual \\(p\\). There are many other ways to define “distance” (e.g. distance metrics), but they will be covered later. Using the sand and clay percentages from the data above, dissimilarity is represented as the length of the line connecting any two individuals in property space. The following is a matrix of all pair-wise distances (the distance matrix): A ABt Bt1 Bt2 A 0.0 7.2 12.5 38.9 ABt 7.2 0.0 5.4 31.8 Bt1 12.5 5.4 0.0 26.4 Bt2 38.9 31.8 26.4 0.0 Note that this is the full form of the distance matrix. In this form, zeros are on the diagonal (i.e. the distance between an individual and itself is zero) and the upper and lower “triangles” are symmetric. The lower triangle is commonly used by most algorithms to encode pair-wise distances. A ABt Bt1 ABt 7.2 Bt1 12.5 5.4 Bt2 38.9 31.8 26.4 Interpretation of the matrix is simple: Individual “A” is more like “ABt” than like “Bt1.” It is important to note that quantification of dissimilarity (distance) among individuals is always relative: “X is more like Y, as compared to Z.” 3.2.1.1 Distances You Can See: Perceptual Color Difference Simulated redoximorphic feature colors, constrast classes and CIE \\(\\Delta{E_{00}}\\). Details here. 3.2.2 Standardization of Characteristics Euclidean distance doesn’t make much sense if the characteristics do not share a common unit of measure or range of values. Nor is it relevant when some characteristics are categorical and some are continuous. For example, distances are distorted if you compare clay (%) and exchangeable Ca (cmol/kg). In this example, exchangeable Ca contributes less to the distance between individuals than clay content, effectively down-weighting the importance of the exchangeable Ca. Typically, characteristics are given equal weight (Sneath and Sokal 1973); however, weighting is much simpler to apply after standardization. Standardization of the data matrix solves the problem of unequal ranges or units of measure, typically by subtraction of the mean and division by standard deviation (z-score transformation). \\[x_{std} = \\frac{x - mean(x)}{sd(x)}\\] There are several other standardization methods covered later. The new data matrix looks like the following: name clay sand Mg Ca CEC_7 A -0.86 0.88 -0.35 1.23 -0.47 ABt -0.45 0.40 -0.55 0.36 -0.63 Bt1 -0.12 0.15 -0.60 -0.59 -0.40 Bt2 1.43 -1.43 1.49 -1.00 1.49 Using the standardized data matrix, distances computed in the property space of clay and exchangeable calcium are unbiased by the unique central tendency or spread of each character. Rarely can the question of “dissimilarity” be answered with only two characteristics (dimensions). Euclidean distance, however, can be extended to an arbitrary number of \\(n\\) dimensions. \\[D(p,q) = \\sqrt{ \\sum_{i=1}^{n}{(p_{i} - q_{i})^{2}} }\\] In the equation above, \\(i\\) is one of \\(n\\) total characteristics. Imagining what distance “looks like” is difficult if there are more than three dimensions. Instead, examine the distance matrix calculated using all five characteristics. Rescaling to the interval {0,1}. You can now begin to describe dissimilarity between individuals using an arbitrary number of (relevant) characteristics. You can make statements like “The A horizon is roughly 2x more similar to the ABt horizon than it is to the Bt horizon.” Although this is a trivial example, the utility of generalizing these methods to soil survey operations should be obvious. 3.2.2.1 Review and Discuss What are the “data matrix” and “distance matrix”? What is standardization, and why is it important? What is the largest impediment to creating a distance matrix from NASIS and KSSL data? Key point: Each characteristic is its own dimension in property-space. Sand, clay, and CEC = 3 dimensions. Sand, clay, CEC, OC, and horizon depth = 5 dimensions. Multiple dimensions are simple to define in code but are hard to visualize. The curse of dimensionality. 3.2.3 Missing Data Missing data are a fact of life. Soil scientists are quite familiar with missing lab data (“Why didn’t we request optical grain counts?”) or missing essential NASIS pedon data elements, such as horizon bottom depth, estimated clay fraction, or pH. Nearly all of the methods described in this document are very sensitive to missing data. In other words, they won’t work! Following are a couple of possible solutions: Fix the missing data if at all possible, Estimate the missing data values from know relationships to other properties or a group-wise mean or median, or Remove records containing any missing data. 3.2.4 Visualizing Pair-Wise Distances: The Dendrogram Dendrograms are a convenient approximation of pair-wise distances between individuals (after application of hierarchical grouping criteria; more on this later). Dissimilarity between branches is proportional to the level at which branches merge: branching at higher levels (relative to the root of the tree) suggests greater dissimilarity; branching at lower levels suggests greater similarity. Consider the previous example in which distance between individuals was defined in terms of sand and clay percentages. Interpretation is simple. Euclidean distance in property-space is directly proportional to branching height in the corresponding dendrogram. Visualizing the geometry of pair-wise distances in more than three dimensions is difficult. A dendrogram, however, can conveniently summarize a distance matrix created from an arbitrary number of characteristics (dimensions). It is important to note that some information about pair-wise distances is lost or distorted in the dendrogram. Distortion is least near the terminal “leaves” of the dendrogram. This phenomena is analogous to the distortion generated by a map projection. It is impossible to flatten a higher-dimensional entity to a lower-dimensional form without causing distortion. 3.2.5 Re-arranging a Dendrogram for Clarity The branches of a dendrogram can be rotated like a mobile, so that the final ordering of the terminal “leaves” approximates an alternate ranking. For example, branches of the following dendrogram (right-hand side) have been rotated to approximate the expected hydrologic gradient from summit to toeslope. 3.2.5.1 Review and Discuss Do you have any questions about dendrogram interpretation? Dendrograms are used extensively in the rest of this chapter. If you were explaining how to interpret a dendrogram to someone, would you start at the roots or leaves? Why? 3.2.6 Cluster Analysis: Finding Groups in Data Cluster analysis is a massive topic that deals with the seemingly simple task of finding useful groups within a dataset. This topic and the methods used are also referred to as “unsupervised classification” in the fields of remote sensing and GIS. All of the available algorithms will find groups in a given dataset; however, it is up to the subject expert to determine the following: Suitable characteristics and standardization method, Appropriate clustering algorithm, Criteria to determine the “right” number of clusters, Limitations of the selected algorithm, Interpretation of the final grouping based on subject knowledge, and The possibility of needing to start over at step 1. 3.2.6.1 Using Color to Communicate Results of Clustering or Ordination Note that the widespread use of color in the following examples is not for aesthetic purposes. Colors are convenient for tri-variate data-spaces because you can visually integrate the information into a self-consistent set of classes. 3.2.6.2 Hierarchical Clustering Hierarchical clustering is useful when a full distance matrix is available and the optimal number of clusters is not yet known. This form of clustering creates a data structure that can encode “grouping” information from one cluster to as many clusters as there are individuals. The expert must determine the optimal place to “cut the tree” and generate a fixed set of clusters. The results from a hierarchical clustering operation are nearly always presented as a dendrogram. 3.2.6.2.1 Methods There are two main types of hierarchical clustering. Agglomerative: Start with individuals and iteratively combine into larger and larger groups. Divisive: Start with all individuals and iteratively split into smaller and smaller groups. Both methods are strongly influenced by the choice of standardization method and distance metric. Both methods require a full, pair-wise distance matrix as input. This requirement can limit the use of hierarchical clustering to datasets that can be fit into memory. The agglomerative methods also depend on the choice of linkage criterion. Some of these criteria include: Average: usually generates spherical clusters, default in agnes() and recommended by (Kaufman and Rousseeuw 2005), Single linkage: usually generates elongated clusters, Complete linkage: usually generates small, compact clusters, Ward’s (minimum variance) method, Weighted average (or Gower’s) linkage: spherical clusters of roughly equal size, and “Flexible strategy”: adjustable linkage based on parameter \\(\\alpha\\). “Flexible UPGMA” (Belbin, Faith, and Milligan 1992): adjustable linkage based on parameter \\(\\beta\\). See (Kaufman and Rousseeuw 2005), (Arkley 1976), (Legendre and Legendre 2012), and agnes() manual page for a detailed description of these linkage criteria. Selection of linkage criteria can be quantitatively evaluated using the cophenetic correlation; and index of how well a dendrogram preserves the original pair-wise distances. This thread on StackExchange has a nice summary of various linkage criteria. I really like these slides by Brian Tibshirani on the topic of agglomerative method selection. More on this later. 3.2.6.2.1.1 Review and Discuss The simplicity and lack of decisions make the divisive method convenient for most work. The top-down approach is similar to the way in which we describe soil morphology and taxonomy. Linkage criteria should be selected based on the hypothesized shape of clusters or prior subject knowledge. When selecting a method, read/think about it; don’t just go “fishing.” Personal opinion: I usually select divisive hierarchical clustering over the other methods: structures seem to be generally more interpretable. 3.2.6.3 Centroid and Medoid (Partitioning) Clustering Centroid and medoid cluster analyses are commonly referred to as k-means-style analysis. “K-means,” however, is just one of many possible clustering algorithms that partition property-space into a fixed number of groups. These type of algorithms can be applied to very large datasets because they do not rely on the distance matrix. Instead, they are based on an iterative shuffling of group “centroids” until some criterion is minimized, for example, the mean variance within groups. 3.2.6.3.1 Methods This section describes three (out of many) of the most important partitioning-type algorithms. K-means: Groups of individuals are partitioned around newly created “centroids”. Resulting clusters approximately spherical and contain an approximately equal number of individuals. K-medoids: Groups of individuals are partitioned around selected “medoids”. Fuzzy clustering: Individuals are assigned a “fuzzy membership” value for each partition of property-space. All of these methods are sensitive to the type of standardization applied to the characteristics. These methods rely on iterative minimization of one or more criteria; therefore, each clustering “run” may generate slightly different output. Most implementations re-run the algorithm until it stabilizes. 3.2.6.3.1.1 Review and Discuss What is the difference between a “medoid” and a “centroid”? Can you think of a way in which both concepts could be applied to the grouping of soils data? medoids are tied to individuals, centroids are hypothetical (calculated) Fuzzy clustering is also referred to as “soft clustering,” while the other two methods are referred to as “hard clustering.” Sometimes, using both can be helpful, especially if individuals straddle the line between groups. Each method has its own strength and weakness, for example here is a nice summary of the limitations of k-means. 3.2.7 Ordination: Visualization in a Reduced Space Humans are generally quite good at extracting spatial patterns, almost instantly, from two dimensional fields: faces, written language, etc. Sadly, this ability does not extend beyond two or three dimensions. The term ordination refers to a suite of methods that project coordinates in a high-dimensional space into suitable coordinates in a low-dimensional (reduced) space. Map projections are a simple form of ordination: coordinates from the curved surface of the Earth are projected to a two-dimensional plane. As with any projection, there are assumptions, limitations, and distortions. Carl Sagan gives a beautiful demonstration of this concept using shadows, in this excerpt from Cosmos. Here is another excellent demonstration based on handwriting recognition. Hole and Hironaka (1960) were some of the first pedologists to apply ordination methods to soils data. The main figure from their classic paper was hand-drawn, based on a physical model (constructed from wooden dowels and spheres!) of the ordination. 3.2.7.1 Major Types of Ordination Of the many possible ordination methods, there are two major types to keep in mind: Constrained ordination: coordinates in the reduced space are subject to some kind of constraint (more rigid, simple interpretation). Principal component analysis (PCA) is one of the simplest and most widely used ordination methods. The reduced space (“principal components”) are defined by linear combinations of characteristics. Unconstrained ordination: coordinates in the reduced space are not subject to any kind of constraint (more flexible, less interpretable). “Non-metric” multidimensional scaling (nMDS) attempts to generate a reduced space that minimizes distortion in proportional similarity; i.e., similar individuals are near each other in the reduced space, dissimilar individuals are farther apart. The “non-metric” adjective implies that exact distances are not preserved. See (Legendre and Legendre 2012) for a comprehensive listing of methods, associated theory, and ecological applications. 3.2.7.2 An Example of nMDS Applied to Soil Data The following example is based on a data matrix containing lab measurements of clay fraction, sand fraction, exchangeable Ca, exchangeable Mg, and CEC measured by NH4-Ac at pH 7. name clay sand Mg Ca CEC_7 A -0.41 0.21 0.06 0.44 -0.23 ABt 0.04 -0.07 -0.06 -0.13 -0.38 Bt1 0.41 -0.21 -0.09 -0.74 -0.16 … … … … … … Note that distances between individuals, within clusters, and between clusters is more apparent in the nMDS representation of the distance matrix. Similar information is embedded in the dendrogram but it is not as intuitive. 3.2.7.2.1 Interpreting the Results We can conveniently annotate the results of an ordination with contextual information, such as the approximate trends in clay content or CEC. Note that ordination methods represent a flattening of multi-dimensional data space, and in the case of nMDS, preserve proportional (vs. exact) pair-wise distances. Therefore, it is quite common for surfaces (the contours below) fit to the 2D ordination to have complex patterns. Putting the clustering results into context is important: recall that we are working with individuals that represent genetic horizons that have been clustered according to 5 physical / chemical properties (characteristics). Differences in CEC by NH4-Ac are one of the strongest contributors to the pair-wise distances and overall clustering structure. 3.2.8 Review and Discuss Which visualization of the distance matrix was simpler to interpret: Dendrogram or ordination by nMDS? Do you have any questions about the figures? Do you have any guesses on what the clusters represent? 3.2.9 Pair-Wise Distances Between Soil Profiles Additional examples / elaboration: A generalized algorithm for determining pair-wise dissimilarity between soil profiles Distances calculated from generalized horizon labels Competing Soil Series AQP Paper, 2013 Maynard et al., 2020 3.2.10 Final Discussion Missing data strategy Meaningful characteristics Standardization of characteristics Distance metric Clustering algorithm Number of clusters Application to soil survey and ESD 3.3 Excercises This is the fun part. 3.3.1 Set Up the R Session Install R packages as needed. Open a new R script file to use as you follow along. # load libraries library(aqp) library(soilDB) library(sharpshootR) library(cluster) library(ape) library(RColorBrewer) library(vegan) library(MASS) library(colorspace) library(viridis) 3.3.1.1 Data Sources Most of the examples used in the following exercises come from these sources: Built-in data sets from the aqp and soilDB packages (“sp4,” “gopheridge,” and “loafercreek”). Results from fetchNASIS(): pedon data from the local NASIS selected set. Results from fetchKSSL(): lab characterization data from the SoilWeb snapshot. Results from fetchOSD(): basic morphologic and taxonomic data from the SoilWeb snapshot. Results from SDA_query(): live SSURGO spatial and tabular data from Soil Data Access Data from SSR 2, as CSV, downloaded from class GitHub site In most cases, you can edit the examples and swap-in just about any data that are in a SoilProfileCollection object. For example, pedons from your local NASIS selected set can be loaded with fetchNASIS(). 3.3.1.1.1 Try it! Tinker with some SoilProfileCollection objects. Get some data using one of the methods listed above. If you need help, see the manual pages for examples (?fetchKSSL) or the SoilProfileCollection tutorial. Determine the number of profiles and horizons within the collection. View and extract some site and horizon attributes. Generate some soil profile sketches. 3.3.2 Evaluating Missing Data The aqp package provides two functions for checking the fraction of missing data within a SoilProfileCollection object. The first function (evalMissingData) generates an index that ranges from 0 (all missing) to 1 (all present) for each profile. This index can be used to subset or rank profiles for further investigation. The second function (missingDataGrid) creates a visualization of the fraction of data missing within each horizon. Both functions can optionally filter-out horizons that don’t typically have data, for example Cr, Cd, and R horizons. The following examples are based on the gopheridge sample dataset. evalMissingData # example data data(&quot;gopheridge&quot;, package = &quot;soilDB&quot;) # compute data completeness gopheridge$data.complete &lt;- evalMissingData(gopheridge, vars = c(&#39;clay&#39;, &#39;sand&#39;, &#39;phfield&#39;), name = &#39;hzname&#39;, p = &#39;Cr|R|Cd&#39;) # check range in missing data summary(gopheridge$data.complete) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.2143 0.4672 1.0000 1.0000 # rank new.order &lt;- order(gopheridge$data.complete) # plot along data completeness ranking par(mar=c(3,0,1,1)) plot(gopheridge, plot.order=new.order, print.id=FALSE, name=&#39;&#39;) # add axis, note re-ordering of axis labels axis(side=1, at=1:length(gopheridge), labels = round(gopheridge$data.complete[new.order], 2), line=-2, cex.axis=0.65, las=2) title(&#39;Gopheridge pedons sorted according to data completeness (clay, sand, pH)&#39;) missingDataGrid # view missing data as a fraction res &lt;- missingDataGrid(gopheridge, max_depth=100, vars=c(&#39;clay&#39;, &#39;sand&#39;, &#39;phfield&#39;), filter.column=&#39;hzname&#39;, filter.regex = &#39;Cr|R|Cd&#39;, main=&#39;Fraction of missing data (clay, sand, pH)&#39;, cols = viridis(10)) # plot figure print(res$fig) # check results head(res$summary) ## peiid clay sand phfield ## 1 1137354 0 100 100 ## 2 1147151 0 0 100 ## 3 1147190 0 0 100 ## 4 242808 29 29 0 ## 5 252851 29 29 29 ## 6 268791 0 0 0 For now, extract those profiles that have a complete set of field-described clay, sand, or pH values for later use. # be sure to read the manual page for this function gopheridge.complete &lt;- subset(gopheridge, data.complete &gt; 0.99) # another way idx &lt;- which(gopheridge$data.complete &gt; 0.99) gopheridge.complete &lt;- gopheridge[idx, ] # looks good par(mar=c(0,0,3,1)) plot(gopheridge.complete, color=&#39;clay&#39;, id.style=&#39;side&#39;, label=&#39;pedon_id&#39;) 3.3.3 More on the Distance Matrix and How to Make One The following three functions are essential to the creation of a distance matrix: dist(): This function is in base R, is simple and fast, and has a limited number of distance metrics. daisy(): This function is in cluster package, has a better selection of distance metrics, and has simple standardization. Much more convenient than dist(). vegdist(): This function is in vegan package, has many distance metrics, and is primarily designed for species composition data. The following is a short demonstration: # get some example data from the aqp package data(&#39;sp4&#39;, package = &#39;aqp&#39;) # subset select rows and columns sp4 &lt;- sp4[1:4, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] row.names(sp4) &lt;- sp4$name # compare distance functions # Euclidean distance, no standardization round(dist(sp4[, -1], method = &#39;euclidean&#39;)) ## A ABt Bt1 ## ABt 8 ## Bt1 15 7 ## Bt2 48 44 39 # Euclidean distance, standardization round(daisy(sp4[, -1], stand = TRUE, metric = &#39;euclidean&#39;), 2) ## Dissimilarities : ## A ABt Bt1 ## ABt 1.45 ## Bt1 2.73 1.36 ## Bt2 6.45 5.65 4.91 ## ## Metric : euclidean ## Number of objects : 4 # Gower&#39;s generalized distance metric (includes standardization) round(vegdist(sp4[, -1], method = &#39;gower&#39;), 2) ## A ABt Bt1 ## ABt 0.19 ## Bt1 0.32 0.16 ## Bt2 0.96 0.84 0.69 3.3.3.1 Distance Calculations with Categorical Data The following example is excerpted from “A Novel Display of Categorical Pedon Data”. This example illustrates an application of clustering binary data (presence or absence of a diagnostic feature). Internally, the diagnosticPropertyPlot() function uses the daisy() function to compute pair-wise distances using the “general dissimilarity coefficient” of Gower (Gower 1971). A concise summary of this distance metric is in (Kaufman and Rousseeuw 2005). # load some example NASIS data data(loafercreek, package=&#39;soilDB&#39;) hzdesgnname(loafercreek) &lt;- &#39;hzname&#39; # cut-down to a subset, first 20 pedons loafercreek &lt;- loafercreek[1:20, ] # get depth class sdc &lt;- getSoilDepthClass(loafercreek) site(loafercreek) &lt;- sdc # diagnostic properties to consider, no need to convert to factors v &lt;- c(&#39;lithic.contact&#39;, &#39;paralithic.contact&#39;, &#39;argillic.horizon&#39;, &#39;cambic.horizon&#39;, &#39;ochric.epipedon&#39;, &#39;mollic.epipedon&#39;, &#39;very.shallow&#39;, &#39;shallow&#39;, &#39;mod.deep&#39;, &#39;deep&#39;, &#39;very.deep&#39;) # do the analysis and save the results to object &#39;x&#39; x &lt;- diagnosticPropertyPlot(loafercreek, v, k=5, grid.label=&#39;bedrckkind&#39;, dend.label = &#39;taxonname&#39;) If you are wondering what is in the object x, the str() function or manual page (?diagnosticPropertyPlot) can help. 3.3.4 Hierachrical Clustering The go-to functions for hierarchical clustering are as follows: hclust(): This function is agglomerative, is in base R, requires a distance matrix, and implements most of the commonly used linkage criteria. agnes(): This function is agglomerative, is in cluster package, can perform standardization and distance calculations, and implements more linkage criteria. diana(): This function is divisive, is in cluster package, can perform standardization and distance calculations. 3.3.4.1 Basic Agglomerative Hierarchical Clustering with hclust The hclust() function and resulting hclust-class objects are simple to use, but limited. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] # distance matrix d &lt;- daisy(sp4[, -1], metric = &#39;euclidean&#39;, stand = TRUE) # hierachical clustering with base function hclust sp4.h &lt;- hclust(d, method = &#39;ward.D&#39;) sp4.h$labels &lt;- sp4$name # plot with basic plotting method... not many options here par(mar=c(2,4,2,2)) plot(sp4.h, font=2, cex=0.85) # ID clusters after cutting tree rect.hclust(sp4.h, 4) 3.3.4.2 Better Plots via ape Package This example uses a different approach to plotting based on functions and classes from the ape package. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] # distance matrix d &lt;- daisy(sp4[, -1], metric = &#39;euclidean&#39;, stand = TRUE) # divising clustering dd &lt;- diana(d) # convert to ape class, via hclust class h &lt;- as.hclust(dd) h$labels &lt;- sp4$name p &lt;- as.phylo(h) # define some nice colors col.set &lt;- brewer.pal(9, &#39;Set1&#39;) # cut tree into 4 groups groups &lt;- cutree(h, 4) # make color vector based on groups cols &lt;- col.set[groups] The plot methods for phylo class objects are quite flexible. Be sure to see the manual page ?plot.phylo. par(mar=c(1,1,1,1), mfcol=c(2,2)) plot(p, label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.85, main=&#39;dendrogram&#39;) tiplabels(pch=15, col=cols) plot(p, type=&#39;radial&#39;, font=1, cex=0.85, main=&#39;radial&#39;) tiplabels(pch=15, col=cols) plot(p, type=&#39;fan&#39;, font=1, cex=0.85, main=&#39;fan&#39;) tiplabels(pch=15, col=cols) plot(p, type=&#39;unrooted&#39;, font=1, cex=0.85, main=&#39;unrooted&#39;) tiplabels(pch=15, col=cols) 3.3.4.3 Evaluation of Dendrogram Representation Re-visiting our sample data from before, develop hierarchical clusterings using several strategies (methods / linkage criteria). # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] # distance matrix d &lt;- daisy(sp4[, -1], metric = &#39;euclidean&#39;, stand = TRUE) # hierarchical clustering based on several strategies # agglomerative h.avg &lt;- agnes(d, method=&#39;average&#39;) h.single &lt;- agnes(d, method=&#39;single&#39;) h.complete &lt;- agnes(d, method=&#39;complete&#39;) h.ward &lt;- agnes(d, method=&#39;ward&#39;) h.flexible &lt;- agnes(d, method=&#39;gaverage&#39;, par.method = 0.01) # divisive h.div &lt;- diana(d) The correlation between original distance matrix and cophenetic distance matrix is a reasonable index of how faithfully a dendrogram preserves the original pair-wise distances. # agglomerative hierarchical clustering with various linkage criteria corr.avg &lt;- cor(d, cophenetic(h.avg)) corr.single &lt;- cor(d, cophenetic(h.single)) corr.complete &lt;- cor(d, cophenetic(h.complete)) corr.ward &lt;- cor(d, cophenetic(h.ward)) corr.flexible &lt;- cor(d, cophenetic(h.flexible)) # divisive hierarchical clustering corr.div &lt;- cor(d, cophenetic(h.div)) Combine the results into a table for quick comparison. Note that the agnes and diana functions provide an agglomerative / divisive coefficient that can be used to evaluate clustering efficiency (e.g. cluster size and “compactness”). Depending on the application, one metric may be more informative than the other. res &lt;- data.frame( method=c(&#39;average&#39;, &#39;single&#39;, &#39;complete&#39;, &#39;ward&#39;, &#39;flexible UPGMA&#39;, &#39;divisive&#39;), cophenetic.correlation=c(corr.avg, corr.single, corr.complete, corr.ward, corr.flexible, corr.div), agg_div.coefficient=c(h.avg$ac, h.single$ac, h.complete$ac, h.ward$ac, h.flexible$ac, h.div$dc) ) # re-order res &lt;- res[order(res$cophenetic.correlation, decreasing = TRUE), ] method cophenetic.correlation agg_div.coefficient average 0.840 0.787 flexible UPGMA 0.840 0.778 single 0.784 0.613 complete 0.759 0.879 ward 0.756 0.894 divisive 0.703 0.874 Investigate differences graphically: I’ve ranked according to the frequency withwhich I use the various methods. par(mar=c(0,0.25,1.5,0.25), mfrow=c(2,3)) plot(as.phylo(as.hclust(h.div)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.75, main=&#39;1. Divisive&#39;, cex.main = 1.75) tiplabels(pch=15, col=col.set[cutree(h.div, 4)], cex = 1.5) plot(as.phylo(as.hclust(h.ward)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.75, main=&#39;2. Ward&#39;, cex.main = 1.75) tiplabels(pch=15, col=col.set[cutree(h.ward, 4)], cex = 1.5) plot(as.phylo(as.hclust(h.flexible)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.75, main=&#39;3. Flexible (0.01)&#39;, cex.main = 1.75) tiplabels(pch=15, col=col.set[cutree(h.flexible, 4)], cex = 1.5) plot(as.phylo(as.hclust(h.avg)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.75, main=&#39;4. Average&#39;, cex.main = 1.75) tiplabels(pch=15, col=col.set[cutree(h.avg, 4)], cex = 1.5) plot(as.phylo(as.hclust(h.single)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.75, main=&#39;(never) Single&#39;, cex.main = 1.75) tiplabels(pch=15, col=col.set[cutree(h.single, 4)], cex = 1.5) plot(as.phylo(as.hclust(h.complete)), label.offset=0.125, direction=&#39;right&#39;, font=1, cex=0.75, main=&#39;(never) Complete&#39;, cex.main = 1.75) tiplabels(pch=15, col=col.set[cutree(h.complete, 4)], cex = 1.5) 3.3.4.3.1 More on the Flexible UPGMA method Test the “flexible UPGMA” method (Belbin, Faith, and Milligan 1992) by iterating over possible values for \\(\\beta\\). Looks like a value near 0.01 would be ideal (e.g. highest cophenetic correlation). Interestingly, this is very close to the cophenetic correlation associated with the “average” linkage criteria. # init a sequence spanning -1 to 1 beta &lt;- seq(from=-1, to=1, length.out = 100) # init an empty vector to store results r &lt;- vector(mode=&#39;numeric&#39;, length = length(beta)) # iterate over values of beta and compute cophenetic correlation for(i in 1:length(r)) { r[i] &lt;- cor(d, cophenetic(agnes(d, method=&#39;gaverage&#39;, par.method = beta[i]))) } # plot par(mar=c(5,5,1,1)) plot(beta, r, type=&#39;l&#39;, xlab=&#39;beta parameter&#39;, ylab=&#39;cophenetic correlation&#39;, pch=16, las=1) # locate the max coph. corr. idx &lt;- which.max(r) # mark this point and label points(beta[idx], r[idx], col=&#39;red&#39;, cex=2, lwd=2) text(beta[idx], r[idx], labels = round(beta[idx], 3), pos=4) 3.3.5 Centroid and Medoid (Partitioning) Clustering The following creates simulated data for demonstration purposes, representing two populations: mean = 0, sd = 0.3 mean = 1, sd = 0.3 # nice colors for later col.set &lt;- brewer.pal(9, &#39;Set1&#39;) # 2D example x &lt;- rbind( matrix(rnorm(100, mean = 0, sd = 0.3), ncol = 2), matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2) ) colnames(x) &lt;- c(&quot;x&quot;, &quot;y&quot;) 3.3.5.1 Hard Classes 3.3.5.1.1 K-Means It is important to note that the k-means algorithm is sensitive to the initial selection of centroid locations (typically random). The default behavior of the kmeans() function does not attempt to correct for this limitation. Note that cluster assignment and centroid vary across runs (panels in the figure below). par(mfrow=c(3,3), mar=c(1,1,1,1)) for(i in 1:9) { cl &lt;- kmeans(x, centers=3) plot(x, col = col.set[cl$cluster], axes=FALSE) grid() points(cl$centers, col = col.set, pch = 8, cex = 2, lwd=2) box() } Setting the nstart argument (“number of random starts”) to a value great than 1 (10 is ideal) will ensure that the final clustering configuration will remain stable between runs. Note that the cluster ID (color) will vary between runs, however, with nstart=10 the overall configuration remains the same. par(mfrow=c(3,3), mar=c(1,1,1,1)) for(i in 1:9) { cl &lt;- kmeans(x, centers=3, nstart = 10, iter.max = 100) plot(x, col = col.set[cl$cluster], axes=FALSE) grid() points(cl$centers, col = col.set, pch = 8, cex = 2, lwd=2) box() } 3.3.5.1.2 K-Medoids The cluster package provides two interfaces to the k-medoids algorithm: pam(): small to medium sized data sets clara(): optmized for larger data sets A quick example of using pam() to identify an increasing number of clusters. par(mfrow=c(2,3), mar=c(1,1,1,1)) for(i in 2:7) { cl &lt;- pam(x, k = i, stand = TRUE) plot(x, col = col.set[cl$clustering], axes=FALSE) grid() points(cl$medoids, col = col.set, pch = 0, cex = 2, lwd=2) box() } 3.3.5.2 Fuzzy Clusters Clustering results are in the form of class membership; values ranging between 0 and 1. This means that group membership is a continuum vs. the “hard” classes assigned by k-means or k-medoids. The “mixture” of class membership in the example below is conveniently expressed using proportions of red, green, and blue. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4.std &lt;- data.frame(sp4[, c(&#39;id&#39;, &#39;name&#39;, &#39;top&#39;, &#39;bottom&#39;)], scale( sp4[, c(&#39;Mg&#39;, &#39;Ca&#39;)])) # perform fuzzy clustering cl &lt;- fanny(sp4.std[, c(&#39;Mg&#39;, &#39;Ca&#39;)], k = 3, stand = FALSE) # get membership matrix m &lt;- cl$membership # convert to colors by interpreting membership as R,G,B proportions cols &lt;- rgb(m) # use Shannon H to set symbol size H &lt;- apply(m, 1, shannonEntropy) # larger H -&gt; smaller symbols pt.cex &lt;- (1/H) * 2.5 # setup plot par(mar=c(4,4,0,0)) plot(sp4.std$Mg, sp4.std$Ca, asp=1, ylab=&#39;Exchangeable Mg (cmol/kg), Standardized&#39;, xlab=&#39;Exchangeable Ca (cmol/kg), Standardized&#39;, type=&#39;n&#39;) abline(h=0, v=0, col=&#39;black&#39;) grid() # add original obs points(sp4.std$Mg, sp4.std$Ca, bg=cols, col=&#39;black&#39;, cex = pt.cex, pch = 21) Save the RGB color representation of cluster membership to the source data.frame and convert to SoilProfileCollection. sp4.std$colors &lt;- cols depths(sp4.std) &lt;- id ~ top + bottom par(mar=c(0,0,0,0)) plot(sp4.std, color=&#39;colors&#39;, cex.names=0.75) title(&#39;Fuzzy Clustering Results in Context&#39;, line=-1) From the source: Of the 11 parent materials, 9 were serpentinites. The parent materials in Napa and Tehama Counties were quite different from each other and from those of the nine other sites. Neither had parent rock that contained serpentine minerals. They were, therefore, not serpentinites. The Napa County parent material contained dominantly vermiculite and albite and had minor amounts of Ca-bearing clino-pyroxene. The Tehama County parent material was dominated by grossularite, which is a calcsilicate ugrandite garnet, and had subdominant amounts of the Ca-bearing sorosilicate, pumpellyite, and Ca-bearing clinopyroxene. The rocks from the Shasta and Kings County sites were serpentinite, dominated by serpentine minerals. They had minor amounts of Ca-bearing accessory minerals (calcic clinoamphibole [tremolite] and calcsilicate ugrandite garnet [andradite]). The seven other parent materials were serpentinites and exhibited, at most, trace amounts of Ca-bearing minerals. 3.3.5.3 How Many Clusters? There is no simple answer to the question “How many clusters are in my data?” Some metrics, however, can be used to help estimate a “reasonable” number of clusters. The mean silhouette width is a useful index of “cluster compactness” relative to neighbor clusters (Rousseeuw 1987). Larger silhouette widths suggest tighter grouping. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4.std &lt;- data.frame(sp4[, c(&#39;id&#39;, &#39;name&#39;, &#39;top&#39;, &#39;bottom&#39;)], scale( sp4[, c(&#39;Mg&#39;, &#39;Ca&#39;)])) # perform hard clustering sil.widths &lt;- vector(mode=&#39;numeric&#39;) for(i in 2:10) { cl &lt;- pam(sp4.std[, c(&#39;Mg&#39;, &#39;Ca&#39;)], k = i, stand = FALSE) sil.widths[i] &lt;- cl$silinfo$avg.width } par(mar=c(4,4,3,1)) plot(sil.widths, type=&#39;b&#39;, xlab=&#39;Number of Clusters&#39;, ylab=&#39;Average Silhouette Width&#39;, las=1, lwd=2, col=&#39;RoyalBlue&#39;, cex=1.25, main=&#39;Finding the &quot;Right&quot; Number of Clusters&#39;) grid() According to this metric, it looks like 3 clusters is reasonable. Again, this is a judgement call–most decisions related to clustering algorithm selection and the “optimal number of clusters” are somewhat subjective. # perform fuzzy clustering cl &lt;- pam(sp4.std[, c(&#39;Mg&#39;, &#39;Ca&#39;)], k = 3, stand = FALSE) # setup plot par(mar=c(4,4,0,0)) plot(sp4.std$Mg, sp4.std$Ca, asp=1, ylab=&#39;Exchangeable Mg (cmol/kg), Standardized&#39;, xlab=&#39;Exchangeable Ca (cmol/kg), Standardized&#39;, type=&#39;n&#39;) abline(h=0, v=0, col=&#39;black&#39;) grid() # add original obs points(sp4.std$Mg, sp4.std$Ca, bg=cl$clustering, col=&#39;black&#39;, cex=1.25, pch=21) TODO: other cluster metrics packages 3.3.6 Ordination 3.3.6.1 Principal Component Analysis A simple, constrained ordination based on variance. This method does not use the distance matrix, rather it seeks to find a new set of axes that describe maximum variance via linear combinations of characteristics. Standardization is essential. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] sp4.scaled &lt;- data.frame(name=sp4[, 1], round(scale( sp4[, -1]), 2)) # PCA # note that we are leaving out the first column: the horizon names # note the syntax used to extract the principal components # note that PCA doesn&#39;t use the distance matrix pca &lt;- predict(princomp(sp4.scaled[, -1])) ## perform clustering to highlight structure in the PCA # distance matrix d &lt;- dist(sp4.scaled[, -1]) m &lt;- as.matrix(d) dimnames(m) &lt;- list(sp4.scaled$name, sp4.scaled$name) d &lt;- as.dist(m) # dendrogram from divisive clustering dd &lt;- diana(d) h &lt;- as.hclust(dd) p &lt;- as.phylo(h) # define colors based on cutting a divisive hierarchical clustering into 4 groups cols &lt;- brewer.pal(9, &#39;Set1&#39;)[cutree(h, 4)] # plot first 2 PC plot(pca[, 1:2], asp=1, type=&#39;n&#39;, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, main=&quot;Principal Components 1 and 2&quot;) grid() text(pca[, 1:2], sp4.scaled$name, cex=0.75, col=cols, font=2) box() 3.3.6.2 Sammon’s Non-linear Mapping Simple interface to nMDS, input is a distance matrix. Note that this algorithm will fail if there are 0’s or ties within the distance matrix. See ?sammon for details. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] sp4.scaled &lt;- data.frame(name=sp4[, 1], round(scale( sp4[, -1]), 2)) # distance matrix d &lt;- dist(sp4.scaled[, -1]) m &lt;- as.matrix(d) dimnames(m) &lt;- list(sp4.scaled$name, sp4.scaled$name) d &lt;- as.dist(m) # dendrogram from divisive clustering dd &lt;- diana(d) h &lt;- as.hclust(dd) p &lt;- as.phylo(h) # define colors based on cutting a divisive hierarchical clustering into 4 groups cols &lt;- brewer.pal(9, &#39;Set1&#39;)[cutree(h, 4)] # nMDS from distance matrix s &lt;- sammon(d) # plot par(mar=c(3,1,3,1)) plot(s$points, asp=1, type=&#39;n&#39;, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, main=&quot;nMDS by Sammon&#39;s Non-Linear Mapping&quot;) # abline(v=0, h=0, col=&#39;black&#39;) grid() text(s$points, rownames(s$points), cex=0.75, col=cols, font=2) box() 3.3.6.3 nMDS with the vegan Package The following example is quite brief. See the Introduction to ordination in vegan vignette for some excellent worked examples and ecological interpretation. The vegan package FAQ is another excellent resource. Numerical Ecology with R can be used as both reference and learning resource. The metaMDS() function from the vegan package provides a convenience function that automates most of the steps required to create an oridination. # re-make data, this time with all profiles data(&#39;sp4&#39;, package = &#39;aqp&#39;) sp4 &lt;- sp4[, c(&#39;name&#39;, &#39;clay&#39;, &#39;sand&#39;, &#39;Mg&#39;, &#39;Ca&#39;, &#39;CEC_7&#39;)] sp4.scaled &lt;- data.frame(name=sp4[, 1], round(scale( sp4[, -1]), 2)) # define colors based on natural groupings cols &lt;- brewer.pal(9, &#39;Set1&#39;) # distance calc + ordination s &lt;- metaMDS(sp4.scaled[, -1], distance = &#39;gower&#39;, autotransform = FALSE, wascores=FALSE) ## this is used to generate 4 classes from a divisive hierarchical clustering # manually compute distance matrix d &lt;- dist(sp4.scaled[, -1]) m &lt;- as.matrix(d) dimnames(m) &lt;- list(sp4.scaled$name, sp4.scaled$name) d &lt;- as.dist(m) # dendrogram from divisive clustering dd &lt;- diana(d) h &lt;- as.hclust(dd) # define colors based on cutting a divisive hierarchical clustering into 4 groups cols &lt;- brewer.pal(9, &#39;Set1&#39;)[cutree(h, 4)] # plot ordination par(mar=c(3,1,3,1)) fig &lt;- ordiplot(s, type=&#39;none&#39;, cex.axis=0.75, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, main=&#39;nMDS by metaMDS()&#39;) abline(h=0, v=0, lty=2, col=&#39;grey&#39;) text(fig$sites, sp4$name, cex=0.75, font=2, col=cols) box() It is also possible to annotate an ordination using information from a hierarchical clustering via vegan::ordicluster. par(mfcol = c(1, 2), mar=c(3,1,3,1)) fig &lt;- ordiplot(s, type=&#39;none&#39;, cex.axis=0.75, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, main=&#39;nMDS by metaMDS()&#39;) abline(h=0, v=0, lty=2, col=&#39;grey&#39;) text(fig$sites, sp4$name, cex=0.75, font=2, col=cols) # annotate with hierarchical clustering ordicluster(fig, h, prune=3, col = &quot;black&quot;) box() p &lt;- as.phylo(h) plot(p, cex = 0.66, label.offset = 0.5) tiplabels(, pch = 15, col = cols) Goodness of nMDS fit at each point (scaled and sqrt-transformed). Smaller symbols suggest better fit. pt.cex &lt;- sqrt(goodness(s) * 50) par(mar=c(3,1,3,1)) fig &lt;- ordiplot(s, type=&#39;none&#39;, cex.axis=0.75, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, main=&#39;nMDS by metaMDS()&#39;) abline(h=0, v=0, lty=2, col=&#39;grey&#39;) text(fig$sites, sp4$name, font=2, col=cols, cex = pt.cex) # ordicluster(fig, agnes(daisy(sp4.scaled[, -1]), method=&#39;ward&#39;), prune=3, col = &quot;orange&quot;) box() The Shepard diagram (stress plot) is used to assess the quality of a nMDS ordination. There should be as little scatter as possible in this diagram. stressplot(s) 3.3.6.4 Rotations Mapping from one ordination to another: Procrustes_analysis. See the color contrast tutorial for some applications. 3.4 Practical Applications Before you work through the following examples, you should review the SoilProfileCollection object tutorial. 3.4.1 Pair-Wise Distances Between Soil Profiles # init example data data(sp4) depths(sp4) &lt;- id ~ top + bottom # eval dissimilarity: # using Ex-Ca:Mg and CEC at pH 7 # with no depth-weighting (k=0) # to a maximum depth of 40 cm d &lt;- profile_compare(sp4, vars=c(&#39;ex_Ca_to_Mg&#39;, &#39;CEC_7&#39;), k=0, max_d=40) # check distance matrix: round(d, 1) ## Dissimilarities : ## colusa glenn kings mariposa mendocino napa san benito shasta ## glenn 13.5 ## kings 16.0 12.7 ## mariposa 8.4 11.3 16.5 ## mendocino 11.5 8.0 16.4 15.0 ## napa 30.4 24.1 29.4 29.2 21.6 ## san benito 25.7 20.6 26.3 28.2 15.8 18.0 ## shasta 17.2 13.3 8.7 17.6 17.1 33.7 22.2 ## shasta-trinity 6.4 16.6 22.3 9.6 16.5 29.8 27.2 23.3 ## tehama 28.7 22.9 27.9 27.3 20.0 8.8 15.1 31.4 ## shasta-trinity ## glenn ## kings ## mariposa ## mendocino ## napa ## san benito ## shasta ## shasta-trinity ## tehama 27.9 ## ## Metric : mixed ; Types = I, I ## Number of objects : 10 # cluster via divisive method clust &lt;- diana(d) # visualize dissimilarity matrix via hierarchical clustering par(mar=c(0,0,3,1)) plotProfileDendrogram(sp4, clust, dend.y.scale = 50, scaling.factor = 0.66, y.offset = 3.5, width=0.3, cex.names = 0.7, color=&#39;ex_Ca_to_Mg&#39;, col.label=&#39;Exchageable Ca to Mg Ratio&#39;, name.style = &#39;center-center&#39;) 3.4.2 Pair-Wise Distances Between Soil Series The following figures are related to some of the graphical summaries provided by SoilWeb/SDE. These related tutorials cover similar material in greater detail: Competing Soil Series Querying Soil Series Data The fetchOSD function can return additional summaries tabulated from climate data, MLRA boundaries, SSURGO, and much more with the extended=TRUE argument. Lets experiment with distances computed from annual climate data and hillslope position. # soil series from around CONUS soils &lt;- c(&#39;redding&#39;, &#39;pentz&#39;, &#39;willows&#39;, &#39;yolo&#39;, &#39;hanford&#39;, &#39;cecil&#39;, &#39;sycamore&#39;, &#39;KLAMATH&#39;, &#39;drummer&#39;, &#39;musick&#39;, &#39;zook&#39;) s &lt;- fetchOSD(soils, extended = TRUE) # note additional data, packed into a list str(s, 1) ## List of 17 ## $ SPC :Formal class &#39;SoilProfileCollection&#39; [package &quot;aqp&quot;] with 9 slots ## $ competing :&#39;data.frame&#39;: 57 obs. of 3 variables: ## $ geog_assoc_soils:&#39;data.frame&#39;: 83 obs. of 2 variables: ## $ geomcomp :&#39;data.frame&#39;: 9 obs. of 9 variables: ## $ hillpos :&#39;data.frame&#39;: 10 obs. of 8 variables: ## $ mtnpos :&#39;data.frame&#39;: 2 obs. of 9 variables: ## $ terrace :&#39;data.frame&#39;: 8 obs. of 5 variables: ## $ flats :&#39;data.frame&#39;: 7 obs. of 7 variables: ## $ shape_across :&#39;data.frame&#39;: 11 obs. of 8 variables: ## $ shape_down :&#39;data.frame&#39;: 11 obs. of 8 variables: ## $ pmkind :&#39;data.frame&#39;: 19 obs. of 5 variables: ## $ pmorigin :&#39;data.frame&#39;: 44 obs. of 5 variables: ## $ mlra :&#39;data.frame&#39;: 67 obs. of 4 variables: ## $ climate.annual :&#39;data.frame&#39;: 88 obs. of 12 variables: ## $ climate.monthly :&#39;data.frame&#39;: 264 obs. of 14 variables: ## $ NCCPI :&#39;data.frame&#39;: 11 obs. of 16 variables: ## $ soilweb.metadata:&#39;data.frame&#39;: 20 obs. of 2 variables: 3.4.2.1 Annual Climate Data The vizAnnualClimate function (sharpshootR package) arranges percentiles of annual climate summaries according to divisive hierarchical clustering applied to median values. Climate summaries were derived from 800m, daily PRISM data spanning 1981-2010. # control color like this trellis.par.set(plot.line=list(col=&#39;RoyalBlue&#39;)) # control centers symbol and size here res &lt;- vizAnnualClimate(s$climate.annual, IQR.cex = 1.25, cex=1.1, pch=18) # plot figure, this is Lattice graphics print(res$fig) # do something with clustering par(mar=c(0,0,1,0)) # usually requires tinkering... plotProfileDendrogram(s$SPC, clust = res$clust, scaling.factor = 0.05, width = 0.3, y.offset = 1.3, name.style = &#39;center-center&#39;, cex.names = 0.75, hz.depths = TRUE, plot.depth.axis = FALSE, fixLabelCollisions = TRUE, hz.depths.offset = 0.05) mtext(&#39;sorted by annual climate summaries&#39;, side = 3, at = 0.5, adj = 0, line = -1.5, font=3) 3.4.2.2 Hillslope Position The vizHillslopePosition function (sharpshootR package) arranges hillslope position proportions (SSURGO) according to divisive hierarchical clustering. Proportions are used as characteristics for each soil series. The branches of the dendrogram are rotated so that ordering within the figure approximates the hydrologic gradient as closely as possible. Rotation is performed by the dendextend::rotate function. # result is a lattice graphics object res &lt;- vizHillslopePosition(s$hillpos) print(res$fig) 3.4.3 Pair-Wise Distances Between Subgroup-Level Taxa The following are demonstrations of pair-wise distances computed from categorical data and the use of a dendrogram to organize groups from Soil Taxonomy. Click here for details. # define a vector of series s.list &lt;- c(&#39;amador&#39;, &#39;redding&#39;, &#39;pentz&#39;, &#39;willows&#39;, &#39;pardee&#39;, &#39;yolo&#39;, &#39;hanford&#39;, &#39;cecil&#39;, &#39;sycamore&#39;, &#39;KLAMATH&#39;, &#39;MOGLIA&#39;, &#39;drummer&#39;, &#39;musick&#39;, &#39;zook&#39;, &#39;argonaut&#39;, &#39;PALAU&#39;) # get and SPC object with basic data on these series s &lt;- fetchOSD(s.list) # graphical check par(mar=c(0,0,2,1)) plotSPC(s, cex.names = 0.66) title(&#39;Selected Pedons from Official Series Descriptions&#39;, line=0) # check structure of some site-level attributes # head(site(s))[, c(&#39;id&#39;, &#39;soilorder&#39;, &#39;suborder&#39;, &#39;greatgroup&#39;, &#39;subgroup&#39;)]) id soilorder suborder greatgroup subgroup AMADOR inceptisols xerepts haploxerepts typic haploxerepts ARGONAUT alfisols xeralfs haploxeralfs mollic haploxeralfs CECIL ultisols udults kanhapludults typic kanhapludults DRUMMER mollisols aquolls endoaquolls typic endoaquolls HANFORD entisols orthents xerorthents typic xerorthents KLAMATH mollisols aquolls cryaquolls cumulic cryaquolls par(mar=c(0,1,1,2)) # plot dendrogram + profiles d &lt;- SoilTaxonomyDendrogram(s, scaling.factor = 0.01, width=0.2, cex.names=0.5, axis.line.offset = -2.5) Check the resulting distance matrix. print(d) 3.4.4 Soil Color Signatures See this related tutorial for additional examples. # manually convert Munsell -&gt; sRGB rgb.data &lt;- munsell2rgb(s$hue, s$value, s$chroma, return_triplets = TRUE) s$r &lt;- rgb.data$r s$g &lt;- rgb.data$g s$b &lt;- rgb.data$b # eval color signature pig &lt;- soilColorSignature(s, RescaleLightnessBy = 5, method=&#39;depthSlices&#39;) # display results as table kable_styling(knitr::kable(head(pig), digits = 2, row.names = FALSE), font_size = 10) id A.0.1 A.0.5 A.0.9 B.0.1 B.0.5 B.0.9 L.0.1 L.0.5 L.0.9 AMADOR 3.66 4.85 1.92 13.22 18.89 27.80 8.18 10.28 14.31 ARGONAUT 13.39 19.09 15.78 19.32 29.87 17.51 6.05 6.05 8.18 CECIL 7.33 32.70 28.55 25.85 29.32 35.60 8.19 8.18 8.19 DRUMMER 2.13 1.47 1.47 5.23 6.14 6.14 3.93 8.18 8.18 HANFORD 5.60 5.60 6.59 19.73 19.73 25.40 8.19 8.19 10.28 KLAMATH 2.13 2.13 10.31 5.23 5.23 37.50 3.93 3.93 8.19 # move row names over for distance matrix row.names(pig) &lt;- pig[, 1] d &lt;- daisy(pig[, -1]) dd &lt;- diana(d) # plot par(mar=c(0,0,0.25,1)) plotProfileDendrogram(s, dd, dend.y.scale = max(d) * 2, scaling.factor = 0.3, y.offset = 6, width=0.35, cex.names = 0.6, name.style = &#39;center-center&#39;) 3.4.5 Clustering of Soil Colors Just for fun, use hierarchical clustering and nMDS on soil color data from the OSDs that were used in the previous example. # extract horizon data from select OSDs in above example h &lt;- horizons(s) # convert Munsell color notation to sRGB # these are moist colors rgb.data &lt;- munsell2rgb(h$hue, h$value, h$chroma, return_triplets = TRUE) lab.data &lt;- munsell2rgb(h$hue, h$value, h$chroma, returnLAB = TRUE) # check head(rgb.data) ## r g b ## 1 0.4324796 0.3675617 0.29440648 ## 2 0.5564942 0.4652309 0.35498054 ## 3 0.5564942 0.4652309 0.35498054 ## 4 0.7708844 0.6765034 0.48926139 ## 5 0.3876272 0.2456471 0.16366245 ## 6 0.4240408 0.2286641 0.09553195 head(lab.data) ## L A B ## 1 40.91415 3.659798 13.21994 ## 2 51.40323 4.854561 18.89452 ## 3 51.40323 4.854561 18.89452 ## 4 71.57199 1.917442 27.79933 ## 5 30.26102 13.393855 19.32450 ## 6 30.27183 19.090733 29.87009 # remove NA rgb.data &lt;- na.omit(rgb.data) lab.data &lt;- na.omit(lab.data) # retain unique colors rgb.data &lt;- unique(rgb.data) lab.data &lt;- unique(lab.data) # visualize colors in LAB coordinates pairs(lab.data, col=&#39;white&#39;, bg=rgb(rgb.data), pch=21, cex=2) # create distance matrix from LAB coordinates d &lt;- daisy(lab.data, stand=FALSE) # divisive heirarcical clustering d.hclust &lt;- as.hclust(diana(d)) # convert to phylo class for nicer plotting p &lt;- as.phylo(d.hclust) # perform nMDS on distance matrix d.sammon &lt;- sammon(d) # setup multi-figure page par(mfcol=c(1,2), mar=c(0,0,2,0), bg=grey(0.95)) # plot fan-style dendrogram plot(p, font=2, cex=0.5, type=&#39;fan&#39;, show.tip.label=FALSE, main=&#39;Dendrogram Representation&#39;) # add colors at dendrogram tips tiplabels(pch=21, cex=4, col=&#39;white&#39;, bg=rgb(rgb.data)) # plot nMDS ordination plot(d.sammon$points, type=&#39;n&#39;, axes=FALSE, xlab=&#39;&#39;, ylab=&#39;&#39;, asp=1, main=&#39;nMDS Ordination&#39;) abline(h=0, v=0, col=&#39;black&#39;, lty=3) points(d.sammon$points, bg=rgb(rgb.data), pch=21, cex=3.5, col=&#39;white&#39;) 3.4.6 “How Do the Interpretations Compare?” Example borrowed from this tutorial. library(reshape2) # set list of component names, same as soil color example s.list &lt;- c(&#39;amador&#39;, &#39;redding&#39;, &#39;pentz&#39;, &#39;willows&#39;, &#39;pardee&#39;, &#39;yolo&#39;, &#39;hanford&#39;, &#39;cecil&#39;, &#39;sycamore&#39;, &#39;zook&#39;) # get OSD details s &lt;- fetchOSD(soils = s.list) # set list of relevant interpretations interp.list &lt;- c(&#39;ENG - Construction Materials; Topsoil&#39;, &#39;ENG - Sewage Lagoons&#39;, &#39;ENG - Septic Tank Absorption Fields&#39;, &#39;ENG - Unpaved Local Roads and Streets&#39;) # compose query q &lt;- paste0(&quot;SELECT UPPER(compname) as compname, mrulename, AVG(interplr) as interplr_mean FROM component INNER JOIN cointerp ON component.cokey = cointerp.cokey WHERE compname IN &quot;, format_SQL_in_statement(s.list), &quot; AND seqnum = 0 AND mrulename IN &quot;, format_SQL_in_statement(interp.list), &quot; AND interplr IS NOT NULL GROUP BY compname, mrulename;&quot;) # send query x &lt;- SDA_query(q) # reshape long -&gt; wide x.wide &lt;- dcast(x, compname ~ mrulename, value.var = &#39;interplr_mean&#39;) kable_styling(knitr::kable(x.wide, digits = 2, caption=&quot;Mean Fuzzy Ratings for Select Soil Series&quot;), font_size = 10) Table 3.1: Mean Fuzzy Ratings for Select Soil Series compname ENG - Construction Materials; Topsoil ENG - Septic Tank Absorption Fields ENG - Sewage Lagoons ENG - Unpaved Local Roads and Streets AMADOR 0.00 1.00 1.00 0.69 CECIL 0.41 0.66 0.84 0.29 HANFORD 0.69 0.99 0.87 0.21 PARDEE 0.00 1.00 1.00 1.00 PENTZ 0.00 1.00 1.00 0.71 REDDING 0.02 1.00 1.00 0.80 SYCAMORE 0.82 1.00 0.76 0.78 WILLOWS 0.00 1.00 0.95 1.00 YOLO 0.85 0.91 0.61 0.61 ZOOK 0.00 1.00 1.00 1.00 # note: component name and series name have been converted to upper case # sort rows of fuzzy ratings based on profiles from OSDs new.order &lt;- match(x.wide$compname, profile_id(s)) x.wide &lt;- x.wide[new.order, ] # copy ids to row.names so that they are preserved in distance matrix row.names(x.wide) &lt;- x.wide$compname # create distance matrix d &lt;- daisy(x.wide[, -1]) # divisive hierarchical clustering clust &lt;- diana(d) par(mar=c(2,0,2,0)) plotProfileDendrogram(s, clust, dend.y.scale = 2, scaling.factor = 0.007, y.offset = 0.15, width=0.3, cex.names = 0.55, name.style = &#39;center-center&#39;, axis.line.offset = -3) title(&#39;Component Similarity via Select Fuzzy Ratings&#39;) mtext(&#39;Profile Sketches are from OSDs&#39;, 1) 3.4.7 MLRA Concepts via Climate and Elevation Samples Get and process example data, originally sampled from PRISM raster and DEM within MLRA 15, 18, 22A, and 22B. Variables include: elevation mean annual air temperature mean annuap precipitation fraction of annual precipitation as rain effective precipitation frost-free days growing degree days library(MASS) library(vegan) library(cluster) library(RColorBrewer) # get example data # init a temp file tf &lt;- tempfile() # download compressed CSV to temp file download.file(&#39;https://github.com/ncss-tech/stats_for_soil_survey/raw/master/data/clustering_and_ordination/MLRA-raster-data-example.csv.gz&#39;, destfile = tf, quiet = TRUE) # read-in from compressed CSV to data.frame object d.sub &lt;- read.csv(gzfile(tf), stringsAsFactors = FALSE) # check: note that the column names are quite strange head(d.sub) # set factor levels mu.set &lt;- c(&#39;15&#39;, &#39;18&#39;, &#39;22A&#39;, &#39;22B&#39;) d.sub$.id &lt;- factor(d.sub$.id, levels = mu.set) # define some nice colors cols &lt;- brewer.pal(9, &#39;Set1&#39;) # remove light colors cols &lt;- cols[c(1:5,7,9)] 3.4.7.1 Nonmetric Multidimensional Scaling A smooh surface fit to mean annual air temperature highlights structure within a nMDS ordination. m &lt;- metaMDS(d.sub[, -c(1:3)], distance = &#39;gower&#39;) # margins par(mar=c(1,1,3,1)) # setup plot o &lt;- ordiplot(m, type=&#39;n&#39;, axes=FALSE) # add points, colored accoring to MLRA points(o, &#39;sites&#39;, cex=1, col=cols[as.numeric(d.sub$.id)], pch=16) # overlay smooth surface of variable used in ordination ordisurf(m, d.sub$Mean.Annual.Air.Temperature..degrees.C., add=TRUE, col=&#39;black&#39;, labcex=1) legend(&#39;topleft&#39;, legend=mu.set, pch=16, col=cols, bty=&#39;n&#39;, cex=1.25) title(&#39;nMDS with mean annual air temperature (deg C) surface&#39;) box() 3.4.7.2 Principle Coordinates This example generates an ordination (via principal coordinates) of environmental variables (PRSIM and elevation) associated with MLRAs 15, 18, 22A, and 22B. Ellipses represent 50% probability contours via multivariate homogeneity of group dispersions. See comments in the code for details. Note that this example was extracted from the Region 2 Map Unit Comparison Report. Thoughts on interpretation: The relative position of points and ellipses are meaningful; absolute position will vary each time the figure is generated. Look for “diffuse” vs. “concentrated” clusters: these suggest relatively broadly vs. narrowly defined concepts. Nesting of clusters (e.g. smaller cluster contained by larger cluster) suggests super-set/subset relationships. Overlap is proportional to similarity. ## NOTE: data with very low variability will cause warnings # eval numerical distance, removing first 3 columns of IDs d.dist &lt;- daisy(d.sub[, -c(1:3)], stand=TRUE) ## map distance matrix to 2D space via principal coordinates d.betadisper &lt;- betadisper(d.dist, group=d.sub$.id, bias.adjust = TRUE, sqrt.dist = FALSE, type=&#39;median&#39;) ## fancy plot plot( d.betadisper, hull=FALSE, ellipse=TRUE, conf=0.5, col=cols, main=&#39;Ordination of Raster Samples\\n50% Probability Ellipse&#39;, sub=&#39;MLRA 15, 18, 22A, 22B&#39; ) Pair-wise comparisons at the 90% level of confidence. ## pair-wise comparisons of variance par(mar=c(4.5, 5.5, 4.5, 1)) plot(TukeyHSD(d.betadisper, conf.level = 0.9), las=1) This document is based on aqp version 1.42 and soilDB version 2.7.6 and sharpshootR version 2.0. References "],["linear-regression.html", "Chapter 4 Linear Regression 4.1 Introduction 4.2 Linear Regression Example 4.3 Data 4.4 Spatial data 4.5 Exploratory Data Analysis (EDA) 4.6 Linear modeling 4.7 Generate spatial predictions 4.8 Create Map 4.9 Exercise 4.10 Additional reading", " Chapter 4 Linear Regression Statistics for Soil Survey course banner image 4.1 Introduction Linear regression models the linear relationship between a response variable (y) and an predictor variable (x). \\(y = \\alpha + \\beta x + e\\) Where: \\(y\\) = the dependent variable \\(\\alpha\\) = the intercept of the fitted line \\(\\beta\\) = the Regression coefficient, i.e. slope of the fitted line. Strong relationships will have high values. \\(x\\) = the independent variable (aka explanatory or predictor variable(s) ) \\(e\\) = the error term Linear regression has been used for soil survey applications since the early 1900s when Briggs, McLane, and United States. Bureau of Soils (1907) developed a pedotransfer function to estimate the wilting coefficient as a function of soil particle size. Wilting coefficient = 0.01(sand) + 0.12(silt) + 0.57(clay) When more than one independent variable is used in the regression, it is referred to as multiple linear regression. In regression models, the response (or dependent) variable must always be continuous. The predictor (or independent) variable(s) can be continuous or categorical. In order to use linear regression or any linear model, the errors (i.e. residuals) must be normally distributed. Most environmental data are skewed and require transformations to the response variable (such as square root or log) for use in linear models. Normality can be assessed using a QQ plot or histogram of the residuals. 4.2 Linear Regression Example Now that we’ve got some of the basic theory out of the way we’ll move on to a real example, and address any additional theory where it relates to specific steps in the modeling process. The example selected for this chapter comes from the Mojave desert. The landscape is composed primarily of closed basins ringed by granitic hills and mountains (Peterson, 1981). The problem tackled here is modeling mean annual air temperature as a function of PRISM, digital elevation model (DEM) and Landsat derivatives. This climate study began in 1998 as part of a national study run by the National Lab and led by Henry Mount (Mount and Paetzold 2002). The objective was to determine if the hyperthermic line was consistent across the southern US, which at the time was thought to be ~3000 in elevation. Up until 2015 their were 77 active MAST sites, and 12 SCAN sites throughout MLRA 30 and 31. For more details see the “MLRA 30 - Soil Climate Study - Soil Temperature” project in NASIS, on GitHub, or by (Roecker and Carrie-Ann Haydu-Houdeshell 2012). library(soilDB) prj &lt;- get_project_from_NASISWebReport(mlrassoarea = &quot;8-VIC&quot;, fiscalyear = 2015) ## Loading required namespace: rvest subset(prj, projectname == &quot;MLRA 30 - Soil Climate Study - Soil Temperature&quot;) ## mlrassoarea nonmlrassaarea mlraarea projecttypename projectsubtypename ## 4 8-VIC &lt;NA&gt; 30 MLRA &lt;NA&gt; ## fiscalyear fiscalyear_goaled projectiid uprojectid ## 4 2015 2015 95689 0000-VIC-Soil Climate Studies-001 ## projectname projectapprovedflag ## 4 MLRA 30 - Soil Climate Study - Soil Temperature TRUE ## projectconcerntypename ## 4 &lt;NA&gt; ## projectdesc ## 4 8-VIC, Victorville, CA MLRA Soil Survey Office\\r\\nSoil Climate Study Plan \\r\\nProject Outline Worksheet \\r\\n\\r\\nProject Name: MLRA 30 and 31 - Soil Climate Study Plan\\r\\n\\r\\nIdentification \\r\\nState/s: CA and NV (proposed to add in AZ as well)\\r\\nMLRAs: 30 and 31\\r\\nPlan Author: Carrie-Ann Houdeshell, MLRA SSPL and Stephen Roecker Soil Scientist\\r\\nRegional Office Staff: \\r\\nDavis, CA: Ed Tallyn, Senior Regional Soil Scientist; Jennifer Wood, Soil Data Quality Specialist\\r\\nPhoenix, AZ: Nathan Starman, Soil Data Quality Specialist\\r\\nArea Office Staff: Peter Fahnestock, Area Resource Soil Scientist\\r\\n\\r\\nProject Contact Person(s) \\r\\nName: Carrie-Ann Houdeshell or Stephen Roecker\\r\\naddress: 15415 W. Sand St. #103, Victorville, CA 92392\\r\\nphone: (760) 843-6882\\r\\nemail: Carrie-Ann.Houdeshell@ca.usda.gov or Stephen.Roecker@ca.usda.gov\\r\\n\\r\\nProject Objective(s) \\r\\nThe original objective of this study was to determine the thermic/hyperthermic boundary across MLRA 30. Currently the primary objective is to estimate soil tempe... ## n_projectdesc n_areasymbol n_nationalmusym n_spatial date_start date_complete ## 4 13724 NA NA NA &lt;NA&gt; &lt;NA&gt; ## date_qc date_qa_start date_qa_complete date_qc_spatial date_qa_spatial ## 4 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## pl_username qa_username muacres acre_landcat acre_goal acre_progress ## 4 Ballmer, Matthew &lt;NA&gt; NA NA 0 0 ## pct_progress muacres_water acre_water acre_prog_water acre_federal ## 4 NA NA NA NA NA ## acre_prog_federal acre_private acre_prog_private acre_native acre_prog_native ## 4 NA NA NA NA NA In addition to the 11-IND MAST modeling efforts there has also been two published studies on the Mojave. The first was by Schmidlin, Peterson, and Gifford (1983) who examined both the Great Basin and Mojave Deserts in Nevada. The second was by Bai et al. (2010) who examined the Mojave Desert in California. Both studies developed regression models using elevation, but Schmidlin, Peterson, and Gifford (1983) also incorporated latitude. The results from Bai et al. (2010) displayed considerably larger areas of hyperthermic soils than Schmidlin, Peterson, and Gifford (1983). This made be due to the unconventional method used by Bai et al. (2010) to measure MAST. 4.3 Data 4.3.1 Henry Mount Database The Henry Mount Database already has 79 of the sites from the Mojave. However only 8 have temperature records. f &lt;- fetchHenry(sso = &quot;8-VIC&quot;) length(unique(f$sensors$user_site_id)) ## computing un-biased soil temperature summaries ## 79 sensors loaded (1.89 Mb transferred) 4.3.2 Aggregate Time Series For our purposes the daily soil temperature measurements need to be aggregated to the mean annual soil temperature (MAST). However, depending data you query using, fetchHenry() maybe able to return pre-aggregated results using the gran function argument. library(dplyr) library(tidyr) library(ggplot2) # extract the site and sensor data frames from the list ms_df &lt;- f$soiltemp s &lt;- f$sensors # rename 2 columns ms_df &lt;- mutate( ms_df, day = date_time, Jday = doy ) # Plot sites visually inspect for flat lines and spikes ms_df %&gt;% filter(name == &quot;JVOHV2-50&quot;) %&gt;% ggplot(aes(x = day, y = sensor_value)) + geom_line() ## Warning: Removed 649 rows containing missing values (`geom_line()`). # Aggregate by Year, Month, and Julian day (i.e. 1-365, 366 for leap years) # compute number of days per site ms_n_df &lt;- ms_df %&gt;% group_by(sid, day) %&gt;% summarise(mast = mean(sensor_value, na.exclude = TRUE)) %&gt;% group_by(sid) %&gt;% summarise(numDays = sum(!is.na(mast)), ) %&gt;% ungroup() ## `summarise()` has grouped output by &#39;sid&#39;. You can override using the `.groups` ## argument. # compute mast per year ms_site_df &lt;- ms_df %&gt;% group_by(sid, Jday) %&gt;% summarise(mast = mean(sensor_value, na.rm = TRUE)) %&gt;% group_by(sid) %&gt;% summarise(mast = mean(mast, na.rm = TRUE)) %&gt;% ungroup() ## `summarise()` has grouped output by &#39;sid&#39;. You can override using the `.groups` ## argument. # merge mast &amp; numDays mast_df &lt;- as.data.frame(s) %&gt;% select(name, sid, sensor_depth, geometry) %&gt;% left_join(ms_site_df, by = &quot;sid&quot;) %&gt;% left_join(ms_n_df, by = &quot;sid&quot;) %&gt;% filter(sensor_depth == 50 &amp; !is.na(mast)) head(mast_df) ## name sid sensor_depth geometry mast numDays ## 1 JTNP15 923 50 POINT (-116.01 34.02) 19.97123 321 ## 2 JAWBONE01 903 50 POINT (-117.99 35.5) 19.40847 3742 ## 3 JAWBONE02 972 50 POINT (-118.14 35.5) 19.27930 3063 ## 4 JVOHV1 924 50 POINT (-116.47 34.52) 21.89822 4461 ## 5 JVOHV2 925 50 POINT (-116.64 34.52) 21.13497 4091 ## 6 DEVA01 971 50 POINT (-116.9 36.3) 28.20590 253 Note that we have a column in result data.frame called \"geometry\" since we created it from an sf object. 4.3.3 Final Dataset Since the Henry Mount database is partially incomplete we will proceed with the aggregation from the original txt files. # Read mast data githubURL &lt;- url(&quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/mast_mojave.Rdata&quot;) load(githubURL) 4.4 Spatial data 4.4.1 Plot Coordinates Where do our points plot? To start we need to convert them to a spatial object first. Then we can create an interactive we map using mapview. Also, if we wish we can also export the locations as a Shapefile. # plot mapview(mlra, alpha.region = 0, lwd = 2) + mapview(mast_sf) 4.4.2 Extracting Spatial Data Prior to any spatial analysis or modeling, you will need to develop a suite of geodata files that can be intersected with your field data locations. This is, in and of itself a difficult task and should be facilitated by your Regional GIS Specialist. The geodata files typically used would consist of derivatives from a DEM or satellite imagery, and a ‘good’ geology map. Prior to any prediction it is also necessary to ensure the geodata files have the same projection, extent, and cell size. Once we have the necessary files we can construct a list in R of the file names and paths, read the geodata into R, and then extract the geodata values where they intersect with field data. As you can see below their are numerous variables we could inspect. library(raster) ## Loading required package: sp ## ## Attaching package: &#39;raster&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select library(sf) # load raster stack from GitHub githubURL &lt;- url(&quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/mast_mojave_rs.rds&quot;) geodata_r &lt;- readRDS(githubURL) # Extract the geodata and add to a data frame mast_sf &lt;- st_transform(mast_sf, crs = 5070) data &lt;- raster::extract(geodata_r, st_coordinates(mast_sf)) data &lt;- cbind(st_drop_geometry(mast_sf), data) # convert aspect data$northness &lt;- abs(180 - data$aspect) # random sample vars &lt;- c(&quot;elev&quot;, &quot;temp&quot;, &quot;precip&quot;, &quot;solar&quot;, &quot;tc_1&quot;, &quot;twi&quot;) idx &lt;- which(names(geodata_r) %in% vars) geodata_s &lt;- sampleRegular(geodata_r[[idx]], size = 1000) 4.5 Exploratory Data Analysis (EDA) Generally before we begin modeling it is good to explore the data. By examining a simple summary we can quickly see the breakdown of our data. It is important to look out for missing or improbable values. Probably the easiest way to identify peculiarities in the data is to plot it. summary(data) ## siteid mast numDays elev slope ## Cheme01 : 1 Min. : 3.10 Min. : 363 Min. : 0.0 Min. : 0.00 ## Clark01 : 1 1st Qu.:18.50 1st Qu.:1831 1st Qu.: 699.2 1st Qu.: 2.00 ## DEVA01 : 1 Median :20.57 Median :2918 Median : 947.5 Median : 5.00 ## DEVA02 : 1 Mean :19.93 Mean :2465 Mean :1082.0 Mean :11.85 ## DEVA03 : 1 3rd Qu.:23.72 3rd Qu.:3397 3rd Qu.:1480.2 3rd Qu.:21.00 ## Jawbone01: 1 Max. :28.77 Max. :4159 Max. :3021.0 Max. :42.00 ## (Other) :62 ## aspect twi solar solarcv ## Min. : 6.00 Min. : 8.00 Min. :1758 Min. :21.00 ## 1st Qu.: 90.25 1st Qu.: 9.25 1st Qu.:2028 1st Qu.:31.00 ## Median :140.00 Median :12.00 Median :2091 Median :32.50 ## Mean :143.62 Mean :12.00 Mean :2084 Mean :32.66 ## 3rd Qu.:196.00 3rd Qu.:14.00 3rd Qu.:2136 3rd Qu.:33.25 ## Max. :333.00 Max. :21.00 Max. :2443 Max. :44.00 ## NA&#39;s :2 ## tc_1 tc_2 tc_3 precip ## Min. : 58.00 Min. : 26.00 Min. : 2.00 Min. : 3.000 ## 1st Qu.: 97.75 1st Qu.: 47.75 1st Qu.: 31.50 1st Qu.: 6.000 ## Median :120.00 Median : 57.50 Median : 50.50 Median : 7.000 ## Mean :122.22 Mean : 56.85 Mean : 51.87 Mean : 9.824 ## 3rd Qu.:143.50 3rd Qu.: 64.00 3rd Qu.: 74.00 3rd Qu.:10.000 ## Max. :191.00 Max. :100.00 Max. :121.00 Max. :44.000 ## ## temp northness ## Min. :10.00 Min. : 0.00 ## 1st Qu.:20.75 1st Qu.: 23.75 ## Median :23.50 Median : 68.00 ## Mean :23.10 Mean : 64.59 ## 3rd Qu.:26.00 3rd Qu.: 93.50 ## Max. :31.00 Max. :174.00 ## You may recall from discussion of EDA that QQ plots are a visual way to inspect the normality of a variable. If the variable is normally distributed, the points (e.g. soil observations) should line up along the straight line. # QQ plot ggplot(data, aes(sample = mast)) + geom_qq() + geom_qq_line() By examining the correlations between some of the predictors we can also determine whether they are collinear (e.g. &gt; 0.6). This is common for similar variables such as Landsat bands, terrain derivatives, and climatic variables. Variables that are colinear are redundant and contain no additional information. In addition, collinearity will make it difficult to estimate our regression coefficients. vars &lt;- c(&quot;mast&quot;, &quot;elev&quot;, &quot;temp&quot;, &quot;precip&quot;, &quot;tc_2&quot;, &quot;tc_1&quot;, &quot;tc_3&quot;) GGally::ggpairs(data[vars]) ## Registered S3 method overwritten by &#39;GGally&#39;: ## method from ## +.gg ggplot2 vars &lt;- c(&quot;mast&quot;, &quot;slope&quot;, &quot;twi&quot;, &quot;northness&quot;, &quot;solar&quot;, &quot;solarcv&quot;) GGally::ggpairs(data[vars]) The correlation matrices and scatter plots above show that that MAST has moderate correlations with some of the variables, particularly the elevation and the climatic variables. Examining the density plots on the diagonal axis of the scatter plots we can also see that some variables are skewed. 4.5.1 Compare Samples vs Population Since our data was not randomly sampled, we had better check the distribution of our samples vs the population. We can accomplish this by overlaying the sample distribution of predictor variables vs a large random sample. geodata_df &lt;- as.data.frame(geodata_s) geodata_df &lt;- rbind( data.frame(source = &quot;sample&quot;, data[names(geodata_df)]), data.frame(source = &quot;population&quot;, geodata_df) ) geodata_l &lt;- pivot_longer(geodata_df, cols = -source) ggplot(geodata_l, aes(x = value, fill = source)) + geom_density(alpha = 0.5) + facet_wrap(~ name, scales = &quot;free&quot;) + ggtitle(&quot;Evaluation of Sample Representativeness&quot;) ## Warning: Removed 1266 rows containing non-finite values (`stat_density()`). The overlap between our sample and the population appear satisfactory. 4.6 Linear modeling R has several functions for fitting linear models. The most common is arguably the lm() function from the stats R package, which is loaded by default. The lm() function is also extended through the use of several additional packages such as the car and caret R packages. Another noteworthy R package for linear modeling is rms, which offers the ols() function for linear modeling. The rms R package (Harrell 2015) offers an ‘almost’ comprehensive alternative to `lm()’ and it’s accessory function. Each function offers useful features, therefore for the we will demonstrate elements of both. Look for comments (i.e. #) below referring to rms or stats. # stats fit_lm &lt;- lm(mast ~ elev + aspect + twi + solar + solarcv + tc_1 + tc_2 + tc_3 + precip + temp, data = data, weights = data$numDays) # rms R package library(rms) dd &lt;- datadist(data) options(datadist = &quot;dd&quot;) fit_ols &lt;- ols(mast ~ elev + aspect + twi + solar + solarcv + tc_1 + tc_2 + tc_3 + precip + temp, data = data, x = TRUE, y = TRUE, weights = data$numDays) 4.6.1 Diagnostics 4.6.1.1 Residual plots Once we have a model we need to assess residuals for linearity, normality, and homoscedastivity (or constant variance). Oddly this is one area were the rms R package does not offer convient functions for plotting residuals, therefore we’ll simply access the results of lm(). par(mfcol = c(2, 2)) # residual plot(fit_lm) # partial residuals termplot(fit_lm, partial.resid = TRUE, col.res = &quot;black&quot;, pch = 16) Remember the residuals are simply just the observed values minus the predicted values, which are easy enough to calculate. Alternatively we can simply extract them from the fitted model object. pred &lt;- predict(fit_lm, data) res &lt;- data$mast - pred head(res) ## 1 2 3 4 5 6 ## -1.3182498 -0.4111067 0.1231537 1.4750626 -0.1719747 -0.1036808 # or head(residuals(fit_lm)) ## 1 2 3 4 5 6 ## -1.3182498 -0.4111067 0.1231537 1.4750626 -0.1719747 -0.1036808 # Manually plot the residuals res &lt;- data.frame(res, pred) ggplot(res, aes(x = pred, y = res)) + geom_point() + geom_hline(yintercept = 0) 4.6.1.2 Multicolinearity As we mentioned earlier multicolinearity should be avoided. To assess a model for multicolinearity we can compute the variance inflation factor (VIF). Its square root indicates the amount of increase in the predictor coefficients standard error. A value greater than 3 indicates a doubling the standard error. Rules of thumb vary, but a square root of vif greater than 2 or 3 indicates an unacceptable value (Faraway 2004). # vif() function from the rms or car packages sqrt(vif(fit_ols)) ## elev aspect twi solar solarcv tc_1 tc_2 tc_3 ## 8.851106 1.103580 2.056235 6.068831 5.787921 4.114079 3.009392 3.311669 ## precip temp ## 2.274489 7.860236 # or sqrt(vif(fit_ols)) &gt; 3 ## elev aspect twi solar solarcv tc_1 tc_2 tc_3 precip temp ## TRUE FALSE FALSE TRUE TRUE TRUE TRUE TRUE FALSE TRUE The values above indicate we have several colinear variables in the model, which you might have noticed already from the scatter plot matrix. 4.6.2 Variable selection &amp; model validation Modeling is an iterative process that cycles between fitting and evaluating alternative models. Compared to tree and forest models, linear and generalized models typically less automated. Automated model selection procedures are available, but should not be taken at face value because they may result in complex and unstable models. This is in part due to correlation amongist the predictive variables that can confuse the model. Also, the order in which the variables are included or excluded from the model effects the significance of the other variables, and thus several weak predictors might mask the effect of one strong predictor. Regardless of the approach used, variable selection is probably the most controversial aspect of linear modeling. Both the rms and caret packages offer methods for variable selection and cross-validation. In this instance the rms approach is a bit more convenient, with the one line call to validate(). # Set seed for reproducibility set.seed(42) # rms ## stepwise selection validate(fit_ols, bw = TRUE) ## ## Backwards Step-down - Original Model ## ## Deleted Chi-Sq d.f. P Residual d.f. P AIC R2 ## temp 0.19 1 0.6593 0.19 1 0.6593 -1.81 34676 ## aspect 0.45 1 0.5020 0.65 2 0.7243 -3.35 34674 ## solarcv 0.97 1 0.3248 1.61 3 0.6561 -4.39 34672 ## twi 0.51 1 0.4762 2.12 4 0.7133 -5.88 34670 ## tc_3 1.25 1 0.2642 3.37 5 0.6434 -6.63 34667 ## precip 0.85 1 0.3558 4.22 6 0.6468 -7.78 34665 ## ## Approximate Estimates after Deleting Factors ## ## Coef S.E. Wald Z P ## Intercept 24.486899 4.044131 6.055 1.405e-09 ## elev -0.007142 0.000550 -12.985 0.000e+00 ## solar 0.009497 0.002012 4.721 2.346e-06 ## tc_1 -0.062146 0.012006 -5.176 2.264e-07 ## tc_2 -0.157832 0.036778 -4.291 1.775e-05 ## ## Factors in Final Model ## ## [1] elev solar tc_1 tc_2 ## index.orig training test optimism index.corrected n ## R-square 0.9286 0.9319 0.9154 0.0165 0.9120 40 ## MSE 2.1473 1.8643 2.5430 -0.6787 2.8261 40 ## g 5.6666 5.6236 5.6643 -0.0407 5.7074 40 ## Intercept 0.0000 0.0000 0.1430 -0.1430 0.1430 40 ## Slope 1.0000 1.0000 0.9917 0.0083 0.9917 40 ## ## Factors Retained in Backwards Elimination ## ## elev aspect twi solar solarcv tc_1 tc_2 tc_3 precip temp ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * * ## * * * * ## * * * * ## * * * * ## * * * * * ## * * * * * ## * * * * ## * * * ## * * * * * ## * * * * ## * * ## * * * * ## * * * * * * ## * * * * ## * * * * ## * * ## * * * * ## * * * * ## * * * ## * * * * ## * * * * ## * * * * ## * * * * ## * * * * ## ## Frequencies of Numbers of Factors Retained ## ## 2 3 4 5 6 ## 2 2 31 4 1 The results for validate() above show which variables were retained and deleted. Above we can see a dot matrix of which variables were retained during each of the 10 iterations of from cross validation. In addition, we can see the difference between the training and test accuracy and error metrics. Remember that it is the test accuracy we should pay attention too. 4.6.3 Final model &amp; accuracy assessment Once we have a model we are ‘happy’ with we can fit the final model, and call validate() again which gives performace metrics such as R$2 and the mean square error (MSE). If we want the root mean square error (RMSE), which is in the original units of our measurements we can take the square root of MSE using sqrt(). # rms final_ols &lt;- ols(mast ~ elev + solarcv + tc_1 + tc_2, data = data, weights = data$numDays, x = TRUE, y = TRUE) final_ols ## Linear Regression Model ## ## ols(formula = mast ~ elev + solarcv + tc_1 + tc_2, data = data, ## weights = data$numDays, x = TRUE, y = TRUE) ## ## Model Likelihood Discrimination ## Ratio Test Indexes ## Obs 68 LR chi2 177.01 R2 0.926 ## sigma73.3628 d.f. 4 R2 adj 0.921 ## d.f. 63 Pr(&gt; chi2) 0.0000 g 5.720 ## ## Residuals ## ## Min 1Q Median 3Q Max ## -3.7912 -0.8006 -0.1218 0.7401 4.0016 ## ## ## Coef S.E. t Pr(&gt;|t|) ## Intercept 49.9906 3.7439 13.35 &lt;0.0001 ## elev -0.0066 0.0006 -11.82 &lt;0.0001 ## solarcv -0.2421 0.0526 -4.60 &lt;0.0001 ## tc_1 -0.0535 0.0113 -4.75 &lt;0.0001 ## tc_2 -0.1469 0.0362 -4.06 0.0001 set.seed(42) validate(final_ols, method = &quot;crossvalidation&quot;, B = 10) ## index.orig training test optimism index.corrected n ## R-square 0.9209 0.9227 0.7896 0.1331 0.7878 10 ## MSE 2.3332 2.2652 2.7234 -0.4582 2.7914 10 ## g 5.7197 5.6658 5.4657 0.2001 5.5196 10 ## Intercept 0.0000 0.0000 0.8853 -0.8853 0.8853 10 ## Slope 1.0000 1.0000 0.9571 0.0429 0.9571 10 data$pred &lt;- predict(final_ols) # RMSE sqrt((MSE = 1.7218)) ## [1] 1.312174 caret::RMSE(pred = data$pred, obs = data$mast) ## [1] 1.527477 # R2 caret::R2(pred = data$pred, obs = data$mast, formula = &quot;traditional&quot;) ## [1] 0.9208941 # plot model fit ggplot(data, aes(x = mast, y = pred)) + geom_point() + geom_abline() + geom_smooth(method = &quot;lm&quot;) + ggtitle(&quot;Model Fit&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; 4.6.4 Model Interpretation # Model accuracy, residuals, and slopes (e.g. coefficents) final_ols ## Linear Regression Model ## ## ols(formula = mast ~ elev + solarcv + tc_1 + tc_2, data = data, ## weights = data$numDays, x = TRUE, y = TRUE) ## ## Model Likelihood Discrimination ## Ratio Test Indexes ## Obs 68 LR chi2 177.01 R2 0.926 ## sigma73.3628 d.f. 4 R2 adj 0.921 ## d.f. 63 Pr(&gt; chi2) 0.0000 g 5.720 ## ## Residuals ## ## Min 1Q Median 3Q Max ## -3.7912 -0.8006 -0.1218 0.7401 4.0016 ## ## ## Coef S.E. t Pr(&gt;|t|) ## Intercept 49.9906 3.7439 13.35 &lt;0.0001 ## elev -0.0066 0.0006 -11.82 &lt;0.0001 ## solarcv -0.2421 0.0526 -4.60 &lt;0.0001 ## tc_1 -0.0535 0.0113 -4.75 &lt;0.0001 ## tc_2 -0.1469 0.0362 -4.06 0.0001 # Anova anova(final_ols) ## Analysis of Variance Response: mast ## ## Factor d.f. Partial SS MS F P ## elev 1 751577.78 751577.776 139.64 &lt;.0001 ## solarcv 1 114017.66 114017.655 21.18 &lt;.0001 ## tc_1 1 121686.11 121686.110 22.61 &lt;.0001 ## tc_2 1 88784.39 88784.388 16.50 1e-04 ## REGRESSION 4 4240328.96 1060082.241 196.96 &lt;.0001 ## ERROR 63 339072.21 5382.099 # Model Effects plot(summary(final_ols)) # Plot Effects ggplot(Predict(final_ols), addlayer = geom_hline(yintercept = c(8, 15, 22), linetype = &quot;dotted&quot;) + scale_y_continuous(breaks = c(8, 15, 22)) ) # Vary solarcv (North = 23; Flat = 33; South = 55) ggplot(Predict(final_ols, elev = NA, solarcv = c(23, 33, 51))) + geom_hline(yintercept = c(8, 15, 22), linetype = &quot;dotted&quot;) + scale_y_continuous(breaks = c(8, 15, 22)) 4.7 Generate spatial predictions # Predict mast model predfun &lt;- function(model, data) { v &lt;- predict(model, data, se.fit=TRUE) } mast_r &lt;- predict(geodata_r, final_ols, fun = predfun, index = 1:2, progress = &#39;text&#39;) names(mast_r) &lt;- c(&quot;MAST&quot;, &quot;SE&quot;) 4.8 Create Map # mast plot(mast_r) 4.9 Exercise Load the CA790 MAST dataset. url &lt;- &quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/exercises/yosemite-example/henry_CA790_data.csv&quot; mast2 &lt;- read.csv(url) Fit a linear model. Examine the residuals and check for multi-collinearity. Are their any outliers? Perform a variable selection. Does the automatic selection make sense? Assess the model accuracy and plot the fit. How do the train vs test accuracies compare? Summarize and plot the model effects. Which variable has the steepest slope? Which variable has the greatest effect? Which variable explains the most variance? 4.10 Additional reading The proper use and misuse of regression in soil science has been described by (Webster 1997). James et al. (2021) provide a useful introduction to linear regression. For more discussion of extending regression to incorporate spatial trends in the residuals see Hengl (2009). References "],["glm.html", "Chapter 5 Generalized Linear Models 5.1 Introduction 5.2 Logistic Regression 5.3 Examples 5.4 Exercise 5.5 Exploratory analysis (EDA) 5.6 Exercise 1: View the data 5.7 Constructing the model 5.8 Generate spatial predictions 5.9 Exercise 5.10 Additional reading", " Chapter 5 Generalized Linear Models 5.1 Introduction Generalized linear models (GLM) as the name implies are a generalization of the linear modeling framework to allow for the modeling of response variables (e.g. soil attributes) with non-normal distributions and heterogeneous variances. Whereas linear models are designed for predicting continuous soil properties such as clay content or soil temperature, GLM can be used to predict the presence/absence of argillic horizons (i.e. logistic regression) or counts of a plant species along a transect (i.e. Poisson regression). These generalizations greatly expand the applicability of the linear modeling framework, while still allowing for a similar fitting procedure and interpretation of the resulting models. In the past in order to handle non-linearity and heterogeneous variances, transformations have been made to the response variable, such as the log(y). However, such transformations complicate the models interpretation because the results refer to the transformed scale (e.g. log(y))(Lane 2002). These response transformations are not guaranteed to achieve both normality and constant variance simultaneously. GLM approaches transform the response, but also preserve the scale of the response, and provide separate functions to transform the mean response and variance, known as the link and variance functions respectively. So instead of looking like this: \\(f(y) = \\beta_{0} + \\beta_{1}x + \\varepsilon\\) you get this: \\(g(\\mu)\\) or \\(\\eta = \\beta_{0} + \\beta_{1}x + \\varepsilon\\) with \\(g(\\mu)\\) or \\(\\eta\\) symbolizing the link function. Another alteration of the classical linear model is that with GLM the coefficients are estimated iteratively by maximum likelihood estimation instead of ordinary least squares. This results in the GLM minimizing the deviance, instead of the sum of squares. However, for the Gaussian (i.e. normal) distributions the deviance and sum of squares are equivalent. 5.2 Logistic Regression Logistic regression is a specific type of GLM designed to model data that has a binomial distribution (i.e. presence/absence, yes/no, or proportional data), which in statistical learning parlance is considered a classification problem. For binomial data the logit link transform is generally used. The effect of the logit transform can be seen in the following figure. It creates a sigmoidal curve, which enhances the separation between the two groups. It also has the effect of ensuring that the values range between 0 and 1. When comparing a simple linear model vs a simple logistic model we can see the effect of the logit transform on the relationship between the response and predictor variable. As before it follows a sigmoidal curve and prevents predictions from exceeding 0 and 1. ## Warning: Removed 19 rows containing missing values (`geom_line()`). 5.3 Examples Example 1: Probability of Mollisols (Beaudette and O’Geen 2009) Example 2: Probability of Red Clay (Evans and Hartemink 2014) Example 3: Probability of Ponding (NRCS Unpublished) 5.4 Exercise Now that we’ve discussed some of the basic background GLM theory we’ll move on to a real exercise, and address any additional theory where it relates to specific steps in the modeling process. The examples selected for this chapter come from Joshua Tree National Park (JTNP)(i.e. CA794) in the Mojave desert. The problem tackled here is a familiar one: Where can I expect to find argillic horizons on fan piedmonts? Argillic horizons within the Mojave are typically found on fan remnants, which are a stable landform that is a remnant of the Pleistocene (Peterson 1981). Despite the low relief of most fans, fan remnants are uplands in the sense that they generally don’t receive run-on or active deposition. With this dataset we’ll encounter some challenges. To start with, fan piedmont landscapes typically have relatively little relief. Since most of our predictors will be derivatives of elevation, that won’t leave us with much to work with. Also, our elevation data comes from the USGS National Elevation dataset (NED), which provides considerably less detail than say LiDAR or IFSAR data (Shi et al. 2012). Lastly our pedon dataset like most in NASIS, hasn’t received near as much quality control as have the components. So we’ll need to wrangle some of the pedon data before we can analyze it. These are all typical problems encountered in any data analysis and should be good practice. Ideally, it would be more interesting to try and model individual soil series with argillic horizons, but due to some of the challenges previously mentioned it would be difficult with this dataset. However, at the end we’ll look at one simple approach to try and separate individual soil series with argillic horizons. 5.4.1 Load packages To start, as always we need to load some extra packages. This will become a familiar routine every time you start R. Most of the basic functions we need to develop a logistic regression model are contained in base R, but the following contain some useful spatial and data manipulation functions. Believe it or not we will use all of them and more. library(aqp) # soil data classes library(raster) # raster data functions library(sf) # vector data functions library(mapview) # interactive mapping library(ggplot2) # graphing library(dplyr) # data manipulation library(tidyr) # data manipulation library(rms) # additional regression tools library(caret) # additional modeling tools 5.4.2 Read in data Hopefully like all good soil scientists and ecological site specialists you enter your field data into NASIS. Better yet hopefully someone else did it for you! Once data are captured in NASIS it is much easier to import the data into R, extract the pieces you need, manipulate it, model it, etc. If it’s not entered into NASIS, it may as well not exist. For this exercise we’ll load a cached dataset on GitHub. # pedons &lt;- fetchNASIS() githubURL &lt;- url(&quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/ca794_pedons.RData&quot;) load(githubURL) # Examine the SoilProfileCollection object View(pedons) 5.5 Exploratory analysis (EDA) 5.5.1 Data wrangling Generally before we begin modeling you should spend some time exploring the data. By examining a simple summary we can quickly see the breakdown of how many argillic horizons we have. Unfortunately, odds are good that all the argillic horizons haven’t been consistently populated in the diagnostic horizon table like they should be. Luckily for us, the desert argillic horizons always pop up in the taxonomic name, so we can use pattern matching to extract it. By doing this we gain an additional 11 pedons with argillic horizons and are able to label the missing values (i.e. NA). At a minimum for modeling purposes we probably need 10 pedons of the target we’re interested in and a total of 100 observations overall. # Check consistency of argillic horizon population # extract the site table from the SoilProfileCollection object s &lt;- site(pedons) # tabulate column count(s, argillic.horizon) ## argillic.horizon n ## 1 FALSE 790 ## 2 TRUE 263 ## 3 NA 167 # Extract argillic presence from the taxonomic subgroup s &lt;- mutate(s, argillic = grepl(&quot;arg&quot;, taxsubgrp)) # tabulate column count(s, argillic) ## argillic n ## 1 FALSE 1022 ## 2 TRUE 198 Ideally, if the diagnostic horizon table had been populated consistently we could have used the upper depth to diagnostic feature to filter out argillic horizons that start below 50cm, which may not be representative of “good” argillic horizons and may therefore have gotten correlated to a Torripsamments anyway. Not only are unrepresentative sites confusing for scientists, they’re equally confusing for models. However, as we saw earlier, some pedons don’t appear to be fully populated, so we’ll stick with those pedons that have the argillic specified in their taxonomic subgroup name, since it gives us the biggest sample. # extract the diagnostic table from the SoilProfileCollection object diagnostic_hz(pedons) %&gt;% # create a new variable mutate(argillic.horizon50 = featkind == &quot;argillic horizon&quot; &amp; featdept &lt; 50) %&gt;% # tabulate column count(argillic.horizon50) ## argillic.horizon50 n ## 1 FALSE 1935 ## 2 TRUE 222 ## 3 NA 4 5.5.2 Geomorphic data Another obvious place to look is at the geomorphic data in the site table. This information is intended to help differentiate where our soil observations exist on the landscape. If populated consistently it could potentially be used in future disaggregation efforts, as demonstrated by Nauman and Thompson (2014). # Landform vs argillic presence s %&gt;% # subset rows using logical expression filter(argillic == TRUE) %&gt;% # cross-tabulate columns count(landform, argillic) %&gt;% # subset rows by landform.string with &gt; 3 observations filter(n &gt; 3) %&gt;% # sort data by decreasing n arrange(-n) ## landform argillic n ## 1 fan remnants TRUE 72 ## 2 hillslopes TRUE 28 ## 3 fan aprons TRUE 19 ## 4 hills TRUE 15 ## 5 pediments TRUE 9 ## 6 mountain slopes TRUE 8 ## 7 &lt;NA&gt; TRUE 7 ## 8 alluvial fans TRUE 6 ## 9 low hills TRUE 5 ## 10 fan aprons on fan remnants TRUE 4 ## 11 mountains TRUE 4 # generalize the landform.string s &lt;- mutate( s, landform_generic = ifelse(grepl(&quot;fan|terrace|sheet|drainageway|wash&quot;, s$landform), &quot;fan&quot;, &quot;hill&quot;) ) Examining the above frequency table we can see that argillic horizons occur predominantly on fan remnants as was alluded too earlier. However, they also seem to occur frequently on other landforms - some of which are curious combinations of landforms or redundant terms. # Hillslope position # # subset rows using logical expression s_sub &lt;- filter(s, landform_generic == &quot;fan&quot;) # Hillslope s_sub %&gt;% # cross-tabulate columns count(hillslopeprof, argillic) %&gt;% # group by variable and calculate percent group_by(argillic) %&gt;% mutate(pct = round(n / sum(n) * 100)) %&gt;% # reshape to wide format select(-n) %&gt;% pivot_wider(names_from = argillic, values_from = pct) ## # A tibble: 6 × 3 ## hillslopeprof `FALSE` `TRUE` ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 summit 16 39 ## 2 shoulder 4 2 ## 3 backslope 14 20 ## 4 footslope 2 1 ## 5 toeslope 16 4 ## 6 &lt;NA&gt; 48 34 # slope shape s_sub %&gt;% # create a new variable mutate(SS = paste(shapedown, shapeacross)) %&gt;% # cross-tabulate columns count(SS, argillic) %&gt;% # calculate percent by group group_by(argillic) %&gt;% mutate(pct = round(n / sum(n) * 100)) %&gt;% # reshape to wide format select(-n) %&gt;% pivot_wider(names_from = argillic, values_from = pct) ## # A tibble: 11 × 3 ## SS `FALSE` `TRUE` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NA NA 11 10 ## 2 concave concave 1 NA ## 3 concave convex 0 NA ## 4 concave linear 4 3 ## 5 convex concave 0 1 ## 6 convex convex 7 7 ## 7 convex linear 6 9 ## 8 linear NA 0 NA ## 9 linear concave 6 1 ## 10 linear convex 21 32 ## 11 linear linear 44 38 Looking at the hillslope position of fan landforms we can see a slightly higher proportion of argillic horizons are found on summits, while less are found on toeslopes. Slope shape doesn’t seem to provide any useful information for distinguishing argillic horizons. s_long &lt;- s %&gt;% # subset rows using logical expression filter(landform_generic == &quot;fan&quot;) %&gt;% # extract columns select(argillic, bedrckdepth, slope, elev, surface_total_frags_pct) %&gt;% # reshape to long format pivot_longer(cols = c(bedrckdepth, slope, elev, surface_total_frags_pct)) # examine results head(s_long) ## # A tibble: 6 × 3 ## argillic name value ## &lt;lgl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 FALSE bedrckdepth NA ## 2 FALSE slope 28 ## 3 FALSE elev 1761 ## 4 FALSE surface_total_frags_pct 85 ## 5 FALSE bedrckdepth 11 ## 6 FALSE slope 60 # plot results ggplot(s_long, aes(x = argillic, y = value)) + geom_boxplot() + facet_wrap(~ name, scale = &quot;free&quot;) Looking at boxplots of our numeric variables we can see none of them show much separation between the presense/absense of argillic horizons. 5.5.3 Soil Scientist Bias Next we’ll look at soil scientist bias. The question being: Are some soil scientists more likely to describe argillic horizons than others? Due to the excess number of soil scientist that have worked on CA794, including detailees, we’ve filtered the names of soil scientist to include just the top 3 mappers and given priority to the most senior soil scientists when they occur together. # Filter and sort most frequent soil scientists by seniority s &lt;- mutate( s, old = descname, descname2 = NA, descname2 = ifelse(grepl(&quot;Stephen&quot;, old), &quot;Stephen&quot;, descname2), # least senior descname2 = ifelse(grepl(&quot;Paul&quot;, old), &quot;Paul&quot;, descname2), descname2 = ifelse(grepl(&quot;Peter&quot;, old), &quot;Peter&quot;, descname2) # most senior ) s %&gt;% # subset rows using logical expression filter(landform_generic == &quot;fan&quot;) %&gt;% # cross-tabulate columns count(descname2, argillic) %&gt;% # calculate percent by group group_by(descname2) %&gt;% mutate(pct = round(n / sum(n) * 100)) %&gt;% # reshape the results into a table select(-n) %&gt;% pivot_wider(names_from = argillic, values_from = pct) ## # A tibble: 4 × 3 ## # Groups: descname2 [4] ## descname2 `FALSE` `TRUE` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Paul 73 27 ## 2 Peter 90 10 ## 3 Stephen 84 16 ## 4 &lt;NA&gt; 78 22 For fan landforms, one of the soil scientists seems more likely than the others to describe argillic horizons. However while this information is suggestive, it is far from definitive in showing a potential bias because it doesn’t take into account other factors. We’ll examine this more closely later. 5.5.4 Plot coordinates Where do our points plot? To start we need to convert them to a spatial object first. Then we can create an interactive we map using mapview. Also, if we wish we can also export the locations as a Shapefile. # subset rows with only complete X &amp; Y coordinates s_sub &lt;- filter(s, complete.cases(x_std, y_std)) # convert s_sub data.frame to a spatial object s_sf &lt;- st_as_sf(s_sub, # define coordinates coords = c(&quot;x_std&quot;, &quot;y_std&quot;), # define coordinate reference system using ESPG code crs = 4326 ) %&gt;% # reproject to equal area coordinate reference system using ESPG code st_transform(crs = 5070) # Download soil survey area boundaries ca794 &lt;- soilDB::fetchSDA_spatial(&quot;CA794&quot;, geom.src = &quot;sapolygon&quot;) %&gt;% # convert to spatial object st_as_sf() %&gt;% # reproject to equal area coordinate reference system using ESPG code st_transform(crs = 5070) # Plot interactive map mapview(ca794, alpha.regions = 0, lwd = 2) + mapview(s_sf, zcol = &quot;argillic&quot;) 5.6 Exercise 1: View the data Examine the interactive map. Hypothesize what predictor variables/landscape relationships might be predictive. 5.6.1 Extracting spatial data Prior to any spatial analysis or modeling, you will need to develop a suite of geodata files that can be intersected with your field data locations. This is, in and of itself a difficult task, and should be facilitated by your Regional GIS Specialist. Typically, these geodata files would primarily consist of derivatives from a DEM or satellite imagery. Prior to any prediction it is also necessary to ensure the geodata files have the same projection, extent, and cell size. Once we have the necessary files we can construct a list in R of the file names and paths, read the geodata into R, and then extract the geodata values where they intersect with field data. # load raster stack from GitHub githubURL &lt;- url(&quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/ca794_rs.rds&quot;) geodata_r &lt;- readRDS(githubURL) # Extract the geodata and add to a data frame data &lt;- raster::extract(geodata_r, as(s_sf, &quot;Spatial&quot;), sp = TRUE)@data # Modify some of the geodata variables data &lt;- mutate( data, cluster = factor(cluster), twi_sc = abs(twi - 13.8), # 13.8 = twi median gsi = (ls_3 - ls_1) / (ls_3 + ls_2 + ls_1), ndvi = (ls_4 - ls_3) / (ls_4 + ls_3), ) 5.6.2 Examine spatial data With our spatial data in hand, we can now see whether any of the variables will help us separate the presence/absence of argillic horizons. Because we’re dealing with a classification problem, we’ll compare the numeric variables using boxplots. What we’re looking for are variables with the least amount of overlap in their distribution (i.e. the greatest separation in their median values). URL &lt;- url(&quot;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/ch7_data.Rdata&quot;) load(URL) train &lt;- data # Select argillic horizons with &quot;arg&quot; in the subgroup name and on fans # Argillic horizons that occur on hills and mountains more than likely form by different process, and therefore would require a different model.train$argillic train &lt;- mutate( train, argillic = factor(ifelse(grepl(&quot;arg&quot;, taxsubgrp) &amp; train$mrvbf &gt; 0.15, &quot;yes&quot;, &quot;no&quot;)), ch_log = log(ch + 1), z2str_log = log(z2str + 1), ch = NULL, z2str = NULL ) train &lt;- select(train, c(argillic, z:z2str_log)) data_l &lt;- train %&gt;% select(-cluster, -geo) %&gt;% pivot_longer(col = - argillic) %&gt;% filter(!is.na(value)) ggplot(data_l, aes(x = argillic, y = value)) + geom_boxplot() + facet_wrap(~ name, scales = &quot;free&quot;) 5.7 Constructing the model R has several functions for fitting linear models. The most common is arguably the glm() function from the stats R package, which is loaded by default. The glm() function is also extended thru the use of several additional packages such as the car and caret R packages. Another noteworthy R package for logistic regrssion is rms, which offers the lrm() function. The rms R package (Harrell 2015) offers an ‘almost’ comprehesive alternative to glm() and it’s accessory function. It is difficult to objectively functions say which approach is better. Therefore methods both methods will be demonstrated. Look for comments (i.e. #) below referring to rms, stats, caret or visreg. # stats fit_glm &lt;- glm(argillic ~ z + slp + twi_sc + ch_log + z2str_log + mrrtf + solar + precip + precipsum + temp +tc_1 + tc_2 + tc_3 + k + th + u + cluster, data = train, family = binomial) # rms library(rms) dd &lt;- datadist(train) options(datadist = &quot;dd&quot;) fit_lrm &lt;- lrm(argillic ~ z + slp + twi_sc + ch_log + z2str_log + mrrtf + solar + precip + precipsum + temp + tc_1 + tc_2 + tc_3 + k + th + u, data = train, x = TRUE, y = TRUE) 5.7.1 Diagnostic 5.7.1.1 Residual plots One unfortunate side effect of side effect of logistic regression is that the default residual plots are not interpretable. However the partial residual plots can be useful for identifying outliers and nonlinear trends. par(mfcol = c(2, 2)) plot(fit_glm) termplot(fit_glm, partial.resid = TRUE, col.res = &quot;black&quot;, pch = 16) 5.7.1.2 Multicolinearity As we mentioned earlier multicolinearity should be avoided. To assess a model for multicolinearity we can compute the variance inflation factor (VIF). Its square root indicates the amount of increase in the predictor coefficients standard error. A value greater than 3 indicates a doubling the standard error. Rules of thumb vary, but a square root of vif greater than 2 or 3 indicates an unacceptable value. # vif() function from the rms or car packages sqrt(vif(fit_lrm)) # or sqrt(vif(fit_lrm)) &gt; 3 5.7.2 Variable Selection &amp; model validation Modeling is an iterative process that cycles between fitting and evaluating alternative models. Compared to tree and forest models, linear and generalized models typically require more scrunity from the user. Automated model selection procedures are available, but should not be taken at face value because they may result in complex and unstable models. This is in part due to correlation amongst the predictive variables that can confuse the model. Also, the order in which the variables are included or excluded from the model effects the significance of the other variables, and thus several weak predictors might mask the effect of one strong predictor. Regardless of the approach used, variable selection is probably the most controversial aspect of linear modeling. Both the rms and caret packages offer methods for variable selection and cross-validation. In this instance the rms approach is a bit more convinent and faster, with the one line call to validate(). set.seed(42) # rms ## stepwise selection and validation validate(fit_lrm, bw = TRUE) The results for validate() above show which variables were retained and deleted. Below we can see a dot matrix of which variables were retained in during the 40 iterations of the bootstrapping. In addition, below we can see the difference between the training and test accuracy and error metrics. Remember that it is the test accuracy we should pay attention too. 5.7.3 Final model &amp; accuracy Once we’ve settled on a final model we can fit it and validate it. The validate() function can also be used for cross-validation and will get multiple probability-based accuracy metrics, including: \\(R^2\\), the Brier score (B), Tjur’s D (D), and many others. final_lrm &lt;- lrm(argillic ~ slp + twi_sc + tc_1 + tc_2 + precipsum, data = train, x = TRUE, y = TRUE) validate(final_lrm, method = &quot;crossvalidation&quot;, B = 10) ## index.orig training test optimism index.corrected n ## Dxy 0.7068 0.7075 0.6800 0.0275 0.6793 10 ## R2 0.3202 0.3212 0.3001 0.0211 0.2991 10 ## Intercept 0.0000 0.0000 -0.1096 0.1096 -0.1096 10 ## Slope 1.0000 1.0000 0.9612 0.0388 0.9612 10 ## Emax 0.0000 0.0000 0.0310 0.0310 0.0310 10 ## D 0.1684 0.1690 0.1526 0.0164 0.1521 10 ## U -0.0017 -0.0019 -0.0028 0.0009 -0.0026 10 ## Q 0.1701 0.1709 0.1555 0.0154 0.1547 10 ## B 0.0755 0.0754 0.0772 -0.0018 0.0773 10 ## g 3.7232 3.7327 3.5918 0.1408 3.5824 10 ## gp 0.1311 0.1313 0.1270 0.0043 0.1268 10 # Compare the metrics from rms::validate() to aqp::brierScore() and modEvA::RsqGLM() pred &lt;- predict(final_lrm, train, type = &quot;fitted&quot;) test &lt;- data.frame(pred, obs = train$argillic == &quot;yes&quot;) # Brier score brierScore(test, classLabels = &quot;pred&quot;, actual = &quot;obs&quot;) ## [1] 0.07219881 # Nagelkerke D2 &amp; Tjur&#39;s D unlist(modEvA::RsqGLM(pred = test$pred, obs = test$obs, plot = FALSE)) ## CoxSnell Nagelkerke McFadden Tjur sqPearson ## 0.1557253 0.3201934 0.2540906 0.1842274 0.1879082 Because we’re dealing with a classification problem, we have to consider both errors of commission (Type I) and omission (Type II), or their corresponding accuracies of sensitivity and positive predicted value respectively. Before we can assess the error, however, we need to select a probability threshold. Sensitivity and specificity examine how well the ground truth or reference data compares to the predictions. Positive and negative predicted values examine the inverse concept of how well the predictions match the reference data as a function of their prevalence (see help(confusionMatrix). # examine possible thresholds ggplot(test, aes(x = pred, fill = obs)) + geom_density(alpha = 0.5) + geom_vline(aes(xintercept = 0.5), lty = &quot;dashed&quot;) + xlab(&quot;probability&quot;) + scale_x_continuous(breaks = seq(0, 1, 0.2)) test$predictedClass &lt;- ifelse(test$pred &gt; 0.25, TRUE, FALSE) # Confusion Matrix cm &lt;- table(predicted = test$predictedClass, observed = test$obs) confusionMatrix(cm, positive = &quot;TRUE&quot;) ## Confusion Matrix and Statistics ## ## observed ## predicted FALSE TRUE ## FALSE 954 56 ## TRUE 92 65 ## ## Accuracy : 0.8732 ## 95% CI : (0.8527, 0.8917) ## No Information Rate : 0.8963 ## P-Value [Acc &gt; NIR] : 0.994946 ## ## Kappa : 0.397 ## ## Mcnemar&#39;s Test P-Value : 0.004015 ## ## Sensitivity : 0.5372 ## Specificity : 0.9120 ## Pos Pred Value : 0.4140 ## Neg Pred Value : 0.9446 ## Prevalence : 0.1037 ## Detection Rate : 0.0557 ## Detection Prevalence : 0.1345 ## Balanced Accuracy : 0.7246 ## ## &#39;Positive&#39; Class : TRUE ## # Spatially variable accuracy test$cluster &lt;- train$cluster temp &lt;- test %&gt;% group_by(cluster) %&gt;% summarise( TP = sum(predictedClass == TRUE &amp; obs, na.rm = TRUE), FN = sum(predictedClass == FALSE &amp; obs, na.rm = TRUE), sensitivity = TP / (TP + FN), n = length(obs) ) ggplot(temp, aes(x = cluster, y = sensitivity, size = n)) + geom_point() Discuss the variability of the predictions across the clusters, perhaps different models need to be constructed in each cluster, some clusters appear to be dominated by specific soil series, these data aren’t clean enough (nor are the series concepts usually) to model series separately, however, we could use the clusters as an additional model to attempt to separate the series. Do the hyperthermic clusters perform differently. 5.7.4 Model effects # Model accuracy, and slopes (e.g. coefficents) final_lrm ## Frequencies of Missing Values Due to Each Variable ## argillic slp twi_sc tc_1 tc_2 precipsum ## 8 52 53 52 52 52 ## ## Logistic Regression Model ## ## lrm(formula = argillic ~ slp + twi_sc + tc_1 + tc_2 + precipsum, ## data = train, x = TRUE, y = TRUE) ## ## ## Model Likelihood Discrimination Rank Discrim. ## Ratio Test Indexes Indexes ## Obs 1167 LR chi2 197.55 R2 0.320 C 0.853 ## no 1046 d.f. 5 R2(5,1167)0.152 Dxy 0.707 ## yes 121 Pr(&gt; chi2) &lt;0.0001 R2(5,325.4)0.447 gamma 0.707 ## max |deriv| 0.0004 Brier 0.075 tau-a 0.131 ## ## Coef S.E. Wald Z Pr(&gt;|Z|) ## Intercept -2.3859 1.8877 -1.26 0.2062 ## slp -0.1968 0.0394 -5.00 &lt;0.0001 ## twi_sc -0.4272 0.0887 -4.82 &lt;0.0001 ## tc_1 -0.0104 0.0076 -1.36 0.1730 ## tc_2 0.0259 0.0237 1.09 0.2748 ## precipsum 0.0743 0.0247 3.01 0.0026 # Chi-square anova(final_lrm) ## Wald Statistics Response: argillic ## ## Factor Chi-Square d.f. P ## slp 24.97 1 &lt;.0001 ## twi_sc 23.20 1 &lt;.0001 ## tc_1 1.86 1 0.1730 ## tc_2 1.19 1 0.2748 ## precipsum 9.06 1 0.0026 ## TOTAL 85.86 5 &lt;.0001 # Model Effects plot(summary(final_lrm)) # Plot Effects ggplot(Predict(final_lrm, fun = plogis)) View the results in ArcGIS and examine the accuracy at individual points Discuss the effects of data quality, including both NASIS and GIS Discuss how the modeling process isn’t an end in itself, but serves to uncover trends, possibly generate additional questions and direct future investigations 5.8 Generate spatial predictions # Custom function to return the predictions and their standard errors library(raster) predfun &lt;- function(model, data) { prob &lt;- predict(model, data, type = &quot;fitted&quot;) H &lt;- apply(cbind(prob, 1 - prob), 1, shannonEntropy) cbind(prob, H) } # Generate spatial predictions r &lt;- predict(geodata_r, final_lrm, fun = predfun, index = 1:2, progress = &quot;text&quot;) ## | | | 0% library(raster) # argillic probability plot(r[[1]], ) # argillic Shannon Entropy plot(r[[2]]) 5.9 Exercise Construct a dataset of shallow soils as shown below. train2 &lt;- allocate(pedons, to = &quot;ST Diagnostic Features&quot;) train2$shallow &lt;- grepl(&quot;contact&quot;, train2$featkind) &amp; train2$featdept &lt; 50 train2 &lt;- left_join(data, train2, by = &quot;peiid&quot;) train2$shallow[is.na(train2$shallow)] &lt;- FALSE train2 &lt;- select(train2, z:mast, pc_1:u, ndvi:gsi, shallow) Fit a GLM Perform a variable selection Does the automatic selection make sense? Assess the model accuracy and plot the fit How do the train vs test accuracies compare? Summarize and plot the model effects Which variable has the steepest slope? Which variable has the greatest effect? Which variable has the highest Chi-squared? 5.10 Additional reading The application of generalized linear models in soil science are described by Lane (2002).@james2021 provide a useful introduction to logistic regression. References "],["tree-based-models.html", "Chapter 6 Tree-based Models 6.1 Introduction 6.2 Exploratory Data Analysis 6.3 Classification and Regression Trees (CART) 6.4 Random Forest 6.5 Prediction using Tree-based Models 6.6 Summary", " Chapter 6 Tree-based Models Statistics for pedologists course banner image 6.1 Introduction Tree-based models are a supervised machine learning method commonly used in soil survey and ecology for exploratory data analysis and prediction due to their simplistic nonparametric design. Instead of fitting a model to the data, tree-based models recursively partition the data into increasingly homogenous groups based on values that minimize a loss function (such as Sum of Squared Errors (SSE) for regression or Gini Index for classification) (James et al. 2021). The two most common packages for generating tree-based models in R are rpart (Therneau and Atkinson 2019) and randomForest (Liaw and Wiener 2002). The rpart package creates a regression or classification tree based on binary splits that maximize homogeneity and minimize impurity. The output is a single decision tree that can be further “pruned” or trimmed back using the cross-validation error statistic to reduce over-fitting. The randomForest package is similar to rpart, but is double random in that each node is split using a random subset of predictors AND observations at each node and this process is repeated hundreds of times (as specified by the user). Unlike rpart, random forests do not produce a graphical decision tree since the predictions are averaged across hundreds or thousands of trees. Instead, random forests produce a variable importance plot and a tabular statistical summary. 6.2 Exploratory Data Analysis The data that we will be working with in this chapter were collected in support of a MLRA 127 soil survey update project to tabularly and spatially update SSRUGO map units for spodic properties in the Monongahela National Forest. Soils that were historically covered by Eastern Hemlock and Red Spruce exhibit spodic morphology on shale, siltstone, and sandstone bedrocks at elevations typically &gt;3,200 ft in West Virginia (Nauman et al. 2015). The landscape and vegetative communities were greatly altered by fire and logging in the early 1900s, complicating the identification of spodic morphology. It is of particular interest to the project leader and the U.S. Forest Service that spatial maps be developed to depict the location of spodic morphology and folistic epipedons in the Monongahela National Forest. Folistic epipedons provide habitat for the Northern Flying Squirrel, just recently removed from the endangered species list. 6.2.1 Getting Data Into R and Exporting to Shapefile Before we dive in to model building, let’s first import and plot the dataset in R. library(dplyr) # data manipulation library(ggplot2) # graphing library(sf) # spatial data library(mapview) # maps library(corrplot) # graphical display of correlation matrix url &lt;-&#39;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/logistic/wv_transect_editedforR.csv&#39; soildata &lt;- read.csv(url) soildata &lt;- st_as_sf( soildata, coords = c(&quot;x&quot;, &quot;y&quot;), # set the coordinates; converting dataframe to a spatial object crs = 4326) # set the projection; https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/OverviewCoordinateReferenceSystems.pdf mapview(soildata) # convert soildata into a shapefile # edit DSN path accordingly write_sf(soildata, dsn = &quot;C:/workspace/soildata.shp&quot;) Conveniently, environmental covariate values were previously extracted for all of the observations in the soildata dataset. How would you extract raster data to points in R? (Hint) 6.2.2 Examining Data in R #since we converted the `soildata` `data.frame` to a spatial object to export as an ESRI shapefile, we will need to convert it back to a `data.frame` to plot and further examine the data in R #re-importing the data and overwriting the soildata object is just one way to achieve this url &lt;- &#39;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/logistic/wv_transect_editedforR.csv&#39; soildata &lt;- read.csv(url) # view the data # View(soildata) str(soildata) #examine the internal data structure ## &#39;data.frame&#39;: 250 obs. of 50 variables: ## $ x : num -79.7 -79.7 -79.7 -79.8 -79.7 ... ## $ y : num 38.6 38.6 38.6 38.6 38.6 ... ## $ Overtype : chr &quot;Hardwood&quot; &quot;Hardwood&quot; &quot;Hardwood&quot; &quot;Hardwood&quot; ... ## $ Underconifer: chr &quot;n&quot; &quot;y&quot; &quot;n&quot; &quot;y&quot; ... ## $ Oi : num 3 4 3 4 3 2 2 2 4 3 ... ## $ Oe : num 0 0 2 4 4 6 4 2 2 4 ... ## $ Oa : num 0 3 0 0 8 0 0 0 7 4 ... ## $ Otot : num 3 7 5 8 15 8 6 4 13 7 ... ## $ epipedon : chr &quot;ochric&quot; &quot;ochric&quot; &quot;ochric&quot; &quot;ochric&quot; ... ## $ spodint : num 0 0 0 0 1 1 1 0.5 1 0 ... ## $ subgroup : chr &quot;typic&quot; &quot;typic&quot; &quot;typic&quot; &quot;typic&quot; ... ## $ order : chr &quot;ultisol&quot; &quot;inceptisol&quot; &quot;ultisol&quot; &quot;inceptisol&quot; ... ## $ ps : chr &quot;fl&quot; &quot;ls&quot; &quot;fl&quot; &quot;cl&quot; ... ## $ drainage : chr &quot;wd&quot; &quot;wd&quot; &quot;wd&quot; &quot;wd&quot; ... ## $ series : chr &quot;Carrollton&quot; &quot;Mandy&quot; &quot;Carrollton&quot; &quot;Mandy&quot; ... ## $ taxon : chr &quot;series&quot; &quot;series&quot; &quot;series&quot; &quot;taxadjunct&quot; ... ## $ slope : int 45 54 39 25 38 30 38 36 16 36 ... ## $ surfacetex : chr &quot;l&quot; &quot;l&quot; &quot;cnl&quot; &quot;l&quot; ... ## $ stoniness : chr &quot;stx&quot; &quot;stv&quot; &quot;stx&quot; &quot;stv&quot; ... ## $ depthclass : chr &quot;md&quot; &quot;md&quot; &quot;md&quot; &quot;md&quot; ... ## $ bedrockdepth: int 200 200 200 200 200 200 200 200 200 200 ... ## $ depth_cm : int 67 69 52 95 93 81 86 90 75 92 ... ## $ hillslope : chr &quot;backslope&quot; &quot;backslope&quot; &quot;backslope&quot; &quot;backslope&quot; ... ## $ tipmound : int 0 0 0 0 0 0 0 0 0 0 ... ## $ rainfall : int 51 51 51 51 51 51 51 51 51 51 ... ## $ geology : chr &quot;Dch&quot; &quot;Dhs&quot; &quot;Dhs&quot; &quot;Dhs&quot; ... ## $ aachn : num 27.46 81.7 2.59 43.36 70.75 ... ## $ dem10m : num 1123 1239 1155 1240 1211 ... ## $ downslpgra : num 25.9 25.1 78 37 26.1 ... ## $ eastness : num -0.53 0.972 1 0.9 -0.474 ... ## $ greenrefl : num 0.1035 0.0425 0.0351 0.0776 0.0721 ... ## $ landsatb1 : num 0.0726 0.0742 0.0742 0.0775 0.0694 ... ## $ landsatb2 : num 0.062 0.0583 0.0547 0.0583 0.0528 ... ## $ landsatb3 : num 0.0335 0.0351 0.0301 0.0419 0.0318 ... ## $ landsatb7 : num 0.0494 0.0516 0.043 0.0451 0.0302 ... ## $ maxc100 : num -0.0845 -0.0963 -0.0848 0.2386 0.1368 ... ## $ maxent : num 20.26 30.21 27.44 7.88 73.85 ... ## $ minc100 : num -0.1925 -0.1457 -0.8324 0.069 0.0998 ... ## $ mirref : num 0.1608 0.0827 0.1109 0.1477 0.0762 ... ## $ ndvi : num 0.866 0.822 0.842 0.8 0.77 ... ## $ northeastn : num -0.974 0.854 0.728 0.944 -0.958 ... ## $ northness : num -0.848 0.237 0.03 0.435 -0.88 ... ## $ northwestn : num -0.225 -0.52 -0.686 -0.329 -0.287 ... ## $ planc100 : num -0.1177 -0.1077 -0.2173 0.1321 0.0476 ... ## $ proc100 : num -0.231 -0.178 -0.735 0.221 0.161 ... ## $ protection : num 0.237 0.154 0.222 0.114 0.138 ... ## $ relpos11 : num 0.352 0.507 0.233 0.544 0.585 ... ## $ slp50 : num 42.4 42.3 26.3 24.5 36.3 ... ## $ solar : int 1481510 1280610 1348160 1322630 1532160 1536340 1488440 1155820 1440500 1474730 ... ## $ tanc75 : num 0.0511 0.0279 0.0553 -0.0187 -0.0346 ... The example dataset, soildata, consists of 250 observations and 58 variables that were collected in the field or derived from geospatial data to identify spodic soil properties in West Virginia. Of particular interest is determining best splits for spodic intensity (relative spodicity index). As you can see in the data structure, R interpreted the spodint field as numeric. Since spodint is an index, it will need to be changed to a factor and then to an ordered factor. The same will need to be done for tipmound (a tip and mound microtopography index). set.seed(250) soildata &lt;- mutate(soildata, spodint = factor(spodint, ordered = TRUE), tipmound = factor(tipmound, ordered = TRUE) ) Next, let’s explore the tabular data: # does solar radiation affect spodic intensity? ggplot(soildata, aes(x = spodint, y = solar)) + geom_boxplot() + xlab(&quot;spodic intensity&quot;) + ylab(&quot;solar&quot;) #how about aspect? ggplot(soildata, aes(x = spodint, y = northwestn)) + geom_boxplot() + xlab(&quot;spodic intensity&quot;) + ylab(&quot;northwestness&quot;) #distribution of O horizon thickness among soil orders ggplot(soildata, aes(x = Otot)) + geom_density() + facet_wrap(~ order) # combine numeric columns into a new data frame numeric &lt;- soildata[, c(8, 25, 27:50)] names(numeric) ## [1] &quot;Otot&quot; &quot;rainfall&quot; &quot;aachn&quot; &quot;dem10m&quot; &quot;downslpgra&quot; ## [6] &quot;eastness&quot; &quot;greenrefl&quot; &quot;landsatb1&quot; &quot;landsatb2&quot; &quot;landsatb3&quot; ## [11] &quot;landsatb7&quot; &quot;maxc100&quot; &quot;maxent&quot; &quot;minc100&quot; &quot;mirref&quot; ## [16] &quot;ndvi&quot; &quot;northeastn&quot; &quot;northness&quot; &quot;northwestn&quot; &quot;planc100&quot; ## [21] &quot;proc100&quot; &quot;protection&quot; &quot;relpos11&quot; &quot;slp50&quot; &quot;solar&quot; ## [26] &quot;tanc75&quot; # calculate correlation matrix cormatrix &lt;- cor(numeric) # plot correlation matrix corrplot(cormatrix, method = &quot;circle&quot;) 6.2.3 Exercise 1 Examine the soildata shapefile and environmental covariate data in ArcGIS. Come up with a theory of which possible covariates might be useful for predicting spodic morphology and folistic epipedons. Also, think of the different possible ways to model these features given the soildata dataset. 6.3 Classification and Regression Trees (CART) The basic form for all CART models is (y ~ x), where y is the dependent variable to be predicted from x, a set of independent variables. If the dependent variable (y) is numeric, the resulting tree will be a regression tree. Conversely, if the dependent variable (y) is categorical, the resulting tree will be a classification tree. The rpart package allows all data types to be used as independent variables, regardless of whether the model is a classification or regression tree. The rpart algorithm ignores missing values when determining the quality of a split and uses surrogate splits to determine if observation(s) with missing data is best split left or right. If an observation is missing all surrogate splits, then the observation(s) is sent to the child node with the largest relative frequency (Feelders, 1999). Assuming that the rpart and randomForest packages are already installed on your machine, simply load the packages using the library() function. library(rpart) # CART models library(randomForest) # random forest library(rpart.plot) # rpart plot graphics library(caret) # confusion matrix If you wanted to create a classification tree for spodint using all of the variables, you would simply type: rpart(spodint ~ ., data=soildata). Since our goal is to generate a spatial prediction model, we only want to use the variables for which we have spatial coverage–our environmental covariate rasters. spodintmodel &lt;- rpart( spodint ~ rainfall + geology + aachn + dem10m + downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + landsatb3 +landsatb7 + maxc100 + maxent + minc100 + mirref + ndvi+ northeastn + northness + northwestn + planc100 + proc100 + protection + relpos11 + slp50 + solar + tanc75, data = soildata, method = &quot;class&quot; ) spodintmodel ## n= 250 ## ## node), split, n, loss, yval, (yprob) ## * denotes terminal node ## ## 1) root 250 162 0 (0.35 0.084 0.26 0.024 0.28) ## 2) northwestn&lt; 0.55138 148 80 0 (0.46 0.081 0.29 0.027 0.14) ## 4) maxc100&lt; 0.10341 57 20 0 (0.65 0.088 0.14 0.018 0.11) * ## 5) maxc100&gt;=0.10341 91 56 1 (0.34 0.077 0.38 0.033 0.16) ## 10) solar&lt; 1504355 83 52 0 (0.37 0.084 0.33 0.036 0.18) ## 20) minc100&lt; -0.197089 9 1 0 (0.89 0 0 0 0.11) * ## 21) minc100&gt;=-0.197089 74 47 1 (0.31 0.095 0.36 0.041 0.19) ## 42) maxent&lt; 12.9024 23 10 0 (0.57 0.13 0.26 0.043 0) ## 84) solar&lt; 1460005 16 5 0 (0.69 0.19 0.12 0 0) * ## 85) solar&gt;=1460005 7 3 1 (0.29 0 0.57 0.14 0) * ## 43) maxent&gt;=12.9024 51 30 1 (0.2 0.078 0.41 0.039 0.27) ## 86) greenrefl&gt;=0.01846795 40 20 1 (0.22 0.075 0.5 0.025 0.17) ## 172) dem10m&gt;=1012.96 33 14 1 (0.27 0.061 0.58 0 0.091) ## 344) minc100&lt; 0.06651935 24 7 1 (0.21 0.083 0.71 0 0) * ## 345) minc100&gt;=0.06651935 9 5 0 (0.44 0 0.22 0 0.33) * ## 173) dem10m&lt; 1012.96 7 3 2 (0 0.14 0.14 0.14 0.57) * ## 87) greenrefl&lt; 0.01846795 11 4 2 (0.091 0.091 0.091 0.091 0.64) * ## 11) solar&gt;=1504355 8 0 1 (0 0 1 0 0) * ## 3) northwestn&gt;=0.55138 102 53 2 (0.2 0.088 0.22 0.02 0.48) ## 6) protection&lt; 0.0988242 25 15 1 (0.2 0.16 0.4 0.04 0.2) ## 12) proc100&lt; 0.1502945 14 10 0 (0.29 0.29 0.14 0 0.29) * ## 13) proc100&gt;=0.1502945 11 3 1 (0.091 0 0.73 0.091 0.091) * ## 7) protection&gt;=0.0988242 77 33 2 (0.19 0.065 0.16 0.013 0.57) ## 14) maxent&lt; 9.5806 30 19 0 (0.37 0.1 0.17 0.033 0.33) ## 28) rainfall&lt; 52 9 2 0 (0.78 0 0 0 0.22) * ## 29) rainfall&gt;=52 21 13 2 (0.19 0.14 0.24 0.048 0.38) ## 58) landsatb7&gt;=0.0398039 12 7 1 (0.17 0.25 0.42 0 0.17) * ## 59) landsatb7&lt; 0.0398039 9 3 2 (0.22 0 0 0.11 0.67) * ## 15) maxent&gt;=9.5806 47 13 2 (0.085 0.043 0.15 0 0.72) * plot(spodintmodel) text(spodintmodel, cex = 0.8) #cex is text size #if you are having trouble viewing the text in the plot window, click zoom to open a bigger window #you may also need to adjust the plot margins or text size; for this example, try: par(mar = c(3, 6, 3, 6)) plot(spodintmodel) text(spodintmodel, cex = 0.6) For more plot customization, use the rpart.plot package. # extra=3 displays the misclassification rate at the node, expressed as the number of incorrect classifications divided by the total observations in the node; there are many options under the extra setting for classification models rpart.plot(spodintmodel, extra = 3) # adding 100 to the extra setting displays the percentage observations in the node rpart.plot(spodintmodel, extra = 103) # prp is another function in the rpart.plot package that has numerous plot customization options prp(spodintmodel, type = 1, extra = 1, branch = 1) Notice that the terminal nodes display the different spodic intensity classes, ranging from 0 to 2. Can you think of another way that we could model spodic expression? Could we treat spodic intesity (an ordered factor) as numeric, ranging from 0 to 1 to develop a regression tree? Does this make sense? what would a mean of 1 tell you about the observations in the terminal node? What if we considered everything with a spodic intensity of &lt;= 0.5 to be non-spodic and everything &gt;0.5 to be spodic? A binary probability approach to predicting spodic morphology, similar to Nauman et al., 2015. # index for lookup table index &lt;- c(0, 0.5, 1, 1.5, 2) # assigning corresponding categories to look up values values &lt;- c(&quot;nonspodic&quot;, &quot;nonspodic&quot;, &quot;spodic&quot;, &quot;spodic&quot;, &quot;spodic&quot;) # match spodint to index and assign values soildata$newcolumn &lt;- values[match(soildata$spodint, index)] # convert new column from character to factor soildata$newcolumn &lt;- as.factor(soildata$newcolumn) spodintmodel2 &lt;- rpart( newcolumn ~ rainfall + geology + aachn + dem10m + downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + landsatb3 +landsatb7 + maxc100 + maxent + minc100 + mirref + ndvi+ northeastn + northness + northwestn + planc100 + proc100 + protection + relpos11 + slp50 + solar + tanc75, data = soildata, method = &quot;class&quot; ) spodintmodel2 ## n= 250 ## ## node), split, n, loss, yval, (yprob) ## * denotes terminal node ## ## 1) root 250 109 spodic (0.4360000 0.5640000) ## 2) eastness&gt;=-0.1275925 100 36 nonspodic (0.6400000 0.3600000) ## 4) tanc75&gt;=-0.0268239 64 16 nonspodic (0.7500000 0.2500000) * ## 5) tanc75&lt; -0.0268239 36 16 spodic (0.4444444 0.5555556) ## 10) northeastn&gt;=0.7433605 13 3 nonspodic (0.7692308 0.2307692) * ## 11) northeastn&lt; 0.7433605 23 6 spodic (0.2608696 0.7391304) * ## 3) eastness&lt; -0.1275925 150 45 spodic (0.3000000 0.7000000) ## 6) minc100&lt; -0.1576455 47 23 spodic (0.4893617 0.5106383) ## 12) dem10m&gt;=1054.305 15 2 nonspodic (0.8666667 0.1333333) * ## 13) dem10m&lt; 1054.305 32 10 spodic (0.3125000 0.6875000) ## 26) protection&gt;=0.178847 13 5 nonspodic (0.6153846 0.3846154) * ## 27) protection&lt; 0.178847 19 2 spodic (0.1052632 0.8947368) * ## 7) minc100&gt;=-0.1576455 103 22 spodic (0.2135922 0.7864078) ## 14) landsatb7&gt;=0.0440802 37 15 spodic (0.4054054 0.5945946) ## 28) planc100&lt; -0.00902005 8 1 nonspodic (0.8750000 0.1250000) * ## 29) planc100&gt;=-0.00902005 29 8 spodic (0.2758621 0.7241379) * ## 15) landsatb7&lt; 0.0440802 66 7 spodic (0.1060606 0.8939394) * plot(spodintmodel2) text(spodintmodel2, cex = 0.8) Notice that several of the splits changed. Which model performed better? One way to compare the two models is to use the function printcp(): printcp(spodintmodel) ## ## Classification tree: ## rpart(formula = spodint ~ rainfall + geology + aachn + dem10m + ## downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + ## landsatb3 + landsatb7 + maxc100 + maxent + minc100 + mirref + ## ndvi + northeastn + northness + northwestn + planc100 + proc100 + ## protection + relpos11 + slp50 + solar + tanc75, data = soildata, ## method = &quot;class&quot;) ## ## Variables actually used in tree construction: ## [1] dem10m greenrefl landsatb7 maxc100 maxent minc100 ## [7] northwestn proc100 protection rainfall solar ## ## Root node error: 162/250 = 0.648 ## ## n= 250 ## ## CP nsplit rel error xerror xstd ## 1 0.179012 0 1.00000 1.00000 0.046614 ## 2 0.030864 1 0.82099 0.90741 0.048039 ## 3 0.029321 2 0.79012 1.03704 0.045822 ## 4 0.018519 7 0.63580 1.04321 0.045677 ## 5 0.015432 8 0.61728 0.99383 0.046733 ## 6 0.012346 11 0.56790 0.99383 0.046733 ## 7 0.010000 14 0.53086 1.01235 0.046365 printcp(spodintmodel2) ## ## Classification tree: ## rpart(formula = newcolumn ~ rainfall + geology + aachn + dem10m + ## downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + ## landsatb3 + landsatb7 + maxc100 + maxent + minc100 + mirref + ## ndvi + northeastn + northness + northwestn + planc100 + proc100 + ## protection + relpos11 + slp50 + solar + tanc75, data = soildata, ## method = &quot;class&quot;) ## ## Variables actually used in tree construction: ## [1] dem10m eastness landsatb7 minc100 northeastn planc100 protection ## [8] tanc75 ## ## Root node error: 109/250 = 0.436 ## ## n= 250 ## ## CP nsplit rel error xerror xstd ## 1 0.256881 0 1.00000 1.00000 0.071933 ## 2 0.050459 1 0.74312 0.81651 0.069456 ## 3 0.027523 5 0.54128 0.83486 0.069795 ## 4 0.010000 8 0.45872 0.86239 0.070263 The printcp() funtion generates a cost complexity parameter table that provides the complexity parameter value (CP), relative model error (1 - relative error = ~variance explained), error estimated from a 10-fold cross validation (xerror), and the standard error of the xerror (xstd). The CP values control the size of the tree; the greater the CP value, the fewer the number of splits in the tree. To determine the optimal CP value, rpart automatically performs a 10-fold cross validation. The optimal size of the tree is generally the row in the CP table that minimizes all error with the fewest branches. Another way to determine the optimal tree size is to use the plotcp() function. This will plot the xerror versus cp value and tree size. plotcp(spodintmodel) plotcp(spodintmodel2) The optimal CP value is 0.029321 for spodintmodel and 0.050459 for spodintmodel2. Since both spodic intensity models overfit that data, they will need to be pruned using the prune() function. pruned &lt;- prune(spodintmodel, cp = 0.029321) printcp(pruned) ## ## Classification tree: ## rpart(formula = spodint ~ rainfall + geology + aachn + dem10m + ## downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + ## landsatb3 + landsatb7 + maxc100 + maxent + minc100 + mirref + ## ndvi + northeastn + northness + northwestn + planc100 + proc100 + ## protection + relpos11 + slp50 + solar + tanc75, data = soildata, ## method = &quot;class&quot;) ## ## Variables actually used in tree construction: ## [1] northwestn protection ## ## Root node error: 162/250 = 0.648 ## ## n= 250 ## ## CP nsplit rel error xerror xstd ## 1 0.179012 0 1.00000 1.00000 0.046614 ## 2 0.030864 1 0.82099 0.90741 0.048039 ## 3 0.029321 2 0.79012 1.03704 0.045822 rpart.plot(pruned, extra = 3) pruned2 &lt;- prune(spodintmodel2, cp = 0.050459) printcp(pruned2) ## ## Classification tree: ## rpart(formula = newcolumn ~ rainfall + geology + aachn + dem10m + ## downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + ## landsatb3 + landsatb7 + maxc100 + maxent + minc100 + mirref + ## ndvi + northeastn + northness + northwestn + planc100 + proc100 + ## protection + relpos11 + slp50 + solar + tanc75, data = soildata, ## method = &quot;class&quot;) ## ## Variables actually used in tree construction: ## [1] eastness ## ## Root node error: 109/250 = 0.436 ## ## n= 250 ## ## CP nsplit rel error xerror xstd ## 1 0.256881 0 1.00000 1.00000 0.071933 ## 2 0.050459 1 0.74312 0.81651 0.069456 rpart.plot(pruned2, extra = 3) The misclassification rate (in cross-validation) for the spodintmodel was 57% (root node error * xerror * 100) which dropped to 38% in the spodintmodel2. Why did the performance of these models differ significantly? Let’s compute an internal validation using a confusion matrix to further examine differences in these models. In order to do this, we will need to split our data into a training and test set. ## splits 70% of the data selected randomly into training set and the remaining 30% sample into test set datasplit &lt;- sample(nrow(soildata), nrow(soildata) * 0.7) train &lt;- soildata[datasplit,] test &lt;- soildata[-datasplit,] spodintmodel &lt;- rpart( spodint ~ rainfall + geology + aachn + dem10m + downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + landsatb3 +landsatb7 + maxc100 + maxent + minc100 + mirref + ndvi+ northeastn + northness + northwestn + planc100 + proc100 + protection + relpos11 + slp50 + solar + tanc75, data = train, method = &quot;class&quot; ) printcp(spodintmodel) ## ## Classification tree: ## rpart(formula = spodint ~ rainfall + geology + aachn + dem10m + ## downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + ## landsatb3 + landsatb7 + maxc100 + maxent + minc100 + mirref + ## ndvi + northeastn + northness + northwestn + planc100 + proc100 + ## protection + relpos11 + slp50 + solar + tanc75, data = train, ## method = &quot;class&quot;) ## ## Variables actually used in tree construction: ## [1] aachn maxc100 maxent northwestn planc100 protection ## ## Root node error: 112/175 = 0.64 ## ## n= 175 ## ## CP nsplit rel error xerror xstd ## 1 0.205357 0 1.00000 1.00000 0.056695 ## 2 0.080357 1 0.79464 0.81250 0.059010 ## 3 0.044643 2 0.71429 0.82143 0.058979 ## 4 0.035714 3 0.66964 0.84821 0.058840 ## 5 0.026786 6 0.56250 0.81250 0.059010 ## 6 0.010000 7 0.53571 0.86607 0.058708 pruned &lt;- prune(spodintmodel, cp = 0.070175) # predicting class test data using the pruned model pred &lt;- predict(pruned, newdata=test, type = &quot;class&quot;) # computes confusion matrix and summary statistics # sensitivity = producer&#39;s accuracy and specificity = user&#39;s accuracy confusionMatrix(pred, test$spodint) ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 0.5 1 1.5 2 ## 0 16 3 12 1 7 ## 0.5 0 0 0 0 0 ## 1 2 0 2 1 1 ## 1.5 0 0 0 0 0 ## 2 7 3 7 0 13 ## ## Overall Statistics ## ## Accuracy : 0.4133 ## 95% CI : (0.3008, 0.533) ## No Information Rate : 0.3333 ## P-Value [Acc &gt; NIR] : 0.09044 ## ## Kappa : 0.1525 ## ## Mcnemar&#39;s Test P-Value : NA ## ## Statistics by Class: ## ## Class: 0 Class: 0.5 Class: 1 Class: 1.5 Class: 2 ## Sensitivity 0.6400 0.00 0.09524 0.00000 0.6190 ## Specificity 0.5400 1.00 0.92593 1.00000 0.6852 ## Pos Pred Value 0.4103 NaN 0.33333 NaN 0.4333 ## Neg Pred Value 0.7500 0.92 0.72464 0.97333 0.8222 ## Prevalence 0.3333 0.08 0.28000 0.02667 0.2800 ## Detection Rate 0.2133 0.00 0.02667 0.00000 0.1733 ## Detection Prevalence 0.5200 0.00 0.08000 0.00000 0.4000 ## Balanced Accuracy 0.5900 0.50 0.51058 0.50000 0.6521 spodintmodel2 &lt;- rpart( newcolumn ~ rainfall + geology + aachn + dem10m + downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + landsatb3 +landsatb7 + maxc100 + maxent + minc100 + mirref + ndvi+ northeastn + northness + northwestn + planc100 + proc100 + protection + relpos11 + slp50 + solar + tanc75, data = train, method = &quot;class&quot; ) printcp(spodintmodel2) ## ## Classification tree: ## rpart(formula = newcolumn ~ rainfall + geology + aachn + dem10m + ## downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + ## landsatb3 + landsatb7 + maxc100 + maxent + minc100 + mirref + ## ndvi + northeastn + northness + northwestn + planc100 + proc100 + ## protection + relpos11 + slp50 + solar + tanc75, data = train, ## method = &quot;class&quot;) ## ## Variables actually used in tree construction: ## [1] dem10m eastness landsatb7 ndvi northeastn proc100 rainfall ## [8] tanc75 ## ## Root node error: 78/175 = 0.44571 ## ## n= 175 ## ## CP nsplit rel error xerror xstd ## 1 0.269231 0 1.00000 1.00000 0.084298 ## 2 0.070513 1 0.73077 0.91026 0.083278 ## 3 0.047009 3 0.58974 0.92308 0.083459 ## 4 0.025641 6 0.44872 0.93590 0.083627 ## 5 0.012821 9 0.37179 0.93590 0.083627 ## 6 0.010000 10 0.35897 0.93590 0.083627 pruned2 &lt;- prune(spodintmodel2, cp=0.050459) # predicting class of test data using the pruned model pred2 &lt;- predict(pruned2, newdata = test, type = &quot;class&quot;) # computes confusion matrix and summary statistics confusionMatrix(pred2, test$newcolumn) ## Confusion Matrix and Statistics ## ## Reference ## Prediction nonspodic spodic ## nonspodic 14 7 ## spodic 17 37 ## ## Accuracy : 0.68 ## 95% CI : (0.5622, 0.7831) ## No Information Rate : 0.5867 ## P-Value [Acc &gt; NIR] : 0.06228 ## ## Kappa : 0.3072 ## ## Mcnemar&#39;s Test P-Value : 0.06619 ## ## Sensitivity : 0.4516 ## Specificity : 0.8409 ## Pos Pred Value : 0.6667 ## Neg Pred Value : 0.6852 ## Prevalence : 0.4133 ## Detection Rate : 0.1867 ## Detection Prevalence : 0.2800 ## Balanced Accuracy : 0.6463 ## ## &#39;Positive&#39; Class : nonspodic ## The accuracy of the spodintmodel using split sample internal validation was 39% (61% misclassification error). The model incorrectly classified all spodic intensity ratings of 0.5 and 1.5. The accuracy of the spodintmodel2 was 63% (37% misclassification error). The model was able to predict spodic better than nonspodic. Notice that both of the misclassification errors increased slightly using the split sample validation versus the deafult internal 10-fold cross-validation used in by the rpart package. It is not uncommon to see slight differences in overall model performance between validations. In this case, it confirms that the first model is relatively 40% accurate and the second model is relatively 63% accurate. As a side note: The default 10-fold internal cross-validation in rpart divides the data into 10 subsets, using 9 sets as ‘learning samples’ to create trees, and 1 set as ‘test samples’ to calculate error rates. This process is repeated for all possible combinations of learning and test samples (a total of 10 times), and error rates are averaged to estimate the error rate for the full data set. 6.3.1 Exercise 2: rpart The examples above dealt with classification trees which resulted in categorical terminal nodes determined by majority votes. In a regression tree model, terminal nodes reflect the mean of the observations in that node. Using the soildata dataset, construct a rpart regression tree model to predict total O horizon thickness. Prune the model if necessary and answer the following questions: ** 1) Was the majority of the variance in total O horizon thickness captured with the rpart model?** ** 2) What were the most important variables in the model?** ** 3) How could the model be improved?** 6.4 Random Forest The randomForest algorithm fits hundreds to thousands of CART models to random subsets of input data and combines the trees for prediction. Similarly to rpart, randomForest allows all data types to be used as independent variables, regardless of whether the model is a classification or regression tree. Unlike rpart, the randomForest algorithm does not straight forwardly handle missing values with surrogate splits. There is a function called rfImpute() that uses a proximity matrix from the randomForest to populate missing values with either the weighted average of the non-missing observations (weighted by the proximities) for continuous predictors or the category with the largest average proximity for categorical predictors. Going back to the soildata dataset, let’s generate a random forest regression model for total O horizon thickness and compare it to the one we just generated in rpart. Just like rpart, randomForest has the same basic model function: (y ~ x). # importance = TRUE will allow the generation of a variable importance plot rf &lt;- randomForest( Otot ~ rainfall + geology + aachn + dem10m + downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + landsatb3 +landsatb7 + maxc100 + maxent + minc100 + mirref + ndvi+ northeastn + northness + northwestn + planc100 + proc100 + protection + relpos11 + slp50 + solar + tanc75, data = soildata, importance = TRUE, ntree = 1000, mtry = 10 ) # statistical summary rf ## ## Call: ## randomForest(formula = Otot ~ rainfall + geology + aachn + dem10m + downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + landsatb3 + landsatb7 + maxc100 + maxent + minc100 + mirref + ndvi + northeastn + northness + northwestn + planc100 + proc100 + protection + relpos11 + slp50 + solar + tanc75, data = soildata, importance = TRUE, ntree = 1000, mtry = 10) ## Type of random forest: regression ## Number of trees: 1000 ## No. of variables tried at each split: 10 ## ## Mean of squared residuals: 28.19145 ## % Var explained: 21.6 # out of bag (OOB) error rate versus number of trees; this will help us tune the ntree parameter plot(rf) The rf model, generated using the default number of trees and number of variables tried at each split, explained approximately 23% of the variance and produced a mean square error (sum of squared residuals divided by n) of 28 cm2. If you were to run this same model again, the % variance explained and MSE would change slightly due to the random subsetting and averaging in the randomForest algorithm. How does this compare with the rpart model? Recall that the soildata dataset had one Histosol observation: hist(soildata$Otot) Let’s remove that observation to see how it impacted our model. # file &lt;- &#39;https://raw.githubusercontent.com/ncss-tech/stats_for_soil_survey/master/data/logistic/wv_transect_editedforR.csv&#39; # download.file(file, destfile = &quot;soildata.csv&quot;) # soildata &lt;- read.csv(&quot;soildata.csv&quot;, header=TRUE, sep=&quot;,&quot;) soildata2 &lt;- droplevels(subset(soildata, order != &quot;histosol&quot;)) #remove Histosol observation # importance=TRUE will allow the generation of a variable importance plot rf2 &lt;- randomForest( Otot ~ rainfall + geology + aachn + dem10m + downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + landsatb3 +landsatb7 + maxc100 + maxent + minc100 + mirref + ndvi+ northeastn + northness + northwestn + planc100 + proc100 + protection + relpos11 + slp50 + solar + tanc75, data = soildata2, importance = TRUE, ntree = 1000, mtry = 9 ) # statistical summary rf2 ## ## Call: ## randomForest(formula = Otot ~ rainfall + geology + aachn + dem10m + downslpgra + eastness + greenrefl + landsatb1 + landsatb2 + landsatb3 + landsatb7 + maxc100 + maxent + minc100 + mirref + ndvi + northeastn + northness + northwestn + planc100 + proc100 + protection + relpos11 + slp50 + solar + tanc75, data = soildata2, importance = TRUE, ntree = 1000, mtry = 9) ## Type of random forest: regression ## Number of trees: 1000 ## No. of variables tried at each split: 9 ## ## Mean of squared residuals: 24.21259 ## % Var explained: 22.83 Did removing the outlier Histosol observation improve the model? The defaults for the number of trees (ntree) and number of variables tried at each split (mtry) may need to be adjusted in the randomForest command to explain more variance in the data and to reduce model over-fitting. For most datasets, manually tweaking these parameters and examining the statistical summary is often sufficient. The tuneRF() function can be used to determine the optimal mtry value, but some users have claimed that this algorithm leads to bias. Feel free to manually tweak the ntree and mtry settings to see how they effect the overall model performance. Another way to assess the rf model is to look at the variable importance plot. varImpPlot(rf2) # sorted tabular summary importance(rf2) %&gt;% as.data.frame() %&gt;% arrange(desc(`%IncMSE`)) ## %IncMSE IncNodePurity ## landsatb7 22.236902 985.81743 ## maxent 17.739327 867.90603 ## protection 10.402061 354.10473 ## solar 8.802159 297.73286 ## rainfall 8.221963 159.49617 ## northwestn 7.911376 466.61915 ## aachn 6.286667 276.36940 ## relpos11 5.993199 243.81129 ## dem10m 5.654822 265.87876 ## slp50 5.247386 227.37215 ## downslpgra 4.904722 181.87990 ## northeastn 4.537338 365.61570 ## minc100 4.198793 224.29018 ## eastness 3.925742 277.77702 ## maxc100 3.908787 197.91463 ## proc100 3.291970 198.55426 ## planc100 3.030439 199.93368 ## northness 2.997353 212.98176 ## landsatb3 2.791607 101.61470 ## tanc75 2.110630 201.27958 ## greenrefl 1.967475 229.90648 ## mirref 1.941573 378.89995 ## landsatb1 1.913580 136.40835 ## ndvi 1.730734 245.61133 ## landsatb2 1.633074 111.84254 ## geology 1.519288 34.60702 For each tree, each predictor in the OOB sample is randomly permuted and passed through the tree to obtain an error rate (mean square error (MSE) for regression and Gini index for classification). The error rate from the unpermuted OOB is then subtracted from the error rate of the permuted OOB data, and averaged across all trees. When this value is large, it implies that a variable is highly correlated to the dependent variable and is needed in the model. In a regression tree analysis, randomForest uses %IncMSE and IncNodePurity to rank variable importance. %IncMSE is simply the average increase in squared residuals of the test set when variables are randomly permuted (little importance = little change in model when variable is removed or added) and IncNodePurity is the increase in homogeneity in the data partitions. In a classification tree analysis, randomForest uses MeanDecreaseAccuracy and MeanDecreaseGini. For MeanDecreaseAccuracy, the more the accuracy of the model decreases due to the addition of a single variable, the more important the variable is deemed. MeanDecreaseGini is a measure of how each variable contributes to the homogeneity of the nodes and leaves. In the rf2 model, it is apparent that landsatb7 is the most important variable used in the model, followed by maxent, protection index, northwestness, solar, and rainfall. 6.4.1 Exercise 3: randomForest Using the soildata dataset, construct a randomForest model to predict the probability of a folistic epipedon. Be sure to tweak the ntree and mtry parameters to capture the most variability. Use the following code to combine ochric and umbric into a new category called nonfolistic. soildata$epipedon2 &lt;- ifelse(soildata$epipedon %in% c(&quot;ochric&quot;, &quot;umbric&quot;), &quot;nonfolistic&quot;, soildata$epipedon) ** 1) What is the out-of-bag error rate?** ** 2) Compare this model with the total O horizon thickness regression model. Which would be better for spatial interpolation?** ** 3) How could you improve this model?** 6.5 Prediction using Tree-based Models As with any modeling technique, tree-based models can be used for prediction and can be spatially interpolated using environmental covariates. In order to interpolate a model, R requires that all raster images have a common datum, common cell resolution, are coregistered, and are preferably .img files. The function stack() combines all of the rasters into a “raster stack.” The predict() function is then used in the form of: predict(rasterstack, fittedmodel, type=\"\"). Follow along through the example below to interpolate the rpart total O horizon thickness model: library(raster) # combine rasters with a .img file extension stored in the working directory rasters &lt;- stack(list.files(getwd(), pattern = &quot;img$&quot;, full.names = FALSE)) rasters model &lt;- randomForest( Otot ~ landsatb7 + maxent + protection + northwestn + solar, data = soildata2 ) # type not specified = vector of predicted values, &quot;response&quot; for predicted class, &quot;prob&quot; for probabilities, or &quot;vote&quot; for matrix of vote counts (one column for each class and one row for each new input); either in raw counts or in fractions (if norm.votes = TRUE) # options for predicting rpart model: type = &quot;vector&quot; for mean response at the node, &quot;prob&quot; for matrix of class probabilities, or &quot;class&quot; for a factor of classifications based on the responses predict(rasters, model, progress = &quot;window&quot;, overwrite = TRUE, filename = &quot;rfpredict.img&quot;) The output raster “rfpredict.img” can be added and viewed in ArcMap. R GUI image You can also view the interpolated model in R: rfpredict &lt;- raster(&quot;rfpredict.img&quot;) plot(rfpredict, xlab = &quot;Easting (m)&quot;, ylab = &quot;Northing (m)&quot;, main = &quot;Total O Horizon Thickness (cm)&quot;) 6.6 Summary Tree-based models are intuitive, quick to run, nonparametric, and are often ideal for exploratory data analysis and prediction. Both rpart and randomForest produce graphical and tabular outputs to aid interpretation. Both packages also perform internal validataion (rpart=10-fold cross validation; randomForest=OOB error estimates) to assess model performance. Tree-based models do require pruning and/or tweaking of model parameters to reduce over-fitting and are unstable in that removing observations (especially outliers) or independent predictors can greatly alter the tree structure. In general, tree-based models are robust against multicollinearity and low n, high p datasets (low sample size and many predictors). References "],["acc-unc-categorical-data.html", "A Accuracy and Uncertainty for Categorical Predictions A.1 Status Quo A.2 Theses A.3 Soap Box Time A.4 Concept Demonstration via Simulated Data A.5 Accuracy A.6 Uncertainty A.7 Review A.8 Example Implementation A.9 Resources", " A Accuracy and Uncertainty for Categorical Predictions This document is an abbreviated attempt at addressing some of the issues related to accuracy and uncertainty that I have brought up over discussion of raster (soil class) mapping standards. As such, the following is a combination of soap box moments, demonstrations of methods, todo items for my future self, and references. Honestly, before going any further be sure to read the recent paper by Rossiter, Zeng, and Zhang (2017). This article does a fine job of summarizing the major differences between classification and prediction. Most of the modeling frameworks we will be using or evaluating generate predictions in the form of probabilities (prediction). At some point the stack of probabilities will be converted into a single map depicting the most likely class at each pixel (classification). The iterative assessment of model performance (e.g. accuracy and uncertainty) should happen as part of the prediction phase via metrics such as the Brier score and Shannon entropy. An evaluation of the final classification is helpful for communicating accuracy to a wider audience (e.g. percent correctly classified) but should not be the primary means of optimizing model performance. A.1 Status Quo The “Digital Soil Mapping” chapter (5) from the latest Soil Survey Manual describes two commonly used metrics for the description of accuracy and uncertainty: overall accuracy / percent correctly classified (PCC) and the confusion index (CI) of Burrough, van Gaans, and Hootsmans (1997). These methods are widely used and implementation is simple. Given the complex nature of class mapping results (e.g. stack of class probabilities) and inherent (likely quantifiable) similarity of soil classes, I think that we should explore options for a more robust suite of accuracy and uncertainty metrics. Furthermore, it is my opinion that any evaluation of probabilistic predictions should be integrated over all classes. A.2 Theses The \\(\\tau\\) statistic of (Rossiter, Zeng, and Zhang 2017) is a more reliable and nuanced representation of accuracy vs. PCC. The \\(\\tau\\) statistic can be upgraded with additional knowledge given the availability of 1) prior understanding of class proportions, and/or, 2) meaningful parameterization of pair-wise class distances. There can be consensus on formulation of approximate pair-wise distances, within a given modeling domain. Pair-wise distances may not necessarily be the same across modeling domains or projects. Brier scores are option for an even more nuanced representation of accuracy as they integrate all predicted probabilities. The confusion index of Burrough, van Gaans, and Hootsmans (1997) is an unstable metric when the number of predicted classes is large and when the most likely classes are associated with low probabilities. Shannon entropy (log base 2) is a more reliable representation of uncertainty than the confusion index, especially when the number of possible classes varies by project. The importance of a universally reliable representation of uncertainty is even more important when several methods are used concurrently. There should be a way to integrate pair-wise distances into the Shannon entropy (or related method) and Brier scores; maybe we will discover those here. A.3 Soap Box Time Our current QC/QA process is based on many forms of evaluation, accumulates some degree of subjectivity and relies heavily on qualitative forms of information (field experience, institutional knowledge, etc.). On the opposite side of the spectrum, the validation of raster mapping is often claimed to be free of subjective interference and entirely quantitative. Those are “good things” that we should always strive for, however, the simplicity of calculating a “percent correctly classified” can interfere with a more nuanced evaluation of accuracy. As I mentioned on the phone (and implicitly volunteered for) a validation “score” might be more meaningful than any single validation metrics. One such score might include: agreement between predicted probabilities and observed class (e.g. Brier scores) agreement between the most likely class and observed class, accounting for class similarities (e.g. weighted \\(\\tau\\)) distribution of class-wise Shannon entropy values calibration vs. predicted vs. validation proportion of classes some kind of metric that integrates spatial connectivity of predictions / observations, for example: cross-tabulate calibration / prediction / validation classes with geomorphon classes I strongly believe that we need a robust suite of metrics primarily for internal discussion and evaluation of raster mapping products; even more so when complex modeling frameworks such as randomForest or neural nets are used. Accuracy and uncertainty metrics are primarily vehicles for understanding, re-calibrating (as needed), and communicating statistical models as part of the development and QA/QC process. A.4 Concept Demonstration via Simulated Data Consider a supervised classification that generates predictions for 5 possible soil classes. Suites of predicted probabilities fall into 3 general cases: “Case 1”: classes D and E are nearly tied for the most likely class, but their respective probabilities are generally &lt; 0.5 “Case 2”: class E is almost always the most likely class, but classes B, C, and D are tied for second place “Case 3”: class E is always the most likely class, all other classes have probabilities &lt; 0.2 # examples of three cases print(p.1) Figure A.1: Probability distributions of predictions. Even though these are simulated data, the three cases above demonstrate common modeling scenarios where classification uncertainty ranges from very low (“Case 3”) in some areas to quite high (“Case 1”) in others. These three cases could easily be associated with real situations: “Case 1”: predictions for soil classes represent a hillslope complex that isn’t quite disentangled by the model “Case 2”: predictions for soil classes represent limited success in partitioning between a single water shedding (E) vs. multiple water collecting positions (A-D) “Case 3”: predictions for soil classes represent a successful partitioning between Holocene age deposits (E) vs. older alluvial terraces (A-D) A.5 Accuracy A.5.1 Confusion Matrix / Area Under ROC See Chapter 9. Review some of the commentary on the use of only the confusion matrix and AUROC for rating predictions in the medical field. The confusion matrix and associated statistics are a useful starting point but not the most effective means for comparing performance. A.5.2 Brier Scores Brier scores Harrell (2015) quantify agreement between observed classes and predicted probabilities: \\[ B = \\frac{1}{n} \\sum_{i=1}^{n}{ ( p_{i} - y_{i} )^{2} } \\] where \\(B\\) is an index of agreement between predicted probabilities, \\(\\mathbf{p}\\), and class labels, \\(\\mathbf{y}\\). Larger values suggest less agreement between probabilities and observed class labels. Follow-up: https://en.wikipedia.org/wiki/Brier_score https://stats.stackexchange.com/questions/112250/understanding-the-rank-probability-score http://empslocal.ex.ac.uk/people/staff/dbs202/publications/2008/stephenson-brier.pdf http://iopscience.iop.org/article/10.1088/1748-9326/7/4/044019 What about a weighted version of this score, based on a re-statement of the distance matrix? A.5.3 Tau and Weighted Tau (class-similarity) (Rossiter, Zeng, and Zhang 2017) implemented in aqp::tauw(). This paper contains some discussion on a weighted version of Shannon Entropy using the subset of similarities between predicted classes and the actual class. A.5.3.1 Commentary from DGR Prior class probabilities. Commentary from DGR: That depends on the mapping method. In LDA we can set the priors, then we’d use these in tau. But for an automatic DSM procedure the priors are all equal (Foody’s modified kappa). If judging a manual mapper, the priors can be their overall probabilities for an area. E.g., in one county we have a pretty good idea that it is half Vertisols, so the mapper is prejudiced (in the good sense) about this. Class similarity The weighting is quite tricky since obviously it can be used to manipulate results. I really like the ‘error loss’ method if there is some numerical value put on each difference – as I did with the NC site index. In CA you have the Storie index, you could use that difference for mis-mappings of series. Numerical taxonomy measures could also be used but you’d need to agree on which properties to use. If the purpose of the map is e.g. to estimate C stocks, then the difference between the mean C stocks between classes from NASIS might be used. Coming up with a transparent and accepted weighting can be tricky. A.6 Uncertainty A.6.1 Shanon Entropy \\[ H = -\\sum_{i=1}^{n}{p_{i} * log_{2}(p_{i})} \\] where \\(H\\) is an index of uncertainty associated with predicted probabilities, \\(\\mathbf{p}\\), of encountering classes \\(i\\) through \\(n\\). Smaller values imply less entropy (more information). Given equal class probabilities, H will increas as the number of classes increases. Kempen et al. (2009) described a normalized version of Shannon entropy that is constrained to values between 0 and 1: \\[ H = -\\sum_{i=1}^{n}{p_{i} * log_{n}(p_{i})} \\] where \\(H\\) is an index of uncertainty associated with predicted probabilities, \\(\\mathbf{p}\\), of encountering classes \\(i\\) through \\(n\\). This representation may be conveniently contained within the range of \\([0,1]\\), however, it cannot be used to compare uncertainty from models using different numbers of classes. It is my recommendation that the \\(log_{2}\\) version of Shannon H be used as our primary metric of uncertainty for predictive soil class mapping. Shannon entropy does not take into account similarity among classes. A.7 Review # examples of three cases print(p.1) pp &lt;- ldply(s, performance) names(pp)[1] &lt;- &#39;example&#39; kable_styling(kable(pp, row.names = FALSE, digits = 2, format=&#39;html&#39;), full_width = FALSE) example brier.score tau.equal tau.actual PCC Case 1 0.74 0.16 0.11 0.33 Case 2 0.71 0.27 0.21 0.42 Case 3 0.27 0.81 0.45 0.84 ex &lt;- ldply(s, extractExample, n=1) names(ex)[1] &lt;- &#39;example&#39; ex$CI &lt;- NULL ex$actual &lt;- NULL add_header_above(kable_styling(kable(ex, row.names = FALSE, digits = 2, format=&#39;html&#39;), full_width = FALSE), header=c(&quot; &quot; = 1, &quot;Class Probabilities&quot; = 5, &quot;Uncertainty&quot; = 1)) Class Probabilities Uncertainty example A B C D E Shannon.H Case 1 0.11 0.22 0.07 0.35 0.26 2.13 Case 2 0.07 0.13 0.14 0.31 0.35 2.10 Case 3 0.01 0.01 0.08 0.06 0.84 0.88 A.8 Example Implementation The aqp package has an implementation of Shannon entropy and Brier score; there are many other implementations but these are convenient for soil survey work. Consider the following table of predicted probabilities (classes A,B,C,D,E) and observed class (actual). library(aqp) # example data d &lt;- structure(list(A = c(0.0897243494322252, 0.0537087411977284, 0.0643087579284512, 0.0582791533521884, 0.0655491726966812, 0.0878056947034425, 0.0550727743006022, 0.10724015754623, 0.0332599961787985, 0.0555131608754956 ), B = c(0.191110141078936, 0.187244044389649, 0.119214057525671, 0.198461646003737, 0.161851348940294, 0.172157251906694, 0.113611770097243, 0.178697159594029, 0.194607795787689, 0.188977055949146), C = c(0.121941735763077, 0.0770539012535731, 0.0977753159795662, 0.0774293724263895, 0.072198187957068, 0.0366921003115242, 0.151033286139089, 0.0974443429098862, 0.124876574685048, 0.0864142563046045), D = c(0.351108807309283, 0.322120077305279, 0.440632731639948, 0.401063395801608, 0.312647702445919, 0.304193047630158, 0.270239142407351, 0.258895264130713, 0.422747316475851, 0.252724366285052 ), E = c(0.246114966416479, 0.359873235853771, 0.278069136926363, 0.264766432416077, 0.387753587960038, 0.399151905448182, 0.410043027055715, 0.357723075819142, 0.224508316872614, 0.416371160585702), id = c(&quot;1&quot;, &quot;10&quot;, &quot;100&quot;, &quot;1000&quot;, &quot;101&quot;, &quot;102&quot;, &quot;103&quot;, &quot;104&quot;, &quot;105&quot;, &quot;106&quot; ), actual = c(&quot;D&quot;, &quot;B&quot;, &quot;D&quot;, &quot;E&quot;, &quot;D&quot;, &quot;D&quot;, &quot;E&quot;, &quot;E&quot;, &quot;D&quot;, &quot;E&quot; )), .Names = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;id&quot;, &quot;actual&quot;), row.names = c(NA, 10L), class = &quot;data.frame&quot;) # check it out # predictions, and actual, observed class head(d) ## A B C D E id actual ## 1 0.08972435 0.1911101 0.12194174 0.3511088 0.2461150 1 D ## 2 0.05370874 0.1872440 0.07705390 0.3221201 0.3598732 10 B ## 3 0.06430876 0.1192141 0.09777532 0.4406327 0.2780691 100 D ## 4 0.05827915 0.1984616 0.07742937 0.4010634 0.2647664 1000 E ## 5 0.06554917 0.1618513 0.07219819 0.3126477 0.3877536 101 D ## 6 0.08780569 0.1721573 0.03669210 0.3041930 0.3991519 102 D Brier scores (accuracy) are computed over all predictions and associated observed classes. # compute Brier score from all predictions brierScore(d, classLabels = c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;), actual = &#39;actual&#39;) ## [1] 0.5833992 Shannon entropy (uncertainty) is computed from each vector of predicted probabilities. # shannon entropy for first row, could be a single pixel or obs. point shannonEntropy(d[1, c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;)]) ## [1] 2.166525 # compute shannon entropy for all rows apply(d[, c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;)], 1, shannonEntropy) ## 1 2 3 4 5 6 7 8 ## 2.166525 2.021157 1.982791 2.024063 2.011094 1.971243 2.036219 2.151995 ## 9 10 ## 2.006615 2.018874 A.9 Resources A.9.1 Evaluating Accuracy of Categorical / Probabilistic Predictions Commentary on the use of confusion matrix and AUROC What is the AUC / AUROC? Commentary on C-index / AUROC AUROC Scoring Rules Frank Harrel’s Website + links Classification vs. Prediction A.9.2 Sampling and Stability of Estimates Gridded Data: Sample vs. Population Demonstration of sampling density vs. stability of median References "],["commentary-selecting-a-modeling-framework.html", "B Commentary: Selecting a Modeling Framework B.1 Soil Temperature Regime Modeling in CA792", " B Commentary: Selecting a Modeling Framework The choice of modeling framework has a significant impact on the quantity of data required, flexibility to account for non-linearities and interactions, potential for over-fitting, model performance, and degree to which the final model can be interpreted. This document and related commentary provides a nice background on the interplay between model generality, interpretation, and performance. TODO: package up these data to be used as an example. B.1 Soil Temperature Regime Modeling in CA792 The following figure goes along with a bit of conversation I had (below) with some of my colleagues, on the topic of modeling soil temperature regime using a variety of frameworks. The strong bioclimatic gradient with MLRAs 17, 18, 22A, 22B made is possible to use a modeling framework that generated reasonable predictions and resulted in an interpretable model. Essentially, each framework (MLR, regression trees, randomForest, etc.) is useful for different tasks but thinking about the most appropriate framework ahead of time is time well spent. Predictions aren’t the same as science or understanding. Sometimes we need the former, sometimes we need the latter and sometimes we need both. The x-axis is elevation, in most cases the dominant driver of soil temperature and soil temperature regime in this area. The y-axis is conditional probability of several STR. The top panel represents the smooth surface fit by multinomial logistic regression. These smooth surfaces lend to testable interpretations such as “the transition between STR per 1,000’ of elevation gain follows XXX”. This is far more useful when the model includes other factors such as annual beam radiance and the effect of cold air drainages. Absolute accuracy is sacrificed for a general (e.g. continuous over predictors) representation of the system that can support inference. Another example, “at elevation XXX, what is the average effect of moving from a south-facing slope to a north-facing slope?”. The second panel down represents the hard thresholds generated by an algorithm from the tree-based classification framework (e.g. recursive partitioning trees via rpart). Accuracy is about the same as the MLR approach and the hard breaks can be interpreted as “reasonable” cut points or thresholds that may have links to physical processes. Note that the cut points identified by this framework are very close to the 50% probability cross-over points in the MLR panel. The result is a (potentially) pragmatic partitioning of reality that can support decisions but not inference (e.g. “rate of change in Pr(STR) vs. 1000’ elevation gain”). The third panel down represents the nearly-exact (over?) fitting of STR probabilities generated by the random forest framework. This approach builds thousands of classification trees and (roughly) averages them together. The results are incredible (unbelievable?) within-training-set accuracy (99% here) at the expense of an interpretable model. That isn’t always a problem: sometimes predictions are all that we have time for. That said, this framework requires a 100x larger training sample (vs. MLR) and an independent validation data set before it can be trusted on new data. editor_options: chunk_output_type: console "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
